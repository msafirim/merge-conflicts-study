ID,Merge commit SHA,Parent1,Parent2,Merge Date,File,Topic Branch Version,Mainline Version
1,5717ac3cc67fbda09cf54828e14e463c3fe07566,210e101f6d7677e103b24beb33726a8ed8672c5f,8758c541b35bda1a6494ba703b450517027d5e9f,Wed Apr 19 10:12:11 CEST 2017,core/src/test/java/org/elasticsearch/search/aggregations/metrics/InternalMaxTests.java,"double value = frequently() ? randomDouble() : randomFrom(new Double[] { Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY });         DocValueFormat formatter = randomFrom(new DocValueFormat.Decimal(""###.##""), DocValueFormat.BOOLEAN, DocValueFormat.RAW);         return new InternalMax(name, value, formatter, pipelineAggregators, metaData);","return new InternalMax(name, randomDouble(), randomNumericDocValueFormat(), pipelineAggregators, metaData);"
2,5717ac3cc67fbda09cf54828e14e463c3fe07566,210e101f6d7677e103b24beb33726a8ed8672c5f,8758c541b35bda1a6494ba703b450517027d5e9f,Wed Apr 19 10:12:11 CEST 2017,core/src/test/java/org/elasticsearch/search/aggregations/metrics/avg/InternalAvgTests.java,"DocValueFormat formatter = randomFrom(new DocValueFormat.Decimal(""###.##""), DocValueFormat.BOOLEAN, DocValueFormat.RAW);         long count = frequently() ? randomNonNegativeLong() % 100000 : 0;         return new InternalAvg(name, randomDoubleBetween(0, 100000, true), count, formatter, pipelineAggregators, metaData);","return new InternalAvg(name, randomDoubleBetween(0, 100000, true), randomNonNegativeLong() % 100000,                 randomNumericDocValueFormat(), pipelineAggregators, metaData);"
3,5717ac3cc67fbda09cf54828e14e463c3fe07566,210e101f6d7677e103b24beb33726a8ed8672c5f,8758c541b35bda1a6494ba703b450517027d5e9f,Wed Apr 19 10:12:11 CEST 2017,core/src/test/java/org/elasticsearch/search/aggregations/metrics/min/InternalMinTests.java,"double value = frequently() ? randomDouble() : randomFrom(new Double[] { Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY });         DocValueFormat formatter = randomFrom(new DocValueFormat.Decimal(""###.##""), DocValueFormat.BOOLEAN, DocValueFormat.RAW);         return new InternalMin(name, value, formatter, pipelineAggregators, metaData);","return new InternalMin(name, randomDouble(), randomNumericDocValueFormat(), pipelineAggregators, metaData);"
4,63e4552c0dc5c5bf9bc29f034e86cca8e0ec9230,e2ebabcb3ca550165ec6cfa6c4d4f02181f6b4fc,0c7fc229b8c22ee820df135e3d1983608759213d,Fri Jan 13 23:07:20 CET 2017,core/src/main/java/org/elasticsearch/transport/TransportService.java,protected DiscoveryNode getLocalNode() {,public DiscoveryNode getLocalNode() {
5,63e4552c0dc5c5bf9bc29f034e86cca8e0ec9230,e2ebabcb3ca550165ec6cfa6c4d4f02181f6b4fc,0c7fc229b8c22ee820df135e3d1983608759213d,Fri Jan 13 23:07:20 CET 2017,core/src/main/java/org/elasticsearch/transport/TransportService.java,"return handshake(connection, handshakeTimeout, clusterName::equals);","final HandshakeResponse response;         final DiscoveryNode node = connection.getNode();         try {             PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(                 new FutureTransportResponseHandler<HandshakeResponse>() {                 @Override                 public HandshakeResponse newInstance() {                     return new HandshakeResponse();                 }             });             sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,                 TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler);             response = futureHandler.txGet();         } catch (Exception e) {             throw new IllegalStateException(""handshake failed with "" + node, e);         }         if (!Objects.equals(clusterName, response.clusterName)) {             throw new IllegalStateException(""handshake failed, mismatched cluster name ["" + response.clusterName + ""] - "" + node);         } else if (response.version.isCompatible(localNode.getVersion()) == false) {             throw new IllegalStateException(""handshake failed, incompatible version ["" + response.version + ""] - "" + node);         }         return response.discoveryNode;"
6,cd236c4de4a9edb8a5fe2a3d159eecd67815f92b,b4c8c21553fe3348e9c447e0deb49dbd81864c9e,e93fdb846083a29dc65505e111e32553d6f7be6c,Fri Jan 13 18:09:18 CET 2017,core/src/test/java/org/elasticsearch/index/mapper/DynamicMappingDisabledTests.java,"TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> clusterService.localNode(), null);         indicesService = getInstanceFromNode(IndicesService.class);         shardStateAction = new ShardStateAction(settings, clusterService, transportService, null, null, THREAD_POOL);         actionFilters = new ActionFilters(Collections.emptySet());         indexNameExpressionResolver = new IndexNameExpressionResolver(settings);         autoCreateIndex = new AutoCreateIndex(settings, new ClusterSettings(settings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),                 indexNameExpressionResolver);","TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);         IndicesService indicesService = getInstanceFromNode(IndicesService.class);         ShardStateAction shardStateAction = new ShardStateAction(settings, clusterService, transportService, null, null, THREAD_POOL);         ActionFilters actionFilters = new ActionFilters(Collections.emptySet());         IndexNameExpressionResolver indexNameExpressionResolver = new IndexNameExpressionResolver(settings);         AutoCreateIndex autoCreateIndex = new AutoCreateIndex(settings, new ClusterSettings(settings,                 ClusterSettings.BUILT_IN_CLUSTER_SETTINGS), indexNameExpressionResolver);         UpdateHelper updateHelper = new UpdateHelper(settings, null);         TransportShardBulkAction shardBulkAction = new TransportShardBulkAction(settings, transportService, clusterService,                 indicesService, THREAD_POOL, shardStateAction, null, updateHelper, actionFilters, indexNameExpressionResolver);         transportBulkAction = new TransportBulkAction(settings, THREAD_POOL, transportService, clusterService,                 null, shardBulkAction, null, actionFilters, indexNameExpressionResolver, autoCreateIndex, System::currentTimeMillis);"
7,2aae409508aeff987fa3d4639648a3465976aff0,4c61f1d75da426b9df1f3bca494d6b53ad271914,baef86b9d3d5f4d3eae94f0d7c33c15ca0e1ca09,Wed Jan 11 12:41:26 CET 2017,core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java,"Transport.Connection connection = nodeIdToConnection.apply(entry.value.shardTarget().nodeId());                 sendReleaseSearchContext(entry.value.id(), connection);","DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.shardTarget().getNodeId());                 sendReleaseSearchContext(entry.value.id(), node);"
8,2aae409508aeff987fa3d4639648a3465976aff0,4c61f1d75da426b9df1f3bca494d6b53ad271914,baef86b9d3d5f4d3eae94f0d7c33c15ca0e1ca09,Wed Jan 11 12:41:26 CET 2017,core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java,"Transport.Connection connection = nodeIdToConnection.apply(entry.value.queryResult().shardTarget().nodeId());                         sendReleaseSearchContext(entry.value.queryResult().id(), connection);","DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.queryResult().shardTarget().getNodeId());                         sendReleaseSearchContext(entry.value.queryResult().id(), node);"
9,2aae409508aeff987fa3d4639648a3465976aff0,4c61f1d75da426b9df1f3bca494d6b53ad271914,baef86b9d3d5f4d3eae94f0d7c33c15ca0e1ca09,Wed Jan 11 12:41:26 CET 2017,core/src/main/java/org/elasticsearch/action/search/SearchDfsQueryAndFetchAsyncAction.java,Transport.Connection connection = nodeIdToConnection.apply(dfsResult.shardTarget().nodeId());,DiscoveryNode node = nodeIdToDiscoveryNode.apply(dfsResult.shardTarget().getNodeId());
10,2aae409508aeff987fa3d4639648a3465976aff0,4c61f1d75da426b9df1f3bca494d6b53ad271914,baef86b9d3d5f4d3eae94f0d7c33c15ca0e1ca09,Wed Jan 11 12:41:26 CET 2017,core/src/main/java/org/elasticsearch/action/search/SearchDfsQueryThenFetchAsyncAction.java,Transport.Connection connection = nodeIdToConnection.apply(queryResult.shardTarget().nodeId());,DiscoveryNode node = nodeIdToDiscoveryNode.apply(queryResult.shardTarget().getNodeId());
11,7be3af1123baf2b0363337dbedf3df6b582cf3ff,29d7c0d50d46b154f5148313c7906699ec237c2f,290326e73e088dacd7a6a20f7c61d17b3105aabc,Tue Dec 20 14:32:09 CET 2016,core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java,indices.add(remoteIndex);                     } else {                         localIndicesList.add(index);,"GroupShardsIterator shardIterators = clusterService.operationRouting().searchShards(clusterState, concreteIndices, routingMap,             searchRequest.preference());         failIfOverShardCountLimit(clusterService, shardIterators.size());         Map<String, Float> concreteIndexBoosts = resolveIndexBoosts(searchRequest, clusterState);         // optimize search type for cases where there is only one shard group to search on         if (shardIterators.size() == 1) {             // if we only have one group, then we always want Q_A_F, no need for DFS, and no need to do THEN since we hit one shard             searchRequest.searchType(QUERY_AND_FETCH);"
12,7be3af1123baf2b0363337dbedf3df6b582cf3ff,29d7c0d50d46b154f5148313c7906699ec237c2f,290326e73e088dacd7a6a20f7c61d17b3105aabc,Tue Dec 20 14:32:09 CET 2016,core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java,"if (remoteIndicesByCluster.isEmpty()) {             executeSearch((SearchTask)task, startTimeInMillis, searchRequest, localIndices, Collections.emptyList(),                     Collections.emptySet(), Collections.emptyMap(), listener);         } else {             // nocommit we have to extract this logic to add unittests ideally with manually prepared searchShardsResponses etc.             searchTransportService.sendSearchShards(searchRequest, remoteIndicesByCluster,                 ActionListener.wrap((searchShardsResponses) -> {                     List<ShardIterator> remoteShardIterators = new ArrayList<>();                     Set<DiscoveryNode> remoteNodes = new HashSet<>();                     Map<String, AliasFilter> remoteAliasFilters = new HashMap<>();                     processRemoteShards(searchShardsResponses, remoteShardIterators, remoteNodes, remoteAliasFilters);                     executeSearch((SearchTask)task, startTimeInMillis, searchRequest, localIndices, remoteShardIterators,                             remoteNodes, remoteAliasFilters, listener);                 }, listener::onFailure));         }","searchAsyncAction((SearchTask)task, searchRequest, shardIterators, startTimeInMillis, clusterState,             Collections.unmodifiableMap(aliasFilter), concreteIndexBoosts, listener).start();"
13,eb5cc1e24193e88bb85f608deb3ac09327825528,38060b209695db8d37d516bdcbff0145d0badcc7,63af03a1042a6ae1ed333aaabcd9cfc3a9fc3fec,Mon Dec 19 16:07:02 CET 2016,core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java,indexRequest.seqNo(indexResult.getSeqNo());,indexRequest.setSeqNo(indexResult.getSeqNo());
14,eb5cc1e24193e88bb85f608deb3ac09327825528,38060b209695db8d37d516bdcbff0145d0badcc7,63af03a1042a6ae1ed333aaabcd9cfc3a9fc3fec,Mon Dec 19 16:07:02 CET 2016,core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java,"protected WritePrimaryResult<DeleteRequest, DeleteResponse> shardOperationOnPrimary(             DeleteRequest request, IndexShard primary) throws Exception {         return shardBulkAction.executeSingleItemBulkRequestOnPrimary(request, primary);","protected WritePrimaryResult shardOperationOnPrimary(DeleteRequest request, IndexShard primary) throws Exception {         final Engine.DeleteResult result = executeDeleteRequestOnPrimary(request, primary);         final DeleteResponse response;         final DeleteRequest replicaRequest;         if (result.hasFailure() == false) {             // update the request with the version so it will go to the replicas             request.versionType(request.versionType().versionTypeForReplicationAndRecovery());             request.version(result.getVersion());             request.setSeqNo(result.getSeqNo());             assert request.versionType().validateVersionForWrites(request.version());             replicaRequest = request;             response = new DeleteResponse(                 primary.shardId()                 request.type()                 request.id()                 result.getSeqNo()                 result.getVersion()                 result.isFound());         } else {             response = null;             replicaRequest = null;         }         return new WritePrimaryResult(replicaRequest, response, result.getTranslogLocation(), result.getFailure(), primary);"
15,eb5cc1e24193e88bb85f608deb3ac09327825528,38060b209695db8d37d516bdcbff0145d0badcc7,63af03a1042a6ae1ed333aaabcd9cfc3a9fc3fec,Mon Dec 19 16:07:02 CET 2016,core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java,"protected WritePrimaryResult<IndexRequest, IndexResponse> shardOperationOnPrimary(             IndexRequest request, IndexShard primary) throws Exception {         return shardBulkAction.executeSingleItemBulkRequestOnPrimary(request, primary);","protected WritePrimaryResult shardOperationOnPrimary(IndexRequest request, IndexShard primary) throws Exception {         final Engine.IndexResult indexResult = executeIndexRequestOnPrimary(request, primary, mappingUpdatedAction);         final IndexResponse response;         final IndexRequest replicaRequest;         if (indexResult.hasFailure() == false) {             // update the version on request so it will happen on the replicas             final long version = indexResult.getVersion();             request.version(version);             request.versionType(request.versionType().versionTypeForReplicationAndRecovery());             request.setSeqNo(indexResult.getSeqNo());             assert request.versionType().validateVersionForWrites(request.version());             replicaRequest = request;             response = new IndexResponse(primary.shardId(), request.type(), request.id(), indexResult.getSeqNo(),                     indexResult.getVersion(), indexResult.isCreated());         } else {             response = null;             replicaRequest = null;         }         return new WritePrimaryResult(replicaRequest, response, indexResult.getTranslogLocation(), indexResult.getFailure(), primary);"
16,f766dfca827a91583394c098d7470f0626a18e30,4231aa4feb0361015cfc3eb3080e3b2772877f84,e9bb8d8b38c5ec50f46f9703f4284e1d617ac65d,Fri Dec 09 06:44:04 CET 2016,core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java,"BulkRequest bulkRequest = new BulkRequest();         bulkRequest.add(request);         bulkRequest.setRefreshPolicy(request.getRefreshPolicy());         bulkRequest.timeout(request.timeout());         bulkRequest.waitForActiveShards(request.waitForActiveShards());         request.setRefreshPolicy(WriteRequest.RefreshPolicy.NONE);         bulkAction.execute(task, bulkRequest, new ActionListener<BulkResponse>() {","if (Strings.hasText(request.getPipeline())) {             if (clusterService.localNode().isIngestNode()) {                 processIngestIndexRequest(task, request, listener);             } else {                 ingestForwarder.forwardIngestRequest(IndexAction.INSTANCE, request, listener);             }             return;         }         // if we don't have a master, we don't have metadata, that's fine, let it find a master using create index API         ClusterState state = clusterService.state();         if (shouldAutoCreate(request, state)) {             CreateIndexRequest createIndexRequest = new CreateIndexRequest();             createIndexRequest.index(request.index());             createIndexRequest.cause(""auto(index api)"");             createIndexRequest.masterNodeTimeout(request.timeout());             createIndexAction.execute(task, createIndexRequest, new ActionListener<CreateIndexResponse>() {"
17,c9f49039d3779e14ee5c10d0fb07e8d4da1a2288,c7a1b3eb5046cc509a94de67e77c18090725b1a4,4c53e55d34194b0f4904682c98160e56ae5c140f,Tue Nov 15 11:14:47 CET 2016,core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java,"if (indicesService.hasIndex(indexMetaData.getIndex()) == false) {                                 // if the index does not exists we create it once, add all types to the mapper service and                                 // close it later once we are done with mapping update                                 indicesToClose.add(indexMetaData.getIndex());                                 IndexService indexService =                                     indicesService.createIndex(indexMetaData, Collections.emptyList(), shardId -> {});","if (indexMapperServices.containsKey(indexMetaData.getIndex()) == false) {                                 MapperService mapperService = indicesService.createIndexMapperService(indexMetaData);                                 indexMapperServices.put(index, mapperService);"
18,c9f49039d3779e14ee5c10d0fb07e8d4da1a2288,c7a1b3eb5046cc509a94de67e77c18090725b1a4,4c53e55d34194b0f4904682c98160e56ae5c140f,Tue Nov 15 11:14:47 CET 2016,core/src/main/java/org/elasticsearch/index/IndexService.java,"IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, indexAnalyzers, refreshTask, fsyncTask, globalCheckpointTask);","IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, mapperService, refreshTask, fsyncTask);"
19,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java,"public static WriteResult<DeleteResponse> executeDeleteRequestOnPrimary(DeleteRequest request, IndexShard indexShard) {         Engine.Delete delete = indexShard.prepareDeleteOnPrimary(request.type(), request.id(), request.version(), request.versionType());         indexShard.delete(delete);         // update the request with the version so it will go to the replicas         request.versionType(delete.versionType().versionTypeForReplicationAndRecovery());         request.version(delete.version());         request.seqNo(delete.seqNo());         assert request.versionType().validateVersionForWrites(request.version());         DeleteResponse response = new DeleteResponse(indexShard.shardId(), request.type(), request.id(), delete.seqNo(), delete.version(), delete.found());         return new WriteResult<>(response, delete.getTranslogLocation());","public static Engine.DeleteResult executeDeleteRequestOnPrimary(DeleteRequest request, IndexShard primary) {         final Engine.Delete delete = primary.prepareDeleteOnPrimary(request.type(), request.id(), request.version(), request.versionType());         return primary.delete(delete);"
20,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java,"public static Engine.Delete executeDeleteRequestOnReplica(DeleteRequest request, IndexShard indexShard) {         Engine.Delete delete = indexShard.prepareDeleteOnReplica(request.type(), request.id(), request.seqNo(), request.version(), request.versionType());         indexShard.delete(delete);         return delete;","public static Engine.DeleteResult executeDeleteRequestOnReplica(DeleteRequest request, IndexShard replica) {         final Engine.Delete delete = replica.prepareDeleteOnReplica(request.type(), request.id(), request.version(), request.versionType());         return replica.delete(delete);"
21,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java,"final Engine.Index operation = indexShard.prepareIndexOnReplica(sourceToParse, request.seqNo(), request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());","final Engine.Index operation;         try {             operation = replica.prepareIndexOnReplica(sourceToParse, request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());         } catch (MapperParsingException e) {             return new Engine.IndexResult(e, request.version());         }"
22,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java,"indexShard.index(operation);         // update the version on request so it will happen on the replicas         final long version = operation.version();         request.version(version);         request.versionType(request.versionType().versionTypeForReplicationAndRecovery());         request.seqNo(operation.seqNo());         assert request.versionType().validateVersionForWrites(request.version());         IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.seqNo(), request.version(), operation.isCreated());         return new WriteResult<>(response, operation.getTranslogLocation());",return primary.index(operation);
23,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,listener.onResponse(Empty.INSTANCE);,if (finalFailure == null) {                 listener.onResponse(TransportResponse.Empty.INSTANCE);             } else {                 listener.onFailure(finalFailure);             }
24,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java,"final IndexService indexService = indicesService.createIndex(nodeServicesProvider, tmpImd,                                 Collections.emptyList(), shardId -> {});","final IndexService indexService = indicesService.createIndex(tmpImd, Collections.emptyList());"
25,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java,"indexService = indicesService.createIndex(nodeServicesProvider, index, emptyList(), shardId -> {});","indexService = indicesService.createIndex(index, emptyList());"
26,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java,"indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData, Collections.emptyList(), shardId -> {});","indexService = indicesService.createIndex(indexMetaData, Collections.emptyList());"
27,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java,"IndexService indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData,                                     Collections.emptyList(), shardId -> {});","IndexService indexService = indicesService.createIndex(indexMetaData, Collections.emptyList());"
28,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,"index.setCreated(false);                 return;             }             maybeUpdateSequenceNumber(index);             final long updatedVersion = updateVersion(index, currentVersion, expectedVersion);             index.setCreated(deleted);             if (currentVersion == Versions.NOT_FOUND && forceUpdateDocument == false) {                 // document does not exists, we can optimize for create                 index(index, indexWriter);","// skip index operation because of version conflict on recovery                 indexResult = new IndexResult(expectedVersion, false);"
29,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,"maybeAddToTranslog(index, updatedVersion, Translog.Index::new, NEW_VERSION_VALUE);         } finally {             if (index.seqNo() != SequenceNumbersService.UNASSIGNED_SEQ_NO) {                 seqNoService.markSeqNoAsCompleted(index.seqNo());","indexResult = new IndexResult(updatedVersion, deleted);                 location = index.origin() != Operation.Origin.LOCAL_TRANSLOG_RECOVERY                         ? translog.add(new Translog.Index(index, indexResult))                         : null;                 versionMap.putUnderLock(index.uid().bytes(), new VersionValue(updatedVersion));                 indexResult.setTranslogLocation(location);             }             indexResult.setTook(System.nanoTime() - index.startTime());             indexResult.freeze();             return indexResult;"
30,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,"if (checkVersionConflict(delete, currentVersion, expectedVersion, deleted)) return;             maybeUpdateSequenceNumber(delete);             final long updatedVersion = updateVersion(delete, currentVersion, expectedVersion);             final boolean found = deleteIfFound(delete, currentVersion, deleted, versionValue);             delete.updateVersion(updatedVersion, found);             maybeAddToTranslog(delete, updatedVersion, Translog.Delete::new, DeleteVersionValue::new);         } finally {             if (delete.seqNo() != SequenceNumbersService.UNASSIGNED_SEQ_NO) {                 seqNoService.markSeqNoAsCompleted(delete.seqNo());             }","final DeleteResult deleteResult;             if (checkVersionConflict(delete, currentVersion, expectedVersion, deleted)) {                 // skip executing delete because of version conflict on recovery                 deleteResult = new DeleteResult(expectedVersion, true);             } else {                 updatedVersion = delete.versionType().updateVersion(currentVersion, expectedVersion);                 found = deleteIfFound(delete.uid(), currentVersion, deleted, versionValue);                 deleteResult = new DeleteResult(updatedVersion, found);                 location = delete.origin() != Operation.Origin.LOCAL_TRANSLOG_RECOVERY                         ? translog.add(new Translog.Delete(delete, deleteResult))                         : null;                 versionMap.putUnderLock(delete.uid().bytes()                         new DeleteVersionValue(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis()));                 deleteResult.setTranslogLocation(location);             }             deleteResult.setTook(System.nanoTime() - delete.startTime());             deleteResult.freeze();             return deleteResult;"
31,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java,"final Engine.Delete engineDelete = new Engine.Delete(uid.type(), uid.id(), delete.uid(), delete.seqNo(),                         delete.version(), delete.versionType().versionTypeForReplicationAndRecovery(), origin, System.nanoTime(), false);","final Engine.Delete engineDelete = new Engine.Delete(uid.type(), uid.id(), delete.uid(), delete.version(),                         delete.versionType().versionTypeForReplicationAndRecovery(), origin, System.nanoTime());"
32,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/index/translog/Translog.java,"public Delete(Engine.Delete delete) {             this(delete.uid(), delete.seqNo(), delete.version(), delete.versionType());         }","public Delete(Engine.Delete delete, Engine.DeleteResult deleteResult) {             this.uid = delete.uid();             this.version = deleteResult.getVersion();             this.versionType = delete.versionType();         }"
33,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java,"indexService =                     indicesService.createIndex(nodeServicesProvider, indexMetaData, buildInIndexListener, globalCheckpointSyncer);","indexService = indicesService.createIndex(indexMetaData, buildInIndexListener);"
34,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/action/ingest/BulkRequestModifierTests.java,"IndexResponse indexResponse = new IndexResponse(new ShardId(""index"", ""_na_"", 0), indexRequest.type(), indexRequest.id(), 1, 1, true);             originalResponses.add(new BulkItemResponse(Integer.parseInt(indexRequest.id()), indexRequest.opType().lowercase(), indexResponse));","IndexResponse indexResponse = new IndexResponse(new ShardId(""index"", ""_na_"", 0), indexRequest.type(), indexRequest.id(), 1, true);             originalResponses.add(new BulkItemResponse(Integer.parseInt(indexRequest.id()), indexRequest.opType(), indexResponse));"
35,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java,"assertConcreteShardRequest(capturedRequest.request, request, replica.allocationId());","final TransportReplicationAction.ConcreteShardRequest<Request> concreteShardRequest =             (TransportReplicationAction.ConcreteShardRequest<Request>) capturedRequest.request;         assertThat(concreteShardRequest.getRequest(), equalTo(request));         assertThat(concreteShardRequest.getRequest().isRetrySet.get(), equalTo(true));         assertThat(concreteShardRequest.getTargetAllocationID()             equalTo(replica.allocationId().getId()));"
36,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/IndexModuleTests.java,"IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache,                 mapperRegistry, shardId -> {} ,new IndicesFieldDataCache(settings, listener));",IndexService indexService = newIndexService(module);
37,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/IndexModuleTests.java,"IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache,             mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, listener));",IndexService indexService = newIndexService(module);
38,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/IndexModuleTests.java,"IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry,             shardId -> {}, new IndicesFieldDataCache(settings, this.listener));",IndexService indexService = newIndexService(module);
39,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/IndexModuleTests.java,"IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry,             shardId -> {}, new IndicesFieldDataCache(settings, listener));",IndexService indexService = newIndexService(module);
40,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/IndexModuleTests.java,"try {             module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry,                 shardId -> {}, new IndicesFieldDataCache(settings, listener));         } catch (IllegalArgumentException ex) {","Exception ex = expectThrows(IllegalArgumentException.class, () -> newIndexService(module));"
41,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"final Engine.Delete operation = new Engine.Delete(""test"", ""1"", newUid(""test#1""), SequenceNumbersService.UNASSIGNED_SEQ_NO, i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), false);","final Engine.Delete operation = new Engine.Delete(""test"", ""1"", newUid(""test#1""), i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime());"
42,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"create = new Engine.Index(newUid(""1""), doc, create.seqNo(), create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);         replicaEngine.index(create);         assertThat(create.version(), equalTo(1L));","create = new Engine.Index(newUid(""1""), doc, indexResult.getVersion(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);         indexResult = replicaEngine.index(create);         assertThat(indexResult.getVersion(), equalTo(1L));"
43,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);         replicaEngine.index(index);         assertThat(index.version(), equalTo(1L));","index = new Engine.Index(newUid(""1""), doc, indexResult.getVersion(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);         indexResult = replicaEngine.index(index);         assertThat(indexResult.getVersion(), equalTo(1L));"
44,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 12, VersionType.EXTERNAL, PRIMARY, 0, -1, false);         engine.index(index);         assertThat(index.version(), equalTo(12L));","Engine.Index index = new Engine.Index(newUid(""1""), doc, 12, VersionType.EXTERNAL, PRIMARY, 0, -1, false);         Engine.IndexResult indexResult = engine.index(index);         assertThat(indexResult.getVersion(), equalTo(12L));"
45,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);         replicaEngine.index(index);         assertThat(index.version(), equalTo(12L));","index = new Engine.Index(newUid(""1""), doc, indexResult.getVersion(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);         indexResult = replicaEngine.index(index);         assertThat(indexResult.getVersion(), equalTo(12L));"
46,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0, -1, false);         try {             engine.index(index);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","index = new Engine.Index(newUid(""1""), doc, 1L, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0, -1, false);         indexResult = engine.index(index);         assertTrue(indexResult.hasFailure());         assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
47,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0, -1, false);         try {             engine.index(index);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","index = new Engine.Index(newUid(""1""), doc, 3L, VersionType.INTERNAL, PRIMARY, 0, -1, false);         indexResult = engine.index(index);         assertTrue(indexResult.hasFailure());         assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
48,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 14, VersionType.EXTERNAL, PRIMARY, 0, -1, false);         engine.index(index);         assertThat(index.version(), equalTo(14L));","index = new Engine.Index(newUid(""1""), doc, 14, VersionType.EXTERNAL, PRIMARY, 0, -1, false);         indexResult = engine.index(index);         assertThat(indexResult.getVersion(), equalTo(14L));"
49,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 13, VersionType.EXTERNAL, PRIMARY, 0, -1, false);         try {             engine.index(index);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","index = new Engine.Index(newUid(""1""), doc, 13, VersionType.EXTERNAL, PRIMARY, 0, -1, false);         indexResult = engine.index(index);         assertTrue(indexResult.hasFailure());         assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
50,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, PRIMARY, 0, -1, false);         try {             engine.index(index);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","index = new Engine.Index(newUid(""1""), doc, 1L, VersionType.INTERNAL, PRIMARY, 0, -1, false);         indexResult = engine.index(index);         assertTrue(indexResult.hasFailure());         assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
51,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Delete delete = new Engine.Delete(""test"", ""1"", newUid(""1""), SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, PRIMARY, 0, false);         try {             engine.delete(delete);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","Engine.Delete delete = new Engine.Delete(""test"", ""1"", newUid(""1""), 1L, VersionType.INTERNAL, PRIMARY, 0);         Engine.DeleteResult result = engine.delete(delete);         assertTrue(result.hasFailure());         assertThat(result.getFailure(), instanceOf(VersionConflictEngineException.class));"
52,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"delete = new Engine.Delete(""test"", ""1"", newUid(""1""), SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0, false);         try {             engine.delete(delete);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","delete = new Engine.Delete(""test"", ""1"", newUid(""1""), 3L, VersionType.INTERNAL, PRIMARY, 0);         result = engine.delete(delete);         assertTrue(result.hasFailure());         assertThat(result.getFailure(), instanceOf(VersionConflictEngineException.class));"
53,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"delete = new Engine.Delete(""test"", ""1"", newUid(""1""), SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0, false);         engine.delete(delete);         assertThat(delete.version(), equalTo(3L));","delete = new Engine.Delete(""test"", ""1"", newUid(""1""), 2L, VersionType.INTERNAL, PRIMARY, 0);         result = engine.delete(delete);         assertThat(result.getVersion(), equalTo(3L));"
54,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0, -1, false);         try {             engine.index(index);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }         // we shouldn't be able to create as well         Engine.Index create = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);         try {             engine.index(create);         } catch (VersionConflictEngineException e) {             // all is well         }","index = new Engine.Index(newUid(""1""), doc, 2L, VersionType.INTERNAL, PRIMARY, 0, -1, false);         indexResult = engine.index(index);         assertTrue(indexResult.hasFailure());         assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
55,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Delete delete = new Engine.Delete(""test"", ""1"", newUid(""1""), SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, PRIMARY, 0, false);         try {             engine.delete(delete);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","Engine.Delete delete = new Engine.Delete(""test"", ""1"", newUid(""1""), 1L, VersionType.INTERNAL, PRIMARY, 0);         Engine.DeleteResult deleteResult = engine.delete(delete);         assertTrue(deleteResult.hasFailure());         assertThat(deleteResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
56,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"delete = new Engine.Delete(""test"", ""1"", newUid(""1""), SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0, false);         try {             engine.delete(delete);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","delete = new Engine.Delete(""test"", ""1"", newUid(""1""), 3L, VersionType.INTERNAL, PRIMARY, 0);         deleteResult = engine.delete(delete);         assertTrue(deleteResult.hasFailure());         assertThat(deleteResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
57,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"delete = new Engine.Delete(""test"", ""1"", newUid(""1""), SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0, false);         engine.delete(delete);         assertThat(delete.version(), equalTo(3L));","delete = new Engine.Delete(""test"", ""1"", newUid(""1""), 2L, VersionType.INTERNAL, PRIMARY, 0);         deleteResult = engine.delete(delete);         assertThat(deleteResult.getVersion(), equalTo(3L));"
58,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index create = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);         engine.index(create);         assertThat(create.version(), equalTo(1L));","Engine.Index create = new Engine.Index(newUid(""1""), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);         Engine.IndexResult indexResult = engine.index(create);         assertThat(indexResult.getVersion(), equalTo(1L));"
59,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"create = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);         try {             engine.index(create);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","create = new Engine.Index(newUid(""1""), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);         indexResult = engine.index(create);         assertTrue(indexResult.hasFailure());         assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
60,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, index.seqNo(), index.version(), VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA,  0, -1, false);         replicaEngine.index(index);         assertThat(index.version(), equalTo(2L));","index = new Engine.Index(newUid(""1""), doc, indexResult.getVersion(), VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA,  0, -1, false);         indexResult = replicaEngine.index(index);         assertThat(indexResult.getVersion(), equalTo(2L));"
61,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, index.seqNo(), 1L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);         try {             replicaEngine.index(index);             fail();         } catch (VersionConflictEngineException e) {             // all is well         }","index = new Engine.Index(newUid(""1""), doc, 1L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);         indexResult = replicaEngine.index(index);         assertTrue(indexResult.hasFailure());         assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
62,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"try {             index = new Engine.Index(newUid(""1""), doc, index.seqNo(), 2L","index = new Engine.Index(newUid(""1""), doc, 2L"
63,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"delete = new Engine.Delete(""test"", ""1"", newUid(""1""), delete.seqNo(), 3L                 , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, false);         replicaEngine.delete(delete);         assertThat(delete.version(), equalTo(3L));","delete = new Engine.Delete(""test"", ""1"", newUid(""1""), 3L                 , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);         deleteResult = replicaEngine.delete(delete);         assertThat(deleteResult.getVersion(), equalTo(3L));"
64,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"try {             delete = new Engine.Delete(""test"", ""1"", newUid(""1""), delete.seqNo(), 3L                     , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, false);             replicaEngine.delete(delete);             fail(""excepted VersionConflictEngineException to be thrown"");         } catch (VersionConflictEngineException e) {             // all is well         }","delete = new Engine.Delete(""test"", ""1"", newUid(""1""), 3L                 , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);         deleteResult = replicaEngine.delete(delete);         assertTrue(deleteResult.hasFailure());         assertThat(deleteResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
65,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"try {             index = new Engine.Index(newUid(""1""), doc, index.seqNo(), 2L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);             replicaEngine.index(index);             fail(""excepted VersionConflictEngineException to be thrown"");         } catch (VersionConflictEngineException e) {             // all is well         }","index = new Engine.Index(newUid(""1""), doc, 2L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);         indexResult = replicaEngine.index(index);         assertTrue(indexResult.hasFailure());         assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
66,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"engine.delete(new Engine.Delete(""test"", ""1"", newUid(""1""), SequenceNumbersService.UNASSIGNED_SEQ_NO, 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), false));","engine.delete(new Engine.Delete(""test"", ""1"", newUid(""1""), 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime()));"
67,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"engine.delete(new Engine.Delete(""test"", ""2"", newUid(""2""), SequenceNumbersService.UNASSIGNED_SEQ_NO, 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), false));","engine.delete(new Engine.Delete(""test"", ""2"", newUid(""2""), 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime()));"
68,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"try {                 engine.index(new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false));                 fail(""did not hit expected exception"");             } catch (VersionConflictEngineException vcee) {                 // expected             }","Engine.Index index = new Engine.Index(newUid(""1""), doc, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false);             Engine.IndexResult indexResult = engine.index(index);             assertTrue(indexResult.hasFailure());             assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
69,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"try {                 engine.index(new Engine.Index(newUid(""2""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false));                 fail(""did not hit expected exception"");             } catch (VersionConflictEngineException vcee) {                 // expected             }","Engine.Index index1 = new Engine.Index(newUid(""2""), doc, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false);             indexResult = engine.index(index1);             assertTrue(indexResult.hasFailure());             assertThat(indexResult.getFailure(), instanceOf(VersionConflictEngineException.class));"
70,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);             engine.index(firstIndexRequest);             assertThat(firstIndexRequest.version(), equalTo(1L));","Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);             Engine.IndexResult indexResult = engine.index(firstIndexRequest);             assertThat(indexResult.getVersion(), equalTo(1L));"
71,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);                     engine.index(firstIndexRequest);                     assertThat(firstIndexRequest.version(), equalTo(1L));","Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);                     Engine.IndexResult indexResult = engine.index(firstIndexRequest);                     assertThat(indexResult.getVersion(), equalTo(1L));"
72,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index firstIndexRequest = new Engine.Index(newUid(uuidValue), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false);         engine.index(firstIndexRequest);         assertThat(firstIndexRequest.version(), equalTo(1L));","Engine.Index firstIndexRequest = new Engine.Index(newUid(uuidValue), doc, 1, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false);         Engine.IndexResult indexResult = engine.index(firstIndexRequest);         assertThat(indexResult.getVersion(), equalTo(1L));"
73,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index idxRequest = new Engine.Index(newUid(uuidValue), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false);         engine.index(idxRequest);","Engine.Index idxRequest = new Engine.Index(newUid(uuidValue), doc, 2, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false);         Engine.IndexResult result = engine.index(idxRequest);"
74,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"NamedAnalyzer defaultAnalyzer = new NamedAnalyzer(""default"", new StandardAnalyzer());             IndexAnalyzers indexAnalyzers =                 new IndexAnalyzers(indexSettings, defaultAnalyzer, defaultAnalyzer, defaultAnalyzer, Collections.emptyMap());","IndexAnalyzers indexAnalyzers = null;             NamedAnalyzer defaultAnalyzer = new NamedAnalyzer(""default"", AnalyzerScope.INDEX, new StandardAnalyzer());             indexAnalyzers = new IndexAnalyzers(indexSettings, defaultAnalyzer, defaultAnalyzer, defaultAnalyzer, Collections.emptyMap());"
75,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);             engine.index(firstIndexRequest);             assertThat(firstIndexRequest.version(), equalTo(1L));","Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);             Engine.IndexResult index = engine.index(firstIndexRequest);             assertThat(index.getVersion(), equalTo(1L));"
76,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);             engine.index(firstIndexRequest);             assertThat(firstIndexRequest.version(), equalTo(1L));","Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);             Engine.IndexResult indexResult = engine.index(firstIndexRequest);             assertThat(indexResult.getVersion(), equalTo(1L));"
77,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(0)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);         engine.index(firstIndexRequest);         assertThat(firstIndexRequest.version(), equalTo(2L));","Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(0)), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);         Engine.IndexResult index = engine.index(firstIndexRequest);         assertThat(index.getVersion(), equalTo(2L));"
78,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         engine.index(index);         assertThat(index.version(), equalTo(1L));","Engine.Index index = new Engine.Index(newUid(""1""), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         Engine.IndexResult indexResult = engine.index(index);         assertThat(indexResult.getVersion(), equalTo(1L));"
79,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         replicaEngine.index(index);         assertThat(index.version(), equalTo(1L));","index = new Engine.Index(newUid(""1""), doc, indexResult.getVersion(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         indexResult = replicaEngine.index(index);         assertThat(indexResult.getVersion(), equalTo(1L));"
80,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         engine.index(index);         assertThat(index.version(), equalTo(1L));","index = new Engine.Index(newUid(""1""), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         indexResult = engine.index(index);         assertThat(indexResult.getVersion(), equalTo(1L));"
81,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         replicaEngine.index(index);","index = new Engine.Index(newUid(""1""), doc, indexResult.getVersion(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         indexResult = replicaEngine.index(index);         assertThat(indexResult.hasFailure(), equalTo(false));"
82,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index firstIndexRequest = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         engine.index(firstIndexRequest);         assertThat(firstIndexRequest.version(), equalTo(1L));","Engine.Index firstIndexRequest = new Engine.Index(newUid(""1""), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         Engine.IndexResult result = engine.index(firstIndexRequest);         assertThat(result.getVersion(), equalTo(1L));"
83,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index firstIndexRequestReplica = new Engine.Index(newUid(""1""), doc, firstIndexRequest.seqNo(), firstIndexRequest.version(), firstIndexRequest.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         replicaEngine.index(firstIndexRequestReplica);         assertThat(firstIndexRequestReplica.version(), equalTo(1L));","Engine.Index firstIndexRequestReplica = new Engine.Index(newUid(""1""), doc, result.getVersion(), firstIndexRequest.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         Engine.IndexResult indexReplicaResult = replicaEngine.index(firstIndexRequestReplica);         assertThat(indexReplicaResult.getVersion(), equalTo(1L));"
84,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index secondIndexRequest = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         engine.index(secondIndexRequest);         assertTrue(secondIndexRequest.isCreated());","Engine.Index secondIndexRequest = new Engine.Index(newUid(""1""), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);         Engine.IndexResult indexResult = engine.index(secondIndexRequest);         assertTrue(indexResult.isCreated());"
85,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"Engine.Index secondIndexRequestReplica = new Engine.Index(newUid(""1""), doc, secondIndexRequest.seqNo(), firstIndexRequest.version(), firstIndexRequest.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);","Engine.Index secondIndexRequestReplica = new Engine.Index(newUid(""1""), doc, result.getVersion(), firstIndexRequest.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);"
86,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java,"Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);             primaryEngine.index(firstIndexRequest);             assertThat(firstIndexRequest.version(), equalTo(1L));","Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);             Engine.IndexResult indexResult = primaryEngine.index(firstIndexRequest);             assertThat(indexResult.getVersion(), equalTo(1L));"
87,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerSingleNodeTests.java,"NodeServicesProvider nodeServicesProvider = getInstanceFromNode(NodeServicesProvider.class);             IndexService index = indicesService.createIndex(nodeServicesProvider, metaData, Arrays.asList(countingListener), s -> {});","IndexService index = indicesService.createIndex(metaData, Arrays.asList(countingListener));"
88,d3417fb02291f26964d77767020ef345d18c148f,9ceb0f2cb4d49a090706d4f1e8a223b19ee0e064,179dd885e236d8f7ddfd4d4919e0be6a890743b8,Fri Nov 11 05:40:33 CET 2016,core/src/test/java/org/elasticsearch/indices/cluster/ClusterStateChanges.java,"@SuppressWarnings(""unchecked"") final List<IndexEventListener> listeners = anyList();             @SuppressWarnings(""unchecked"") final Consumer<ShardId> globalCheckpointSyncer = any(Consumer.class);             when(indicesService.createIndex(any(NodeServicesProvider.class), any(IndexMetaData.class), listeners, globalCheckpointSyncer))","when(indicesService.createIndex(any(IndexMetaData.class), anyList()))"
89,eafd3dfc551719670abae2b49363c500adc8e55b,2f883fcb85b1e76d20c03d09f5200354c403d465,a23ded6a94697adad66b79fcb61e64ddc965926c,Mon Oct 31 18:06:21 CET 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,"// document does not exists, we can optimize for create                     index(index.docs(), indexWriter);","// document does not exists, we can optimize for create, but double check if assertions are running                 assert assertDocDoesNotExist(index, canOptimizeAddDocument == false);                 index(index, indexWriter);"
90,c747085b7055a59676b064565e02821d00edc137,97a67565219ea2834bf30dfb0fa23e64d7a1c586,a6fa96d51397edf0ce7f1f5c8b853452c641dc22,Fri Oct 07 23:52:53 CEST 2016,core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java,"location = executeBulkItemRequest(metaData, indexShard, request, preVersions, preVersionTypes, location, requestIndex);","BulkItemRequest item = request.items()[requestIndex];            location = handleItem(metaData, request, primary, preVersions, preVersionTypes, location, requestIndex, item);"
91,40f8f281e0e03b9af56eb224234d375f8d31a826,ce6f6d3835d682dda631f7373e5de2588d8c0512,6174e21f47244b6d5153d7d0cc1fe28fe863399d,Thu Oct 06 10:09:23 CEST 2016,core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregationBuilder.java,"List<ScriptFieldsContext.ScriptField> fields = new ArrayList<>();         if (scriptFields != null) {             for (ScriptField field : scriptFields) {                 SearchScript searchScript = context.searchContext().getQueryShardContext().getSearchScript(field.script()                     ScriptContext.Standard.SEARCH, Collections.emptyMap());                 fields.add(new org.elasticsearch.search.fetch.subphase.ScriptFieldsContext.ScriptField(                     field.fieldName(), searchScript, field.ignoreFailure()));             }","List<ScriptFieldsContext.ScriptField> scriptFields = null;         if (this.scriptFields != null) {             scriptFields = new ArrayList<>();             for (ScriptField field : this.scriptFields) {                 SearchScript searchScript = context.searchContext().scriptService().search(                         context.searchContext().lookup(), field.script(), ScriptContext.Standard.SEARCH, Collections.emptyMap());                 scriptFields.add(new ScriptFieldsContext.ScriptField(                         field.fieldName(), searchScript, field.ignoreFailure()));             }         } else {             scriptFields = Collections.emptyList();"
92,40f8f281e0e03b9af56eb224234d375f8d31a826,ce6f6d3835d682dda631f7373e5de2588d8c0512,6174e21f47244b6d5153d7d0cc1fe28fe863399d,Thu Oct 06 10:09:23 CEST 2016,core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregatorFactory.java,if (scriptFields != null) {             for (ScriptFieldsContext.ScriptField field : scriptFields) {                 subSearchContext.scriptFields().add(field);             },for (ScriptFieldsContext.ScriptField field : scriptFields) {             subSearchContext.scriptFields().add(field);
93,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java,"UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getSeqNo(), indexResponse.getVersion(), indexResponse.isCreated());                         if (updateRequest.fields() != null && updateRequest.fields().length > 0) {","UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getVersion(), indexResponse.getResult());                         if ((updateRequest.fetchSource() != null && updateRequest.fetchSource().fetchSource()) ||                             (updateRequest.fields() != null && updateRequest.fields().length > 0)) {"
94,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java,"updateResponse = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), false);","updateResponse = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.getResult());"
95,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/index/IndexResponse.java,"builder.append("",created="").append(created);         builder.append("",seqNo="").append(getSeqNo());         builder.append("",shards="").append(getShardInfo());","builder.append("",result="").append(getResult().getLowercase());         builder.append("",shards="").append(Strings.toString(getShardInfo(), true));"
96,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java,"final Engine.Index operation = indexShard.prepareIndexOnReplica(sourceToParse, request.seqNo(), request.version(), request.versionType());","final Engine.Index operation = indexShard.prepareIndexOnReplica(sourceToParse, request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());"
97,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java,pendingShards.incrementAndGet(); // increase by 1 until we finish all primary coordination,pendingActions.incrementAndGet();
98,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java,"pendingShards.incrementAndGet();         replicasProxy.performOn(shard, replicaRequest, new ActionListener<ReplicaResponse>() {","pendingActions.incrementAndGet();         replicasProxy.performOn(shard, replicaRequest, new ActionListener<TransportResponse.Empty>() {"
99,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java,"UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(),                             response.getId(), response.getSeqNo(), response.getVersion(), response.isCreated());                         if (request.fields() != null && request.fields().length > 0) {","UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.getResult());                         if ((request.fetchSource() != null && request.fetchSource().fetchSource()) ||                             (request.fields() != null && request.fields().length > 0)) {"
100,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java,"UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(),                             response.getSeqNo(), response.getVersion(), response.isCreated());","UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.getResult());"
101,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java,"UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(),                             response.getId(), response.getSeqNo(), response.getVersion(), false);","UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.getResult());"
102,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/action/update/UpdateResponse.java,"public UpdateResponse(ShardId shardId, String type, String id, long version, boolean created) {         this(new ShardInfo(0, 0), shardId, type, id, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, created);     }","public UpdateResponse(ShardId shardId, String type, String id, long version, Result result) {         this(new ShardInfo(0, 0), shardId, type, id, version, result);     }"
103,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java,"public ClusterState execute(final ClusterState currentState) {                 List<Index> indicesToClose = new ArrayList<>();                 Map<String, IndexService> indices = new HashMap<>();                 try {                     for (AliasAction aliasAction : request.actions()) {                         aliasValidator.validateAliasAction(aliasAction, currentState.metaData());                         if (!currentState.metaData().hasIndex(aliasAction.index())) {                             throw new IndexNotFoundException(aliasAction.index());                         }                     }                     boolean changed = false;                     MetaData.Builder builder = MetaData.builder(currentState.metaData());                     for (AliasAction aliasAction : request.actions()) {                         IndexMetaData indexMetaData = builder.get(aliasAction.index());                         if (indexMetaData == null) {                             throw new IndexNotFoundException(aliasAction.index());                         }                         // TODO: not copy (putAll)                         IndexMetaData.Builder indexMetaDataBuilder = IndexMetaData.builder(indexMetaData);                         if (aliasAction.actionType() == AliasAction.Type.ADD) {                             String filter = aliasAction.filter();                             if (Strings.hasLength(filter)) {                                 // parse the filter, in order to validate it                                 IndexService indexService = indices.get(indexMetaData.getIndex());                                 if (indexService == null) {                                     indexService = indicesService.indexService(indexMetaData.getIndex());                                     if (indexService == null) {                                         // temporarily create the index and add mappings so we can parse the filter                                         try {                                             indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData,                                                     Collections.emptyList(), shardId -> {});                                             for (ObjectCursor<MappingMetaData> cursor : indexMetaData.getMappings().values()) {                                                 MappingMetaData mappingMetaData = cursor.value;                                                 indexService.mapperService().merge(mappingMetaData.type(), mappingMetaData.source(), MapperService.MergeReason.MAPPING_RECOVERY, false);                                             }                                         } catch (Exception e) {                                             logger.warn(""[{}] failed to temporary create in order to apply alias action"", e, indexMetaData.getIndex());                                             continue;                                         }                                         indicesToClose.add(indexMetaData.getIndex());                                     }                                     indices.put(indexMetaData.getIndex().getName(), indexService);                                 }                                 aliasValidator.validateAliasFilter(aliasAction.alias(), filter, indexService.newQueryShardContext());                             }                             AliasMetaData newAliasMd = AliasMetaData.newAliasMetaDataBuilder(                                     aliasAction.alias())                                     .filter(filter)                                     .indexRouting(aliasAction.indexRouting())                                     .searchRouting(aliasAction.searchRouting())                                     .build();                             // Check if this alias already exists                             AliasMetaData aliasMd = indexMetaData.getAliases().get(aliasAction.alias());                             if (aliasMd != null && aliasMd.equals(newAliasMd)) {                                 // It's the same alias - ignore it                                 continue;                             }                             indexMetaDataBuilder.putAlias(newAliasMd);                         } else if (aliasAction.actionType() == AliasAction.Type.REMOVE) {                             if (!indexMetaData.getAliases().containsKey(aliasAction.alias())) {                                 // This alias doesn't exist - ignore                                 continue;                             }                             indexMetaDataBuilder.removeAlias(aliasAction.alias());                         }                         changed = true;                         builder.put(indexMetaDataBuilder);                     }                     if (changed) {                         ClusterState updatedState = ClusterState.builder(currentState).metaData(builder).build();                         // even though changes happened, they resulted in 0 actual changes to metadata                         // i.e. remove and add the same alias to the same index                         if (!updatedState.metaData().equalsAliases(currentState.metaData())) {                             return updatedState;                         }                     }                     return currentState;                 } finally {                     for (Index index : indicesToClose) {                         indicesService.removeIndex(index, ""created for alias processing"");                     }                 }","public ClusterState execute(ClusterState currentState) {                 return innerExecute(currentState, request.actions());"
104,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/IndexService.java,"IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, analysisService, refreshTask, fsyncTask, globalCheckpointTask);","IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, indexAnalyzers, refreshTask, fsyncTask);"
105,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/engine/Engine.java,"public Index(Term uid, ParsedDocument doc, long version) {             this(uid, doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, VersionType.INTERNAL, Origin.PRIMARY, System.nanoTime());","Index(Term uid, ParsedDocument doc, long version) {             this(uid, doc, version, VersionType.INTERNAL, Origin.PRIMARY, System.nanoTime(), -1, false);"
106,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,"if (checkVersionConflict(index, currentVersion, expectedVersion, deleted)) return false;             maybeUpdateSequenceNumber(index);","if (checkVersionConflict(index, currentVersion, expectedVersion, deleted)) {                 index.setCreated(false);                 return;             }"
107,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/mapper/ParsedDocument.java,private final String id;,"private final String id, type;"
108,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/mapper/ParsedDocument.java,"public ParsedDocument(Field version, String id, String type, String routing, long timestamp, long ttl, List<Document> documents,                           BytesReference source, Mapping dynamicMappingsUpdate) {         this.version = version;         this.id = id;         this.type = type;         this.uid = Uid.createUidAsBytes(type, id);         this.routing = routing;         this.timestamp = timestamp;         this.ttl = ttl;         this.documents = documents;         this.source = source;         this.dynamicMappingsUpdate = dynamicMappingsUpdate;     }","public ParsedDocument(Field version, Field seqNo, String id, String type, String routing, long timestamp, long ttl, List<Document> documents, BytesReference source, Mapping dynamicMappingsUpdate) {         this.version = version;         this.seqNo = seqNo;         this.id = id;         this.type = type;         this.uid = Uid.createUid(type, id);         this.routing = routing;         this.timestamp = timestamp;         this.ttl = ttl;         this.documents = documents;         this.source = source;         this.dynamicMappingsUpdate = dynamicMappingsUpdate;     }"
109,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java,".routing(index.routing()).parent(index.parent()).timestamp(index.timestamp()).ttl(index.ttl()), index.seqNo(),                         index.version(), index.versionType().versionTypeForReplicationAndRecovery(), origin);",".routing(index.routing()).parent(index.parent()).timestamp(index.timestamp()).ttl(index.ttl())                         index.version(), index.versionType().versionTypeForReplicationAndRecovery(), origin, index.getAutoGeneratedIdTimestamp(), true);"
110,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/translog/Translog.java,public static final int SERIALIZATION_FORMAT = 7;,public static final int SERIALIZATION_FORMAT = FORMAT_AUTO_GENERATED_IDS;
111,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/translog/Translog.java,"assert format >= SERIALIZATION_FORMAT - 1 : ""format was: "" + format;","assert format >= FORMAT_2x : ""format was: "" + format;"
112,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/translog/Translog.java,if (format >= 7) {                 seqNo = in.readVLong();,if (format >= FORMAT_AUTO_GENERATED_IDS) {                 this.autoGeneratedIdTimestamp = in.readLong();             } else {                 this.autoGeneratedIdTimestamp = IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP;
113,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/index/translog/Translog.java,out.writeVLong(seqNo);,out.writeLong(autoGeneratedIdTimestamp);
114,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java,"public FinalizeResponse finalizeRecovery() {         return transportService.submitRequest(targetNode, RecoveryTargetService.Actions.FINALIZE,","public void finalizeRecovery() {         transportService.submitRequest(targetNode, PeerRecoveryTargetService.Actions.FINALIZE,"
115,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"final Engine.Index operation = new Engine.Index(newUid(""test#1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime());","final Engine.Index operation = new Engine.Index(newUid(""test#1""), doc, i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false);"
116,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"create = new Engine.Index(newUid(""1""), doc, create.seqNo(), create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);","create = new Engine.Index(newUid(""1""), doc, create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);"
117,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);","index = new Engine.Index(newUid(""1""), doc, index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);"
118,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc,SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, PRIMARY, 0);","index = new Engine.Index(newUid(""1""), doc, 1L, VersionType.INTERNAL, PRIMARY, 0, -1, false);"
119,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"// we should be able to create as well         Engine.Index create = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0);","// we shouldn't be able to create as well         Engine.Index create = new Engine.Index(newUid(""1""), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);         try {"
120,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"ParsedDocument doc = testParsedDocument(Integer.toString(i), Integer.toString(i), ""test"", null, SequenceNumbersService.UNASSIGNED_SEQ_NO, -1, testDocument(), new BytesArray(""{}""), null);             Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime());","ParsedDocument doc = testParsedDocument(Integer.toString(i), Integer.toString(i), ""test"", null, -1, -1, testDocument(), new BytesArray(""{}""), null);             Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);"
121,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java,"Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime());","Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);"
122,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java,"createIndex(""test"");         ensureGreen();         IndicesService indicesService = getInstanceFromNode(IndicesService.class);         IndexService test = indicesService.indexService(resolveIndex(""test""));         IndexShard shard = test.getShardOrNull(0);         ShardStats stats = new ShardStats(             shard.routingEntry()             shard.shardPath()             new CommonStats(indicesService.getIndicesQueryCache(), shard, new CommonStatsFlags()),             shard.commitStats()             shard.seqNoStats());","IndexShard shard = newStartedShard();         ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(),             new CommonStats(new IndicesQueryCache(Settings.EMPTY), shard, new CommonStatsFlags()), shard.commitStats());"
123,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java,"assertEquals(437, total.getTranslogSizeInBytes());","assertEquals(455, total.getTranslogSizeInBytes());"
124,25fd9e26c4fb042d6f6dea14efcd239577bdbbc4,c809671eb3a4ee113e337bc5f63ce5283017a17a,85402d5220d86ecebf6f2332a9743e717016ce24,Thu Sep 29 00:22:31 CEST 2016,core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java,"assertEquals(ex.getMessage(), ""Checkpoint file translog-2.ckp already exists but has corrupted content expected: Checkpoint{offset=2738, numOps=55, translogFileGeneration= 2} but got: Checkpoint{offset=0, numOps=0, translogFileGeneration= 0}"");","assertEquals(ex.getMessage(), ""Checkpoint file translog-2.ckp already exists but has corrupted content expected: Checkpoint{offset=3123, numOps=55, translogFileGeneration= 2} but got: Checkpoint{offset=0, numOps=0, translogFileGeneration= 0}"");"
125,e166459bbed7d7a1a46fe689371d4a36fbfb08d1,ac8c2e98ab687b7ad1a4d0dea576801cc1924a62,1a805bb675e71353db2eab8a976d058739e4594c,Wed Aug 31 16:59:27 CEST 2016,core/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java,logger.warn(formattedMessage);,logger.warn(formattedMsg);
126,e166459bbed7d7a1a46fe689371d4a36fbfb08d1,ac8c2e98ab687b7ad1a4d0dea576801cc1924a62,1a805bb675e71353db2eab8a976d058739e4594c,Wed Aug 31 16:59:27 CEST 2016,core/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java,"logger.warn(message, params);","logger.warn(msg, params);"
127,18c9e7adafe26591f0472c5d021b8139b18e438c,5cf7583bded93c855f9fca0ba3b4e7730e03da1a,59075348772fc5e427184e53282c586ee2fdd35a,Wed Jul 06 05:46:36 CEST 2016,core/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java,"final MasterPingRequest request = new MasterPingRequest(clusterService.localNode().getId(), masterToPing.getId(), clusterName);             final TransportRequestOptions options = TransportRequestOptions.builder().withType(TransportRequestOptions.Type.PING).withTimeout(pingRetryTimeout).build();             transportService.sendRequest(masterToPing, MASTER_PING_ACTION_NAME, request, options, new TransportResponseHandler<MasterPingResponseResponse>() {","final MasterPingRequest request = new MasterPingRequest(clusterService.localNode(), masterToPing, clusterName);             final TransportRequestOptions options = TransportRequestOptions.builder().withType(TransportRequestOptions.Type.PING)                 .withTimeout(pingRetryTimeout).build();             transportService.sendRequest(masterToPing, MASTER_PING_ACTION_NAME, request, options,                 new BaseTransportResponseHandler<MasterPingResponseResponse>() {"
128,18c9e7adafe26591f0472c5d021b8139b18e438c,5cf7583bded93c855f9fca0ba3b4e7730e03da1a,59075348772fc5e427184e53282c586ee2fdd35a,Wed Jul 06 05:46:36 CEST 2016,core/src/main/java/org/elasticsearch/discovery/zen/fd/NodesFaultDetection.java,"final PingRequest pingRequest = new PingRequest(node.getId(), clusterName, localNode, clusterStateVersion);             final TransportRequestOptions options = TransportRequestOptions.builder().withType(TransportRequestOptions.Type.PING).withTimeout(pingRetryTimeout).build();             transportService.sendRequest(node, PING_ACTION_NAME, pingRequest, options, new TransportResponseHandler<PingResponse>() {","final PingRequest pingRequest = new PingRequest(node, clusterName, localNode, clusterStateVersion);             final TransportRequestOptions options = TransportRequestOptions.builder().withType(TransportRequestOptions.Type.PING)                 .withTimeout(pingRetryTimeout).build();             transportService.sendRequest(node, PING_ACTION_NAME, pingRequest, options, new BaseTransportResponseHandler<PingResponse>() {"
129,d0765d07619e644679fe426580229608eaabeeb3,9884b7dc71b06c472922438d3513a5b1102992eb,74af0e36f3bc6b7f3315ba23463fca78997d60aa,Wed Jul 06 04:01:07 CEST 2016,core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java,"} catch (Throwable e) {             // nocommit: since we now have RetryOnPrimaryException, retrying doesn't always mean the shard is closed.             // some operations were already perform and have a seqno assigned. we shouldn't just reindex them",} catch (Exception e) {
130,d0765d07619e644679fe426580229608eaabeeb3,9884b7dc71b06c472922438d3513a5b1102992eb,74af0e36f3bc6b7f3315ba23463fca78997d60aa,Wed Jul 06 04:01:07 CEST 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"ReplicaResult result;             try (ShardReference replica = getReplicaShardReference(request.shardId(), request.primaryTerm())) {                 result = shardOperationOnReplica(request);                 response = new ReplicaResponse(replica.routingEntry().allocationId().getId(), replica.getLocalCheckpoint());             }             result.respond(new ResponseListener(response));","acquireReplicaOperationLock(request.shardId(), request.primaryTerm(), this);"
131,d0765d07619e644679fe426580229608eaabeeb3,9884b7dc71b06c472922438d3513a5b1102992eb,74af0e36f3bc6b7f3315ba23463fca78997d60aa,Wed Jul 06 04:01:07 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,public void testCommitStats() throws IOException {         InternalEngine engine = null;         try {             this.engine.close();,"public void testCommitStats() {         Document document = testDocumentWithTextField();         document.add(new Field(SourceFieldMapper.NAME, BytesReference.toBytes(B_1), SourceFieldMapper.Defaults.FIELD_TYPE));         ParsedDocument doc = testParsedDocument(""1"", ""1"", ""test"", null, -1, -1, document, B_1, null);         engine.index(new Engine.Index(newUid(""1""), doc));"
132,d0765d07619e644679fe426580229608eaabeeb3,9884b7dc71b06c472922438d3513a5b1102992eb,74af0e36f3bc6b7f3315ba23463fca78997d60aa,Wed Jul 06 04:01:07 CEST 2016,core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java,"indexService.getThreadPool(), indexService.getBigArrays(), null, shard.getGlobalCheckpointSyncer(),             Collections.emptyList(), Arrays.asList(listeners)         );","indexService.getThreadPool(), indexService.getBigArrays(), null, Collections.emptyList(), Arrays.asList(listeners));"
133,2f12d1cb4558a6374428f325be9e7d02a0047604,f6491047a0a7182d5c55660acc57add812ce64c1,62397c0c3d662932f0069e0d56f258f0754cc8b8,Fri Jul 01 21:58:11 CEST 2016,core/src/test/java/org/elasticsearch/http/HttpServerTests.java,"ClusterService clusterService = new ClusterService(Settings.EMPTY             new ClusterSettings(settings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS), null);         IngestService ingestService = new IngestService(settings, null, null, null, Collections.emptyList());         NodeService nodeService = new NodeService(Settings.EMPTY, null, null, null, null, null, null, null,             ingestService, clusterService, null);         httpServer = new HttpServer(settings, httpServerTransport, restController, nodeService, null, circuitBreakerService);","httpServer = new HttpServer(settings, httpServerTransport, restController, null, circuitBreakerService);"
134,65c9b0b588cc233ea95c71dcd29e511dcf09698d,08b3b6264e8618deb125ab5a4825e50a7c04f9ab,d24cc65cad2f3152237df8b6c457a2d0a603f13a,Fri Jul 01 18:26:17 CEST 2016,core/src/test/java/org/elasticsearch/http/HttpServerTests.java,"IngestService ingestService = new IngestService(settings, null, null, null, Collections.emptyList());         NodeService nodeService = new NodeService(Settings.EMPTY, null, null, null, null, null, null, null,             ingestService, clusterService, null);         httpServer = new HttpServer(settings, httpServerTransport, restController, nodeService, circuitBreakerService);","NodeService nodeService = new NodeService(Settings.EMPTY, null, null, null, null, null, null, null, null,             clusterService, null);         httpServer = new HttpServer(settings, httpServerTransport, restController, nodeService, null, circuitBreakerService);"
135,65c9b0b588cc233ea95c71dcd29e511dcf09698d,08b3b6264e8618deb125ab5a4825e50a7c04f9ab,d24cc65cad2f3152237df8b6c457a2d0a603f13a,Fri Jul 01 18:26:17 CEST 2016,core/src/test/java/org/elasticsearch/ingest/ConfigurationUtilsTests.java,"Map<String, Processor.Factory> registry =             Collections.singletonMap(""test_processor"", (factories, config) -> processor);","ProcessorsRegistry.Builder builder = new ProcessorsRegistry.Builder();         builder.registerProcessor(""test_processor"", (registry) -> (tag, config) -> processor);         ProcessorsRegistry registry = builder.build(mock(ScriptService.class), mock(ClusterService.class));"
136,65c9b0b588cc233ea95c71dcd29e511dcf09698d,08b3b6264e8618deb125ab5a4825e50a7c04f9ab,d24cc65cad2f3152237df8b6c457a2d0a603f13a,Fri Jul 01 18:26:17 CEST 2016,core/src/test/java/org/elasticsearch/ingest/PipelineStoreTests.java,"Map<String, Processor.Factory> processorFactories = new HashMap<>();         processorFactories.put(""set"", (factories, config) -> {","store = new PipelineStore(Settings.EMPTY);         ProcessorsRegistry.Builder registryBuilder = new ProcessorsRegistry.Builder();         registryBuilder.registerProcessor(""set"", (registry) -> (tag, config) -> {"
137,6995bde710e1b1434c33d3a6fef25dfb28342ec3,e817b5daa3c762e0adba87d1e524d53a99c5362f,0b2baa7f636d725d54be4cbc898f08a76d01af80,Fri Jun 24 20:15:06 CEST 2016,core/src/test/java/org/elasticsearch/search/aggregations/AggregatorParsingTests.java,"}, settingsModule             , scriptModule, new IndicesModule(namedWriteableRegistry, Collections.emptyList()) {",b.bind(ScriptService.class).toInstance(scriptModule.getScriptService());             }             settingsModule             new IndicesModule(namedWriteableRegistry) {
138,6995bde710e1b1434c33d3a6fef25dfb28342ec3,e817b5daa3c762e0adba87d1e524d53a99c5362f,0b2baa7f636d725d54be4cbc898f08a76d01af80,Fri Jun 24 20:15:06 CEST 2016,core/src/test/java/org/elasticsearch/search/aggregations/BaseAggregationTestCase.java,"scriptModule             new IndicesModule(namedWriteableRegistry, Collections.emptyList()) {",new IndicesModule(namedWriteableRegistry) {
139,6995bde710e1b1434c33d3a6fef25dfb28342ec3,e817b5daa3c762e0adba87d1e524d53a99c5362f,0b2baa7f636d725d54be4cbc898f08a76d01af80,Fri Jun 24 20:15:06 CEST 2016,core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java,"}, settingsModule,                 scriptModule, new IndicesModule(namedWriteableRegistry, Collections.emptyList()) {",b.bind(ScriptService.class).toInstance(scriptModule.getScriptService());                 }                 settingsModule                 new IndicesModule(namedWriteableRegistry) {
140,112669daedf3a4b92f70bf982b34f48ca56c303a,275ea6837d6fc1398c4bfe453650c7a4c9330a0c,0cae9ad30eb8fed74c6396a73343e83bc8547f73,Thu Jun 23 17:52:11 CEST 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,"final boolean created;             index.updateVersion(updatedVersion);             if (index.origin() == Operation.Origin.PRIMARY) {                 index.updateSeqNo(seqNoService.generateSeqNo());             }             if (currentVersion == Versions.NOT_FOUND) {                 // document does not exists, we can optimize for create                 created = true;                 index(index, indexWriter);             } else {                 created = update(index, versionValue, indexWriter);             }","final long updatedVersion = updateVersion(index, currentVersion, expectedVersion);             final boolean created = indexOrUpdate(index, currentVersion, versionValue);"
141,112669daedf3a4b92f70bf982b34f48ca56c303a,275ea6837d6fc1398c4bfe453650c7a4c9330a0c,0cae9ad30eb8fed74c6396a73343e83bc8547f73,Thu Jun 23 17:52:11 CEST 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,"long updatedVersion;             long expectedVersion = delete.version();             if (delete.versionType().isVersionConflictForWrites(currentVersion, expectedVersion, deleted)) {                 if (delete.origin().isRecovery()) {                     return;                 } else {                     throw new VersionConflictEngineException(shardId, delete.type(), delete.id(),                         delete.versionType().explainConflictForWrites(currentVersion, expectedVersion, deleted));                 }             }             updatedVersion = delete.versionType().updateVersion(currentVersion, expectedVersion);             if (delete.origin() == Operation.Origin.PRIMARY) {                 delete.updateSeqNo(seqNoService.generateSeqNo());             }             final boolean found;             if (currentVersion == Versions.NOT_FOUND) {                 // doc does not exist and no prior deletes                 found = false;             } else if (versionValue != null && versionValue.delete()) {                 // a ""delete on delete"", in this case, we still increment the version, log it, and return that version                 found = false;             } else {                 // we deleted a currently existing document                 indexWriter.deleteDocuments(delete.uid());                 found = true;             }","final long expectedVersion = delete.version();             if (checkVersionConflict(delete, currentVersion, expectedVersion, deleted)) return;             final long updatedVersion = updateVersion(delete, currentVersion, expectedVersion);             final boolean found = deleteIfFound(delete, currentVersion, deleted, versionValue);"
142,112669daedf3a4b92f70bf982b34f48ca56c303a,275ea6837d6fc1398c4bfe453650c7a4c9330a0c,0cae9ad30eb8fed74c6396a73343e83bc8547f73,Thu Jun 23 17:52:11 CEST 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,"if (delete.origin() != Operation.Origin.LOCAL_TRANSLOG_RECOVERY) {                 final Translog.Location translogLocation = translog.add(new Translog.Delete(delete));                 delete.setTranslogLocation(translogLocation);                 versionMap.putUnderLock(delete.uid().bytes(), new DeleteVersionValue(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis(), delete.getTranslogLocation()));             } else {                 // we do not replay in to the translog, so there is no                 // translog location; that is okay because real-time                 // gets are not possible during recovery and we will                 // flush when the recovery is complete                 versionMap.putUnderLock(delete.uid().bytes(), new DeleteVersionValue(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis(), null));             }         } finally {             if (delete.seqNo() != SequenceNumbersService.UNASSIGNED_SEQ_NO) {                 seqNoService.markSeqNoAsCompleted(delete.seqNo());             }","maybeAddToTranslog(delete, updatedVersion, Translog.Delete::new, DeleteVersionValue::new);"
143,9356a6090f0d58b1c380023f5f16237dad42c574,545ffa780174f4d0596e3e2f7829843e179ee04b,bf7a6f550933b9944a4b2629ddf716e14711b007,Fri Jun 17 17:35:57 CEST 2016,core/src/main/java/org/elasticsearch/node/Node.java,modules.add(new ClusterModule(this.settings));             modules.add(new IndicesModule(namedWriteableRegistry));,"modules.add(new ClusterModule(this.settings, clusterService));             modules.add(new IndicesModule());"
144,6adffa6b7b3f957403aa21cae5a7c843bf342786,eb9b4437b2020d9789a5d725d9eff14124268105,13d16fbf41e0cf90c9051e015681cc2198bb0334,Thu Jun 16 23:27:32 CEST 2016,core/src/test/java/org/elasticsearch/search/aggregations/AggregatorParsingTests.java,"SettingsModule settingsModule = new SettingsModule(settings);         settingsModule.registerSetting(InternalSettingsPlugin.VERSION_CREATED);         ScriptModule scriptModule = new ScriptModule() {             @Override             protected void configure() {                 Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir())                         // no file watching, so we don't need a                         // ResourceWatcherService                         .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING.getKey(), false).build();                 MockScriptEngine mockScriptEngine = new MockScriptEngine();                 Multibinder<ScriptEngineService> multibinder = Multibinder.newSetBinder(binder(), ScriptEngineService.class);                 multibinder.addBinding().toInstance(mockScriptEngine);                 Set<ScriptEngineService> engines = new HashSet<>();                 engines.add(mockScriptEngine);                 List<ScriptContext.Plugin> customContexts = new ArrayList<>();                 ScriptEngineRegistry scriptEngineRegistry =                         new ScriptEngineRegistry(Collections                                 .singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(MockScriptEngine.class                                                                                                  MockScriptEngine.NAME                                                                                                  true)));                 bind(ScriptEngineRegistry.class).toInstance(scriptEngineRegistry);                 ScriptContextRegistry scriptContextRegistry = new ScriptContextRegistry(customContexts);                 bind(ScriptContextRegistry.class).toInstance(scriptContextRegistry);                 ScriptSettings scriptSettings = new ScriptSettings(scriptEngineRegistry, scriptContextRegistry);                 bind(ScriptSettings.class).toInstance(scriptSettings);                 try {                     ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null,                             scriptEngineRegistry, scriptContextRegistry, scriptSettings);                     bind(ScriptService.class).toInstance(scriptService);                 } catch (IOException e) {                     throw new IllegalStateException(""error while binding ScriptService"", e);                 }             }         };         scriptModule.prepareSettings(settingsModule);         injector = new ModulesBuilder().add(new EnvironmentModule(new Environment(settings)), settingsModule,                 new ThreadPoolModule(threadPool), scriptModule, new IndicesModule(namedWriteableRegistry) {","ScriptModule scriptModule = newTestScriptModule();         List<Setting<?>> scriptSettings = scriptModule.getSettings();         scriptSettings.add(InternalSettingsPlugin.VERSION_CREATED);         SettingsModule settingsModule = new SettingsModule(settings, scriptSettings, Collections.emptyList());         injector = new ModulesBuilder().add(new EnvironmentModule(new Environment(settings), threadPool), settingsModule             , scriptModule, new IndicesModule() {"
145,6adffa6b7b3f957403aa21cae5a7c843bf342786,eb9b4437b2020d9789a5d725d9eff14124268105,13d16fbf41e0cf90c9051e015681cc2198bb0334,Thu Jun 16 23:27:32 CEST 2016,core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java,"new EnvironmentModule(new Environment(settings)), settingsModule,                 new ThreadPoolModule(threadPool)                 scriptModule, new IndicesModule(namedWriteableRegistry) {","new EnvironmentModule(new Environment(settings), threadPool), settingsModule,                 scriptModule, new IndicesModule() {"
146,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/action/DocWriteResponse.java,seqNo = in.readZLong();,forcedRefresh = in.readBoolean();
147,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/action/DocWriteResponse.java,out.writeZLong(seqNo);,out.writeBoolean(forcedRefresh);
148,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java,"IndexResponse indexResponse = result.response();                         UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getSeqNo(), indexResponse.getVersion(), indexResponse.isCreated());","IndexResponse indexResponse = result.getResponse();                         UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getVersion(), indexResponse.isCreated());"
149,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java,"return new WriteResult<>(new IndexResponse(shardId, request.type(), request.id(), request.seqNo(), request.version(), created), operation.getTranslogLocation());","IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created);          return new WriteResult<>(response, operation.getTranslogLocation());"
150,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java,final ShardId shardId = primaryRouting.shardId();,final ShardId primaryId = primaryRouting.shardId();
151,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java,"pendingShards.incrementAndGet(); // increase by 1 until we finish all primary coordination         Tuple<Response, ReplicaRequest> primaryResponse = primary.perform(request);         successfulShards.incrementAndGet(); // mark primary as successful         primary.updateLocalCheckpointForShard(primaryRouting.allocationId().getId(), primary.localCheckpoint());         finalResponse = primaryResponse.v1();         ReplicaRequest replicaRequest = primaryResponse.v2();",pendingShards.incrementAndGet();         primaryResult = primary.perform(request);         final ReplicaRequest replicaRequest = primaryResult.replicaRequest();
152,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java,"List<ShardRouting> shards = getShards(shardId, clusterStateSupplier.get());         final String localNodeId = primaryRouting.currentNodeId();","final List<ShardRouting> shards = getShards(primaryId, clusterStateSupplier.get());         final String localNodeId = primary.routingEntry().currentNodeId();"
153,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"try (ShardReference replica = getReplicaShardReference(request.shardId(), request.primaryTerm())) {                 shardOperationOnReplica(request);                 response = new ReplicaResponse(replica.routingEntry().allocationId().getId(), replica.getLocalCheckpoint());                 if (logger.isTraceEnabled()) {                     logger.trace(""action [{}] completed on shard [{}] for request [{}]"", transportReplicaAction, request.shardId(),                         request);","ReplicaResult result;             try (Releasable ignored = acquireReplicaOperationLock(request.shardId(), request.primaryTerm())) {                 result = shardOperationOnReplica(request);"
154,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"}             setPhase(task, ""finished"");             channel.sendResponse(response);",result.respond(new ResponseListener());
155,d896886973660785aac45275ddb110c1a6babc57,90ef933404ae1d8aeaab97d9c0ab6925ee22add1,be168f528bbffcbc026fe427869c8e458d275156,Tue Jun 07 23:57:53 CEST 2016,core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java,IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL         LocalCheckpointService.SETTINGS_BIT_ARRAYS_SIZE,IndexSettings.MAX_REFRESH_LISTENERS_PER_SHARD
156,a60b8948ba1d836a6eac7cff095519e618939ed8,48443259217e431146c8d3b13c01cdd5ecd7a637,0a8afa2e7269ddbec3755b8f10033e93f55149c2,Mon Jun 06 17:16:22 CEST 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,if (index.origin() == Operation.Origin.RECOVERY) {                     return false;                 } else {,if (!index.origin().isRecovery()) {
157,a60b8948ba1d836a6eac7cff095519e618939ed8,48443259217e431146c8d3b13c01cdd5ecd7a637,0a8afa2e7269ddbec3755b8f10033e93f55149c2,Mon Jun 06 17:16:22 CEST 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,} finally {             if (delete.seqNo() != SequenceNumbersService.UNASSIGNED_SEQ_NO) {                 seqNoService.markSeqNoAsCompleted(delete.seqNo());,"versionMap.putUnderLock(delete.uid().bytes(), new DeleteVersionValue(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis(), delete.getTranslogLocation()));             } else {                 // we do not replay in to the translog, so there is no                 // translog location; that is okay because real-time                 // gets are not possible during recovery and we will                 // flush when the recovery is complete                 versionMap.putUnderLock(delete.uid().bytes(), new DeleteVersionValue(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis(), null));"
158,a60b8948ba1d836a6eac7cff095519e618939ed8,48443259217e431146c8d3b13c01cdd5ecd7a637,0a8afa2e7269ddbec3755b8f10033e93f55149c2,Mon Jun 06 17:16:22 CEST 2016,core/src/main/java/org/elasticsearch/index/translog/Translog.java,this.seqNo = 0;             this.version = 0;,version = Versions.MATCH_ANY;             versionType = VersionType.INTERNAL;             routing = null;             parent = null;             timestamp = 0;             ttl = 0;
159,a60b8948ba1d836a6eac7cff095519e618939ed8,48443259217e431146c8d3b13c01cdd5ecd7a637,0a8afa2e7269ddbec3755b8f10033e93f55149c2,Mon Jun 06 17:16:22 CEST 2016,core/src/main/java/org/elasticsearch/index/translog/Translog.java,"this(delete.uid(), delete.seqNo(), delete.version(), delete.versionType());",this.uid = delete.uid();             this.version = delete.version();             this.versionType = delete.versionType();
160,a60b8948ba1d836a6eac7cff095519e618939ed8,48443259217e431146c8d3b13c01cdd5ecd7a637,0a8afa2e7269ddbec3755b8f10033e93f55149c2,Mon Jun 06 17:16:22 CEST 2016,core/src/main/java/org/elasticsearch/index/translog/Translog.java,"this(uid, 0, 0, VersionType.EXTERNAL);","this(uid, Versions.MATCH_ANY, VersionType.INTERNAL);"
161,bbd5f26d45c5e905a237375bae7a0df98ae0bfad,6380560dbb989242e48f68719fe6045c51f7017e,d55f719f8abe56a25f9d78999ef356a260599a78,Fri Jun 03 19:32:03 CEST 2016,core/src/main/java/org/elasticsearch/common/settings/Settings.java,"// NOTE: copyToString will close the input stream             Map<String, String> loadedSettings = settingsLoader.load(Streams.copyToString(new InputStreamReader(is, StandardCharsets.UTF_8)));","try {                 Map<String, String> loadedSettings = settingsLoader                         .load(Streams.copyToString(new InputStreamReader(is, StandardCharsets.UTF_8)));"
162,bbd5f26d45c5e905a237375bae7a0df98ae0bfad,6380560dbb989242e48f68719fe6045c51f7017e,d55f719f8abe56a25f9d78999ef356a260599a78,Fri Jun 03 19:32:03 CEST 2016,core/src/main/java/org/elasticsearch/common/settings/Settings.java,"PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder(""${"", ""}"", false);             PropertyPlaceholder.PlaceholderResolver placeholderResolver = new PropertyPlaceholder.PlaceholderResolver() {                     @Override                     public String resolvePlaceholder(String placeholderName) {                         if (placeholderName.startsWith(""env."")) {                             // explicit env var prefix                             return System.getenv(placeholderName.substring(""env."".length()));                         }                         String value = System.getProperty(placeholderName);                         if (value != null) {                             return value;                         }                         value = System.getenv(placeholderName);                         if (value != null) {                             return value;                         }                         return map.get(placeholderName);                     }                     @Override                     public boolean shouldIgnoreMissing(String placeholderName) {                         // if its an explicit env var, we are ok with not having a value for it and treat it as optional                         if (placeholderName.startsWith(""env."") || placeholderName.startsWith(""prompt."")) {                             return true;                         }                         return false;                     }                     @Override                     public boolean shouldRemoveMissingPlaceholder(String placeholderName) {                         if (placeholderName.startsWith(""prompt."")) {                             return false;                         }                         return true;                     }                 };             Iterator<Map.Entry<String, String>> entryItr = map.entrySet().iterator();             while (entryItr.hasNext()) {                 Map.Entry<String, String> entry = entryItr.next();                 if (entry.getValue() == null) {                     // a null value obviously can't be replaced                     continue;                 }                 String value = propertyPlaceholder.replacePlaceholders(entry.getValue(), placeholderResolver);                 // if the values exists and has length, we should maintain it  in the map                 // otherwise, the replace process resolved into removing it                 if (Strings.hasLength(value)) {                     entry.setValue(value);                 } else {                     entryItr.remove();                 }             }             return this;",return replacePropertyPlaceholders(System::getenv);
163,bbd5f26d45c5e905a237375bae7a0df98ae0bfad,6380560dbb989242e48f68719fe6045c51f7017e,d55f719f8abe56a25f9d78999ef356a260599a78,Fri Jun 03 19:32:03 CEST 2016,core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java,"// just create enough settings to build the environment, to get the config dir         Settings.Builder output = Settings.builder();         initializeSettings(output, input, true);         Environment environment = new Environment(output.build());         boolean settingsFileFound = false;         Set<String> foundSuffixes = new HashSet<>();         for (String allowedSuffix : ALLOWED_SUFFIXES) {             Path path = environment.configFile().resolve(""elasticsearch"" + allowedSuffix);             if (Files.exists(path)) {                 if (!settingsFileFound) {                     try {                         output.loadFromPath(path);                     } catch (IOException e) {                         throw new SettingsException(""Failed to settings from "" + path.toString(), e);                     }                 }                 settingsFileFound = true;                 foundSuffixes.add(allowedSuffix);             }         }         if (foundSuffixes.size() > 1) {             throw new SettingsException(""multiple settings files found with suffixes: "" + Strings.collectionToDelimitedString(foundSuffixes, "",""));         }         // re-initialize settings now that the config file has been loaded         // TODO: only re-initialize if a config file was actually loaded         initializeSettings(output, input, false);         finalizeSettings(output, terminal, environment.configFile());         environment = new Environment(output.build());         // we put back the path.logs so we can use it in the logging configuration file         output.put(Environment.PATH_LOGS_SETTING.getKey(), cleanPath(environment.logsFile().toAbsolutePath().toString()));         return new Environment(output.build());","return prepareEnvironment(input, terminal, Collections.emptyMap());"
164,ad7229fe723fb2fa4ef4ba016ae145d10323c5c3,f6694beca0ec96ec926f167332acfe7bdfce9eef,cec4b9a71c4f561e21897309154e3fb306b98f55,Sun May 22 03:04:43 CEST 2016,core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java,"shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(),                             new CommonStats(indicesService.getIndicesQueryCache(), indexService.cache().getPercolatorQueryCache(),                                     indexShard, SHARD_STATS_FLAGS),                             indexShard.commitStats(), indexShard.seqNoStats()));","shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));"
165,ad7229fe723fb2fa4ef4ba016ae145d10323c5c3,f6694beca0ec96ec926f167332acfe7bdfce9eef,cec4b9a71c4f561e21897309154e3fb306b98f55,Sun May 22 03:04:43 CEST 2016,core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java,"return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(),                 new CommonStats(indicesService.getIndicesQueryCache(), indexService.cache().getPercolatorQueryCache(), indexShard, flags),                 indexShard.commitStats(), indexShard.seqNoStats());","return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, flags), indexShard.commitStats());"
166,ad7229fe723fb2fa4ef4ba016ae145d10323c5c3,f6694beca0ec96ec926f167332acfe7bdfce9eef,cec4b9a71c4f561e21897309154e3fb306b98f55,Sun May 22 03:04:43 CEST 2016,core/src/main/java/org/elasticsearch/indices/IndicesService.java,"IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId()                             new ShardStats[] {                                     new ShardStats(indexShard.routingEntry(), indexShard.shardPath(),                                             new CommonStats(indicesQueryCache, indexService.cache().getPercolatorQueryCache(),                                                     indexShard, flags),                                             indexShard.commitStats(), indexShard.seqNoStats())});","IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[] { new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesQueryCache, indexShard, flags), indexShard.commitStats()) });"
167,ad7229fe723fb2fa4ef4ba016ae145d10323c5c3,f6694beca0ec96ec926f167332acfe7bdfce9eef,cec4b9a71c4f561e21897309154e3fb306b98f55,Sun May 22 03:04:43 CEST 2016,core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java,"ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(),             new CommonStats(indicesService.getIndicesQueryCache(), test.cache().getPercolatorQueryCache(), shard,                 new CommonStatsFlags())             shard.commitStats(), shard.seqNoStats());","ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), shard, new CommonStatsFlags()), shard.commitStats());"
168,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,synchronized (dirtyLock(index.uid())) {             try {,try (Releasable ignored = acquireLock(index.uid())) {
169,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java,context.seqNo()             context.id()             context.type(),context.sourceToParse().id()             context.sourceToParse().type()
170,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/main/java/org/elasticsearch/index/mapper/ParsedDocument.java,"private final Field uid, version, seqNo;","private final String uid, id, type;"
171,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"final Term uid = documentMapper.uidMapper().term(Uid.createUid(type, id));         return prepareDelete(type, id, uid, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, versionType, Engine.Operation.Origin.PRIMARY);","final MappedFieldType uidFieldType = documentMapper.uidMapper().fieldType();         final Query uidQuery = uidFieldType.termQuery(Uid.createUid(type, id), null);         final Term uid = MappedFieldType.extractTerm(uidQuery);         return prepareDelete(type, id, uid, version, versionType, Engine.Operation.Origin.PRIMARY);"
172,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java,"Engine.Delete engineDelete = IndexShard.prepareDelete(uid.type(), uid.id(), delete.uid(), delete.seqNo(),                             delete.version(), delete.versionType().versionTypeForReplicationAndRecovery(), Engine.Operation.Origin.RECOVERY);                     engine.delete(engineDelete);","final Engine.Delete engineDelete = new Engine.Delete(uid.type(), uid.id(), delete.uid(), delete.version(),                             delete.versionType().versionTypeForReplicationAndRecovery(), Engine.Operation.Origin.RECOVERY, System.nanoTime(), false);                     delete(engine, engineDelete);"
173,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/test/java/org/elasticsearch/index/IndexingSlowLogTests.java,"ParsedDocument pd = new ParsedDocument(new StringField(""uid"", ""test:id"", Store.YES), new LegacyIntField(""version"", 1, Store.YES),                 new LegacyIntField(""seqNo"", 1, Store.YES) , ""id"",","ParsedDocument pd = new ParsedDocument(new NumericDocValuesField(""version"", 1), ""id"","
174,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java,"return new ParsedDocument(uidField, versionField, seqNoField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingsUpdate);","document.add(new LongPoint(""point_field"", 42)); // so that points report memory/disk usage         return new ParsedDocument(versionField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingsUpdate);"
175,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java,"}         }, null, IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig, TimeValue.timeValueMinutes(5)         );         try {             config.setCreate(Lucene.indexExists(store.directory()) == false);         } catch (IOException e) {             throw new ElasticsearchException(""can't find index?"", e);         }","}}, null, IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig, TimeValue.timeValueMinutes(5));"
176,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/test/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapperTests.java,"assertFieldNames(set(""a"", ""b"", ""b.c"", ""_uid"", ""_type"", ""_version"", ""_seq_no"", ""_source"", ""_all""), doc);","assertFieldNames(set(""a"", ""a.keyword"", ""b"", ""b.c"", ""_uid"", ""_type"", ""_version"", ""_source"", ""_all""), doc);"
177,15d3d74444ede63651f5ef10dd172da5293529ad,dcd2642dad0ac54a6a58abe47b809ca9c665a6dd,d3d57da89ff3ae4071f93af97c1f71e7b8d3364a,Sun May 15 02:23:59 CEST 2016,core/src/test/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapperTests.java,"assertFieldNames(set(""field"", ""_uid"", ""_type"", ""_version"", ""_seq_no"", ""_source"", ""_all""), doc);","assertFieldNames(set(""field"", ""field.keyword"", ""_uid"", ""_type"", ""_version"", ""_source"", ""_all""), doc);"
178,31ca8fa41149dbe870936ae058b47defb45f8711,3adaf096758a6015ca4f733e2e49ee5528ac3cd5,0eb1a816c8ad5ba8c630d8af783210fb79b7901b,Mon Apr 11 22:44:59 CEST 2016,core/src/test/java/org/elasticsearch/common/settings/loader/YamlSettingsLoaderTests.java,"public void testIndentation() throws Exception {         String yaml = ""/org/elasticsearch/common/settings/loader/indentation-settings.yml"";         ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> {             settingsBuilder().loadFromStream(yaml, getClass().getResourceAsStream(yaml));         });         assertTrue(e.getMessage(), e.getMessage().contains(""malformed""));","public void testIndentation() {         final String yaml = ""/org/elasticsearch/common/settings/loader/indentation-settings.yml"";         final SettingsException e =                 expectThrows(                         SettingsException.class                         () -> Settings.builder().loadFromStream(yaml, getClass().getResourceAsStream(yaml)).build());         assertThat(e.getMessage(), containsString(""Failed to load settings""));"
179,31ca8fa41149dbe870936ae058b47defb45f8711,3adaf096758a6015ca4f733e2e49ee5528ac3cd5,0eb1a816c8ad5ba8c630d8af783210fb79b7901b,Mon Apr 11 22:44:59 CEST 2016,core/src/test/java/org/elasticsearch/common/settings/loader/YamlSettingsLoaderTests.java,"public void testIndentationWithExplicitDocumentStart() throws Exception {         String yaml = ""/org/elasticsearch/common/settings/loader/indentation-with-explicit-document-start-settings.yml"";         ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> {             settingsBuilder().loadFromStream(yaml, getClass().getResourceAsStream(yaml));         });         assertTrue(e.getMessage(), e.getMessage().contains(""malformed""));","public void testIndentationWithExplicitDocumentStart() {         final String yaml = ""/org/elasticsearch/common/settings/loader/indentation-with-explicit-document-start-settings.yml"";         final SettingsException e =                 expectThrows(                         SettingsException.class                         () -> Settings.builder().loadFromStream(yaml, getClass().getResourceAsStream(yaml)).build());         assertThat(e.getMessage(), containsString(""Failed to load settings""));"
180,31ca8fa41149dbe870936ae058b47defb45f8711,3adaf096758a6015ca4f733e2e49ee5528ac3cd5,0eb1a816c8ad5ba8c630d8af783210fb79b7901b,Mon Apr 11 22:44:59 CEST 2016,core/src/test/java/org/elasticsearch/common/settings/loader/YamlSettingsLoaderTests.java,"String yaml = ""foo: bar\nfoo: baz"";         SettingsException e = expectThrows(SettingsException.class, () -> {                 settingsBuilder().loadFromSource(yaml);         });","final String yaml = ""foo: bar\nfoo: baz"";         final SettingsException e = expectThrows(SettingsException.class, () -> Settings.builder().loadFromSource(yaml).build());"
181,31ca8fa41149dbe870936ae058b47defb45f8711,3adaf096758a6015ca4f733e2e49ee5528ac3cd5,0eb1a816c8ad5ba8c630d8af783210fb79b7901b,Mon Apr 11 22:44:59 CEST 2016,core/src/test/java/org/elasticsearch/index/analysis/AnalysisModuleTests.java,"private Settings loadFromClasspath(String path) throws IOException {         return settingsBuilder().loadFromStream(path, getClass().getResourceAsStream(path))","private Settings loadFromClasspath(String path) {         return Settings.builder().loadFromStream(path, getClass().getResourceAsStream(path))"
182,c7c8b1d825c1ec7f6a00232ee5c3ffa38384ddda,8b970d970ddfb32c27d51f436c4d6f7b35258540,e85535724ef9a1cfa622fd79a3593d3b714e5570,Sat Apr 02 19:56:00 CEST 2016,core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java,"logger.info(""node {} received new cluster state: {} \n and had previous cluster state: {}"", node, event.state(),                                 event.previousState());                         String previousMasterNodeName = previousMaster != null ? previousMaster.name() : null;                         String currentMasterNodeName = currentMaster != null ? currentMaster.name() : null;","logger.info(""node {} received new cluster state: {} \n and had previous cluster state: {}"", node, event.state(), event.previousState());                         String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null;                         String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null;"
183,c7c8b1d825c1ec7f6a00232ee5c3ffa38384ddda,8b970d970ddfb32c27d51f436c4d6f7b35258540,e85535724ef9a1cfa622fd79a3593d3b714e5570,Sat Apr 02 19:56:00 CEST 2016,core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java,"TransportService masterTranspotService = internalCluster().getInstance(TransportService.class, discoveryNodes.masterNode()                 .getName());","TransportService masterTranspotService = internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName());"
184,4793630eb8f599f193a860d95bd7a1c80717ac70,bd9e908b7c832be8798d83c4783815044c52cd78,9402251eaf1ed0a831397c02d1abde40a9961015,Mon Mar 28 18:29:53 CEST 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId(), request)) {","try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId(), request.primaryTerm())) {"
185,4793630eb8f599f193a860d95bd7a1c80717ac70,bd9e908b7c832be8798d83c4783815044c52cd78,9402251eaf1ed0a831397c02d1abde40a9961015,Mon Mar 28 18:29:53 CEST 2016,core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java,"private void configureUnicastCluster(int numberOfNodes, @Nullable int[] unicastHostsOrdinals, int minimumMasterNode) throws             ExecutionException, InterruptedException {         if (minimumMasterNode < 0) {             minimumMasterNode = numberOfNodes / 2 + 1;         }         logger.info(""---> configured unicast"");         // TODO: Rarely use default settings form some of these         Settings nodeSettings = Settings.builder()                 .put(DEFAULT_SETTINGS)                 .put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minimumMasterNode)                 .build();         if (discoveryConfig == null) {             if (unicastHostsOrdinals == null) {                 discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes, nodeSettings);             } else {                 discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes, nodeSettings, unicastHostsOrdinals);             }         }","private void configureUnicastCluster(int numberOfNodes, @Nullable int[] unicastHostsOrdinals, int minimumMasterNode) throws ExecutionException, InterruptedException {         configureUnicastCluster(DEFAULT_SETTINGS, numberOfNodes, unicastHostsOrdinals, minimumMasterNode);"
186,91021e3019d205b515a13b0a8b1ccd7c855d6368,7c8cdf4a714375c18af5d3ee9626e23fd9f6c1ad,b8227a72224a9d77bc9ec852213a689507605d8c,Fri Mar 25 15:50:48 CET 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,return routingEntry().primaryTerm();,return indexShard.getPrimaryTerm();
187,91021e3019d205b515a13b0a8b1ccd7c855d6368,7c8cdf4a714375c18af5d3ee9626e23fd9f6c1ad,b8227a72224a9d77bc9ec852213a689507605d8c,Fri Mar 25 15:50:48 CET 2016,core/src/main/java/org/elasticsearch/cluster/ClusterState.java,"builder.startObject(""primary_terms"");",builder.startObject(IndexMetaData.KEY_PRIMARY_TERMS);
188,91021e3019d205b515a13b0a8b1ccd7c855d6368,7c8cdf4a714375c18af5d3ee9626e23fd9f6c1ad,b8227a72224a9d77bc9ec852213a689507605d8c,Fri Mar 25 15:50:48 CET 2016,core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java,"static final String KEY_PRIMARY_TERMS = ""primary_terms"";","public static final String KEY_PRIMARY_TERMS = ""primary_terms"";"
189,91021e3019d205b515a13b0a8b1ccd7c855d6368,7c8cdf4a714375c18af5d3ee9626e23fd9f6c1ad,b8227a72224a9d77bc9ec852213a689507605d8c,Fri Mar 25 15:50:48 CET 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"if (shardRouting.primary() == false) {                 throw new IllegalIndexShardStateException(shardId, state, ""shard is not a primary"");             }             return prepareIndex(docMapper(source.type()), source, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, versionType, Engine.Operation.Origin.PRIMARY);","verifyPrimary();             return prepareIndex(docMapper(source.type()), source, version, versionType, Engine.Operation.Origin.PRIMARY);"
190,91021e3019d205b515a13b0a8b1ccd7c855d6368,7c8cdf4a714375c18af5d3ee9626e23fd9f6c1ad,b8227a72224a9d77bc9ec852213a689507605d8c,Fri Mar 25 15:50:48 CET 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"if (shardRouting.primaryTerm() > opPrimaryTerm) {             throw new IllegalIndexShardStateException(shardId, state, ""operation term [{}] is too old (current [{}])"", opPrimaryTerm, shardRouting.primaryTerm());         }         if (shardRouting.primary() && shardRouting.isRelocationTarget() == false) {             throw new IllegalIndexShardStateException(shardId, state, ""shard is not a replica"");","verifyReplicationTarget();         if (primaryTerm > opPrimaryTerm) {             // must use exception that is not ignored by replication logic. See TransportActions.isShardNotAvailableException             throw new IllegalArgumentException(LoggerMessageFormat.format(""{} operation term [{}] is too old (current [{}])""                 shardId, opPrimaryTerm, primaryTerm));"
191,91021e3019d205b515a13b0a8b1ccd7c855d6368,7c8cdf4a714375c18af5d3ee9626e23fd9f6c1ad,b8227a72224a9d77bc9ec852213a689507605d8c,Fri Mar 25 15:50:48 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java,"assertThat(routingTable.index(""test"").shard(0).primaryShard().primaryTerm(), equalTo(2L));","assertThat(clusterState.metaData().index(""test"").primaryTerm(0), equalTo(2L));"
192,91021e3019d205b515a13b0a8b1ccd7c855d6368,7c8cdf4a714375c18af5d3ee9626e23fd9f6c1ad,b8227a72224a9d77bc9ec852213a689507605d8c,Fri Mar 25 15:50:48 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java,"assertThat(routingNodes.node(nodeIdRemaining).shardsWithState(INITIALIZING).get(0).primaryTerm(), equalTo(2L));","assertThat(clusterState.metaData().index(""test"").primaryTerm(0), equalTo(2L));"
193,91021e3019d205b515a13b0a8b1ccd7c855d6368,7c8cdf4a714375c18af5d3ee9626e23fd9f6c1ad,b8227a72224a9d77bc9ec852213a689507605d8c,Fri Mar 25 15:50:48 CET 2016,core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java,indexShard.acquireReplicaOperationLock(indexShard.routingEntry().primaryTerm());,indexShard.acquireReplicaOperationLock(indexShard.getPrimaryTerm());
194,27d4994affd5ceaf16785465fd7b89ebec1cb95a,2c6e78e16ceb71861dc23f173ecb702b0d36a096,5e8656aff04800faa5e71c3956f097cdab0e119b,Thu Mar 24 18:10:11 CET 2016,core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java,public OsStats readFrom(StreamInput in) throws IOException {             return new OsStats(in);,"public void readFrom(StreamInput in) throws IOException {             availableProcessors = in.readVInt();             allocatedProcessors = in.readVInt();             int size = in.readVInt();             names.clear();             for (int i = 0; i < size; i++) {                 names.addTo(in.readString(), in.readVInt());             }"
195,27d4994affd5ceaf16785465fd7b89ebec1cb95a,2c6e78e16ceb71861dc23f173ecb702b0d36a096,5e8656aff04800faa5e71c3956f097cdab0e119b,Thu Mar 24 18:10:11 CET 2016,core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java,"List<ZenPing.PingResponse> pingResponses = new ArrayList<>();         for (ZenPing.PingResponse pingResponse : fullPingResponses) {             DiscoveryNode node = pingResponse.node();             //TODO we should rename this and its setting, also we ignore node.ingest, but maybe it's ok here             if (masterElectionFilterClientNodes && node.masterNode() == false && node.dataNode() == false) {                 // filter out nodes that don't hold data and are not master eligible             } else if (masterElectionFilterDataNodes && node.masterNode() == false && node.dataNode()) {                 // filter out dedicated data nodes             } else {                 pingResponses.add(pingResponse);             }         }         if (logger.isDebugEnabled()) {             StringBuilder sb = new StringBuilder();             if (pingResponses.isEmpty()) {                 sb.append("" {none}"");             } else {                 for (ZenPing.PingResponse pingResponse : pingResponses) {                     sb.append(""\n\t--> "").append(pingResponse);                 }             }             logger.debug(""filtered ping responses: (filter_client[{}], filter_data[{}]){}"", masterElectionFilterClientNodes,                 masterElectionFilterDataNodes, sb);         }","final List<ZenPing.PingResponse> pingResponses;         pingResponses = filterPingResponses(fullPingResponses, masterElectionIgnoreNonMasters, logger);"
196,27d4994affd5ceaf16785465fd7b89ebec1cb95a,2c6e78e16ceb71861dc23f173ecb702b0d36a096,5e8656aff04800faa5e71c3956f097cdab0e119b,Thu Mar 24 18:10:11 CET 2016,core/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsIT.java,"SuggestResponse suggestResponse = addSuggestions(internalCluster().coordOnlyNodeClient().prepareSuggest(), i).get();","SearchResponse suggestResponse = addSuggestions(internalCluster().clientNodeClient().prepareSearch(), i).get();"
197,27d4994affd5ceaf16785465fd7b89ebec1cb95a,2c6e78e16ceb71861dc23f173ecb702b0d36a096,5e8656aff04800faa5e71c3956f097cdab0e119b,Thu Mar 24 18:10:11 CET 2016,core/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsIT.java,"SuggestResponse suggestResponse = addSuggestions(internalCluster().coordOnlyNodeClient().prepareSuggest(""test1""), i).get();","SearchResponse suggestResponse = addSuggestions(internalCluster().clientNodeClient().prepareSearch(""test1""), i).get();"
198,27d4994affd5ceaf16785465fd7b89ebec1cb95a,2c6e78e16ceb71861dc23f173ecb702b0d36a096,5e8656aff04800faa5e71c3956f097cdab0e119b,Thu Mar 24 18:10:11 CET 2016,core/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsIT.java,"SuggestResponse suggestResponse = addSuggestions(internalCluster().coordOnlyNodeClient().prepareSuggest(""test2""), i).get();","SearchResponse suggestResponse = addSuggestions(internalCluster().clientNodeClient().prepareSearch(""test2""), i).get();"
199,7c8cdf4a714375c18af5d3ee9626e23fd9f6c1ad,39ae16bc4c1e45ddd5da1065b122082e74ca0bf2,d514977c75c845d1f15baccc4af98db162191bac,Tue Mar 22 19:21:28 CET 2016,core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java,"if (indexScopedSettigns.isPrivateSetting(entry.getKey()) || entry.getKey().startsWith(ARCHIVED_SETTINGS_PREFIX)) {                         builder.put(entry.getKey(), entry.getValue());                     } else {                         changed = true;                         logger.warn(""[{}] found unknown index setting: {} value: {} - archiving"", indexMetaData.getIndex(), entry.getKey                                 (), entry.getValue());                         // we put them back in here such that tools can check from the outside if there are any indices with broken                         // settings. The setting can remain there                         // but we want users to be aware that some of their setting are broken and they can research why and what they                         // need to do to replace them.                         builder.put(ARCHIVED_SETTINGS_PREFIX + entry.getKey(), entry.getValue());",return indexMetaData;
200,39ae16bc4c1e45ddd5da1065b122082e74ca0bf2,858610d0d10cd9ac33f3e460528a1f9f80863257,b07a8185a7a3e9e5ea34e5a2aa11584f8d37b042,Tue Mar 22 11:46:26 CET 2016,core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java,"shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(),                             new CommonStats(indicesService.getIndicesQueryCache(), indexShard, SHARD_STATS_FLAGS), indexShard.commitStats(),                             indexShard.seqNoStats()));","shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexService.cache().getPercolatorQueryCache(), indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));"
201,39ae16bc4c1e45ddd5da1065b122082e74ca0bf2,858610d0d10cd9ac33f3e460528a1f9f80863257,b07a8185a7a3e9e5ea34e5a2aa11584f8d37b042,Tue Mar 22 11:46:26 CET 2016,core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java,"return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(),                 new CommonStats(indicesService.getIndicesQueryCache(), indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats());","return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexService.cache().getPercolatorQueryCache(), indexShard, flags), indexShard.commitStats());"
202,39ae16bc4c1e45ddd5da1065b122082e74ca0bf2,858610d0d10cd9ac33f3e460528a1f9f80863257,b07a8185a7a3e9e5ea34e5a2aa11584f8d37b042,Tue Mar 22 11:46:26 CET 2016,core/src/main/java/org/elasticsearch/indices/IndicesService.java,"IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[] {                             new ShardStats(indexShard.routingEntry(), indexShard.shardPath(),                                     new CommonStats(indicesQueryCache, indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats())                     });","IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[] { new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesQueryCache, indexService.cache().getPercolatorQueryCache(), indexShard, flags), indexShard.commitStats()) });"
203,39ae16bc4c1e45ddd5da1065b122082e74ca0bf2,858610d0d10cd9ac33f3e460528a1f9f80863257,b07a8185a7a3e9e5ea34e5a2aa11584f8d37b042,Tue Mar 22 11:46:26 CET 2016,core/src/test/java/org/elasticsearch/action/support/replication/BroadcastReplicationTests.java,"int numShards = 1 + randomInt(3);         clusterService.setState(stateWithAssignedPrimariesAndOneReplica(index, numShards));","int numShards = randomInt(3);         setState(clusterService, stateWithAssignedPrimariesAndOneReplica(index, numShards));"
204,39ae16bc4c1e45ddd5da1065b122082e74ca0bf2,858610d0d10cd9ac33f3e460528a1f9f80863257,b07a8185a7a3e9e5ea34e5a2aa11584f8d37b042,Tue Mar 22 11:46:26 CET 2016,core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java,"ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), shard, new CommonStatsFlags()), shard.commitStats(), shard.seqNoStats());","ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), test.cache().getPercolatorQueryCache(), shard, new CommonStatsFlags()), shard.commitStats());"
205,bf390a935e8dfcb09a12dcf387c838fb7029ae1c,da1992248960e75f27cfc1af5386e905e3ea8fcc,4ac4f3c8bc25eb3ca6b20fbba1ec33a54e93dd99,Mon Mar 21 17:18:23 CET 2016,core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeService.java,"public Map<String, String> buildAttributes() {         Map<String, String> attributes = new HashMap<>(Node.NODE_ATTRIBUTES.get(this.settings).getAsMap());         attributes.remove(""name""); // name is extracted in other places         if (attributes.containsKey(""client"")) {             throw new IllegalArgumentException(""node.client setting is no longer supported, use "" + Node.NODE_MASTER_SETTING.getKey()                 + "", "" + Node.NODE_DATA_SETTING.getKey() + "" and "" + Node.NODE_INGEST_SETTING.getKey() + "" explicitly instead"");         }         //nocommit why don't we remove master as well if it's true? and ingest?         if (attributes.containsKey(DiscoveryNode.Role.DATA.getRoleName())) {             if (attributes.get(DiscoveryNode.Role.DATA.getRoleName()).equals(""true"")) {                 attributes.remove(DiscoveryNode.Role.DATA.getRoleName());             }         }         for (CustomAttributesProvider provider : customAttributesProviders) {             try {                 Map<String, String> customAttributes = provider.buildAttributes();                 if (customAttributes != null) {                     for (Map.Entry<String, String> entry : customAttributes.entrySet()) {                         if (!attributes.containsKey(entry.getKey())) {                             attributes.put(entry.getKey(), entry.getValue());                         }                     }                 }             } catch (Exception e) {                 logger.warn(""failed to build custom attributes from provider [{}]"", e, provider);             }         }         return attributes;     }","    public DiscoveryNode buildLocalNode(TransportAddress publishAddress) {
        Map<String, String> attributes = new HashMap<>(settings.getByPrefix(""node."").getAsMap());
        attributes.remove(""name""); // name is extracted in other places
        if (attributes.containsKey(""client"")) {
            if (attributes.get(""client"").equals(""false"")) {
                attributes.remove(""client""); // this is the default
            } else {
                // if we are client node, don't store data ...
                attributes.put(""data"", ""false"");
            }
        }
        if (attributes.containsKey(""data"")) {
            if (attributes.get(""data"").equals(""true"")) {
                attributes.remove(""data"");
            }
        }

        for (CustomAttributesProvider provider : customAttributesProviders) {
            try {
                Map<String, String> customAttributes = provider.buildAttributes();
                if (customAttributes != null) {
                    for (Map.Entry<String, String> entry : customAttributes.entrySet()) {
                        if (!attributes.containsKey(entry.getKey())) {
                            attributes.put(entry.getKey(), entry.getValue());
                        }
                    }
                }
            } catch (Exception e) {
                logger.warn(""failed to build custom attributes from provider [{}]"", e, provider);
            }
        }

        final String nodeId = generateNodeId(settings);
        return new DiscoveryNode(settings.get(""node.name""), nodeId, publishAddress, attributes, version);
    }"
206,bf390a935e8dfcb09a12dcf387c838fb7029ae1c,da1992248960e75f27cfc1af5386e905e3ea8fcc,4ac4f3c8bc25eb3ca6b20fbba1ec33a54e93dd99,Mon Mar 21 17:18:23 CET 2016,core/src/main/java/org/elasticsearch/tribe/TribeService.java,"Settings.Builder sb = Settings.builder().put(entry.getValue());             sb.put(""node.name"", settings.get(""node.name"") + ""/"" + entry.getKey());             sb.put(Environment.PATH_HOME_SETTING.getKey(), Environment.PATH_HOME_SETTING.get(settings)); // pass through ES home dir             if (Environment.PATH_CONF_SETTING.exists(settings)) {                 sb.put(Environment.PATH_CONF_SETTING.getKey(), Environment.PATH_CONF_SETTING.get(settings));             }             sb.put(TRIBE_NAME_SETTING.getKey(), entry.getKey());             if (sb.get(""http.enabled"") == null) {                 sb.put(""http.enabled"", false);             }             sb.put(Node.NODE_DATA_SETTING.getKey(), false);             sb.put(Node.NODE_MASTER_SETTING.getKey(), false);             sb.put(Node.NODE_INGEST_SETTING.getKey(), false);             nodes.add(new TribeClientNode(sb.build()));","Settings clientSettings = buildClientSettings(entry.getKey(), settings, entry.getValue());             nodes.add(new TribeClientNode(clientSettings));"
207,858610d0d10cd9ac33f3e460528a1f9f80863257,838c7ddd82ad2e0d46c47658834899f8f3c94518,ef4293a993014379c54e2399e692c6387d80f0ca,Sat Mar 19 13:57:40 CET 2016,core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java,"new ShardStats(test_0, new ShardPath(false, test0Path, test0Path, ""0xdeadbeef"", test_0.shardId()), commonStats0, null, null),                 new ShardStats(test_1, new ShardPath(false, test1Path, test1Path, ""0xdeadbeef"", test_1.shardId()), commonStats1, null, null)","new ShardStats(test_0, new ShardPath(false, test0Path, test0Path, test_0.shardId()), commonStats0 , null),                 new ShardStats(test_1, new ShardPath(false, test1Path, test1Path, test_1.shardId()), commonStats1 , null)"
208,858610d0d10cd9ac33f3e460528a1f9f80863257,838c7ddd82ad2e0d46c47658834899f8f3c94518,ef4293a993014379c54e2399e692c6387d80f0ca,Sat Mar 19 13:57:40 CET 2016,core/src/test/java/org/elasticsearch/cluster/action/shard/ShardFailedClusterStateTaskExecutorTests.java,"return TestShardRouting.newShardRouting(shardRouting.index(), shardRouting.id(),                     InternalClusterService.generateNodeId(Settings.EMPTY), randomInt(20), randomBoolean(),                     randomFrom(ShardRoutingState.values()));","return                     TestShardRouting.newShardRouting(shardRouting.index(), shardRouting.id(), DiscoveryNodeService.generateNodeId(Settings.EMPTY), randomBoolean(), randomFrom(ShardRoutingState.values()));"
209,1f1f6861b777cff0deb925ba88b623d2b3c249ed,17a420e6aa7745c93bab7b0e2d6c08b203527508,4b5783bdd9d74a3bb997ae04bbf55ae7e05ec18b,Tue Mar 15 11:03:28 CET 2016,core/src/test/java/org/elasticsearch/search/sort/AbstractSortTestCase.java,"namedWriteableRegistry.registerPrototype(SortBuilder.class, ScriptSortBuilder.PROTOTYPE);","namedWriteableRegistry.registerPrototype(SortBuilder.class, FieldSortBuilder.PROTOTYPE);"
210,bd96075f7f7140ef61c619bc4399bf43af7e83fb,ce6ec511b9761997d215fd821ecfba55a803c597,e4bed0c97e7e0acb293624f9601027f8be38c874,Mon Mar 14 21:18:42 CET 2016,core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java,ingestStats = in.readOptionalWritable(IngestStats::new);,ingestStats = in.readOptionalWritable(IngestStats.PROTO::readFrom);
211,bd96075f7f7140ef61c619bc4399bf43af7e83fb,ce6ec511b9761997d215fd821ecfba55a803c597,e4bed0c97e7e0acb293624f9601027f8be38c874,Mon Mar 14 21:18:42 CET 2016,core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java,"public <T extends Writeable> T readOptionalWritable(Writeable.IOFunction<StreamInput, T> supplier) throws IOException {         if (readBoolean()) {             return supplier.apply(this);","public <T extends Writeable> T readOptionalWritable(Writeable.IOFunction<StreamInput, T> provider) throws IOException {         if (readBoolean()) {             return provider.apply(this);"
212,9acb0bb28ce4f6affe3de86943acb393d9c665ec,e35032950ecaf1362ef015bc32e7d7fdcf8d2249,625695a92a3fc4c2850cd5d11ac5e739591beffc,Sun Mar 13 14:52:10 CET 2016,core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java,"// this sucks but we can't really validate all the analyzers/similarity in here         Setting.groupSetting(""index.similarity."", Property.IndexScope), // this allows similarity settings to be passed         Setting.groupSetting(""index.analysis."", Property.IndexScope) // this allows analysis settings to be passed","// validate that built-in similarities don't get redefined         Setting.groupSetting(""index.similarity."", false, Setting.Scope.INDEX, (s) -> {             Map<String, Settings> groups = s.getAsGroups();             for (String key : SimilarityService.BUILT_IN.keySet()) {                 if (groups.containsKey(key)) {                     throw new IllegalArgumentException(""illegal value for [index.similarity.""+ key + ""] cannot redefine built-in similarity"");                 }             }         }), // this allows similarity settings to be passed         Setting.groupSetting(""index.analysis."", false, Setting.Scope.INDEX) // this allows analysis settings to be passed"
213,9acb0bb28ce4f6affe3de86943acb393d9c665ec,e35032950ecaf1362ef015bc32e7d7fdcf8d2249,625695a92a3fc4c2850cd5d11ac5e739591beffc,Sun Mar 13 14:52:10 CET 2016,core/src/main/java/org/elasticsearch/common/settings/Setting.java,"public static Setting<Settings> groupSetting(String key, boolean dynamic, Scope scope) {         return groupSetting(key, dynamic, scope, (s) -> {});     }","public static Setting<Settings> groupSetting(String key, Property... properties) {         // TODO CHECK IF WE REMOVE         if (key.endsWith(""."") == false) {             throw new IllegalArgumentException(""key must end with a '.'"");         }         // TODO CHECK IF WE REMOVE -END         return new Setting<Settings>(new GroupKey(key), (s) -> """", (s) -> null, properties) {             @Override             public boolean isGroupSetting() {                 return true;             }             @Override             public Settings get(Settings settings) {                 return settings.getByPrefix(getKey());             }             @Override             public AbstractScopedSettings.SettingUpdater<Settings> newUpdater(Consumer<Settings> consumer, ESLogger logger, Consumer<Settings> validator) {                 if (isDynamic() == false) {                     throw new IllegalStateException(""setting ["" + getKey() + ""] is not dynamic"");                 }                 final Setting<?> setting = this;                 return new AbstractScopedSettings.SettingUpdater<Settings>() {                     @Override                     public boolean hasChanged(Settings current, Settings previous) {                         Settings currentSettings = get(current);                         Settings previousSettings = get(previous);                         return currentSettings.equals(previousSettings) == false;                     }                     @Override                     public Settings getValue(Settings current, Settings previous) {                         Settings currentSettings = get(current);                         Settings previousSettings = get(previous);                         try {                             validator.accept(currentSettings);                         } catch (Exception | AssertionError e) {                             throw new IllegalArgumentException(""illegal value can't update ["" + key + ""] from ["" + previousSettings.getAsMap() + ""] to ["" + currentSettings.getAsMap() + ""]"", e);                         }                         return currentSettings;                     }                     @Override                     public void apply(Settings value, Settings current, Settings previous) {                         logger.info(""updating [{}] from [{}] to [{}]"", key, getRaw(previous), getRaw(current));                         consumer.accept(value);                     }                     @Override                     public String toString() {                         return ""Updater for: "" + setting.toString();                     }                 };             }         };     }"
214,69c83b3459f100055c316f364cea3cd58d713b52,e7cffa5e9fd3c2eb177eb57e86a55c13006c47ad,b4db26eaf9a07948e4da8d1197aadfb414699562,Thu Mar 10 11:44:36 CET 2016,core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java,"final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.newQueryShardContext());","final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(),                         indexService.fieldData(), request.shardId());"
215,69c83b3459f100055c316f364cea3cd58d713b52,e7cffa5e9fd3c2eb177eb57e86a55c13006c47ad,b4db26eaf9a07948e4da8d1197aadfb414699562,Thu Mar 10 11:44:36 CET 2016,core/src/main/java/org/elasticsearch/search/suggest/SuggestParseElement.java,"SuggestionSearchContext suggestionSearchContext = parseInternal(parser, context.getQueryShardContext());","SuggestionSearchContext suggestionSearchContext = parseInternal(parser, context.mapperService(), context.fieldData(),             context.shardTarget().shardId());"
216,69c83b3459f100055c316f364cea3cd58d713b52,e7cffa5e9fd3c2eb177eb57e86a55c13006c47ad,b4db26eaf9a07948e4da8d1197aadfb414699562,Thu Mar 10 11:44:36 CET 2016,core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java,final ParsedQuery parsedQuery = suggestion.getShardContext().parse(querySource);,IndexService indexService = indicesService.indexService(suggestion.getShard().getIndex());                     final ParsedQuery parsedQuery = indexService.newQueryShardContext().parse(querySource);
217,330f2919cbe6037525b79f82578af5ff5204c6b0,d0cbb6b7cd79c8ec937b45abce6fac19cf181218,12a6f36a341209c2e7e3958ce6f3dbca381c6ff8,Thu Mar 10 09:37:42 CET 2016,core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java,"if (item.request() instanceof IndexRequest) {                 IndexRequest indexRequest = (IndexRequest) item.request();                 preVersions[requestIndex] = indexRequest.version();                 preVersionTypes[requestIndex] = indexRequest.versionType();                 try {                     WriteResult<IndexResponse> result = shardIndexOperation(request, indexRequest, metaData, indexShard, true);                     location = locationToSync(location, result.location);                     // add the response                     IndexResponse indexResponse = result.response();                     setResponse(item, new BulkItemResponse(item.id(), indexRequest.opType().lowercase(), indexResponse));                 } catch (Throwable e) {                     // nocommit: since we now have RetryOnPrimaryException, retrying doesn't always mean the shard is closed.                     // some operations were already perform and have a seqno assigned. we shouldn't just reindex them                     // if we have a pending mapping update                     // rethrow the failure if we are going to retry on primary and let parent failure to handle it                     if (retryPrimaryException(e)) {                         // restore updated versions...                         for (int j = 0; j < requestIndex; j++) {                             applyVersion(request.items()[j], preVersions[j], preVersionTypes[j]);                         }                         throw (ElasticsearchException) e;                     }                     if (ExceptionsHelper.status(e) == RestStatus.CONFLICT) {                         logger.trace(""{} failed to execute bulk item (index) {}"", e, request.shardId(), indexRequest);                     } else {                         logger.debug(""{} failed to execute bulk item (index) {}"", e, request.shardId(), indexRequest);                     }                     // if its a conflict failure, and we already executed the request on a primary (and we execute it                     // again, due to primary relocation and only processing up to N bulk items when the shard gets closed)                     // then just use the response we got from the successful execution                     if (item.getPrimaryResponse() != null && isConflictException(e)) {                         setResponse(item, item.getPrimaryResponse());                     } else {                         setResponse(item, new BulkItemResponse(item.id(), indexRequest.opType().lowercase(),                                 new BulkItemResponse.Failure(request.index(), indexRequest.type(), indexRequest.id(), e)));                     }                 }             } else if (item.request() instanceof DeleteRequest) {                 DeleteRequest deleteRequest = (DeleteRequest) item.request();                 preVersions[requestIndex] = deleteRequest.version();                 preVersionTypes[requestIndex] = deleteRequest.versionType();                 try {                     // add the response                     final WriteResult<DeleteResponse> writeResult = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);                     DeleteResponse deleteResponse = writeResult.response();                     location = locationToSync(location, writeResult.location);                     setResponse(item, new BulkItemResponse(item.id(), OP_TYPE_DELETE, deleteResponse));                 } catch (Throwable e) {                     // nocommit: since we now have RetryOnPrimaryException, retrying doesn't always mean the shard is closed.                     // some operations were already perform and have a seqno assigned. we shouldn't just reindex them                     // rethrow the failure if we are going to retry on primary and let parent failure to handle it                     if (retryPrimaryException(e)) {                         // restore updated versions...                         for (int j = 0; j < requestIndex; j++) {                             applyVersion(request.items()[j], preVersions[j], preVersionTypes[j]);                         }                         throw (ElasticsearchException) e;                     }                     if (ExceptionsHelper.status(e) == RestStatus.CONFLICT) {                         logger.trace(""{} failed to execute bulk item (delete) {}"", e, request.shardId(), deleteRequest);                     } else {                         logger.debug(""{} failed to execute bulk item (delete) {}"", e, request.shardId(), deleteRequest);                     }                     // if its a conflict failure, and we already executed the request on a primary (and we execute it                     // again, due to primary relocation and only processing up to N bulk items when the shard gets closed)                     // then just use the response we got from the successful execution                     if (item.getPrimaryResponse() != null && isConflictException(e)) {                         setResponse(item, item.getPrimaryResponse());                     } else {                         setResponse(item, new BulkItemResponse(item.id(), OP_TYPE_DELETE,                                 new BulkItemResponse.Failure(request.index(), deleteRequest.type(), deleteRequest.id(), e)));                     }                 }             } else if (item.request() instanceof UpdateRequest) {                 UpdateRequest updateRequest = (UpdateRequest) item.request();                 preVersions[requestIndex] = updateRequest.version();                 preVersionTypes[requestIndex] = updateRequest.versionType();                 //  We need to do the requested retries plus the initial attempt. We don't do < 1+retry_on_conflict because retry_on_conflict may be Integer.MAX_VALUE                 for (int updateAttemptsCount = 0; updateAttemptsCount <= updateRequest.retryOnConflict(); updateAttemptsCount++) {                     UpdateResult updateResult;                     try {                         updateResult = shardUpdateOperation(metaData, request, updateRequest, indexShard);                     } catch (Throwable t) {                         updateResult = new UpdateResult(null, null, false, t, null);                     }                     if (updateResult.success()) {                         if (updateResult.writeResult != null) {                             location = locationToSync(location, updateResult.writeResult.location);                         }                         switch (updateResult.result.operation()) {                             case UPSERT:                             case INDEX:                                 WriteResult<IndexResponse> result = updateResult.writeResult;                                 IndexRequest indexRequest = updateResult.request();                                 BytesReference indexSourceAsBytes = indexRequest.source();                                 // add the response                                 IndexResponse indexResponse = result.response();                                 UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(),                                     indexResponse.getType(), indexResponse.getId(), indexResponse.getSeqNo(),indexResponse.getVersion(), indexResponse.isCreated());                                 if (updateRequest.fields() != null && updateRequest.fields().length > 0) {                                     Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(indexSourceAsBytes, true);                                     updateResponse.setGetResult(updateHelper.extractGetResult(updateRequest, request.index(), indexResponse.getVersion(), sourceAndContent.v2(), sourceAndContent.v1(), indexSourceAsBytes));                                 }                                 item = request.items()[requestIndex] = new BulkItemRequest(request.items()[requestIndex].id(), indexRequest);                                 setResponse(item, new BulkItemResponse(item.id(), OP_TYPE_UPDATE, updateResponse));                                 break;                             case DELETE:                                 WriteResult<DeleteResponse> writeResult = updateResult.writeResult;                                 DeleteResponse response = writeResult.response();                                 DeleteRequest deleteRequest = updateResult.request();                                 updateResponse = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(),                                     response.getId(), response.getSeqNo(), response.getVersion(), false);                                 updateResponse.setGetResult(updateHelper.extractGetResult(updateRequest, request.index(), response.getVersion(), updateResult.result.updatedSourceAsMap(), updateResult.result.updateSourceContentType(), null));                                 // Replace the update request to the translated delete request to execute on the replica.                                 item = request.items()[requestIndex] = new BulkItemRequest(request.items()[requestIndex].id(), deleteRequest);                                 setResponse(item, new BulkItemResponse(item.id(), OP_TYPE_UPDATE, updateResponse));                                 break;                             case NONE:                                 setResponse(item, new BulkItemResponse(item.id(), OP_TYPE_UPDATE, updateResult.noopResult));                                 item.setIgnoreOnReplica(); // no need to go to the replica                                 break;                         }                         // NOTE: Breaking out of the retry_on_conflict loop!                         break;                     } else if (updateResult.failure()) {                         Throwable t = updateResult.error;                         if (updateResult.retry) {                             // updateAttemptCount is 0 based and marks current attempt, if it's equal to retryOnConflict we are going out of the iteration                             if (updateAttemptsCount >= updateRequest.retryOnConflict()) {                                 setResponse(item, new BulkItemResponse(item.id(), OP_TYPE_UPDATE,                                         new BulkItemResponse.Failure(request.index(), updateRequest.type(), updateRequest.id(), t)));                             }                         } else {                             // nocommit: since we now have RetryOnPrimaryException, retrying doesn't always mean the shard is closed.                             // some operations were already perform and have a seqno assigned. we shouldn't just reindex them                             // rethrow the failure if we are going to retry on primary and let parent failure to handle it                             if (retryPrimaryException(t)) {                                 // restore updated versions...                                 for (int j = 0; j < requestIndex; j++) {                                     applyVersion(request.items()[j], preVersions[j], preVersionTypes[j]);                                 }                                 throw (ElasticsearchException) t;                             }                             // if its a conflict failure, and we already executed the request on a primary (and we execute it                             // again, due to primary relocation and only processing up to N bulk items when the shard gets closed)                             // then just use the response we got from the successful execution                             if (item.getPrimaryResponse() != null && isConflictException(t)) {                                 setResponse(item, item.getPrimaryResponse());                             } else if (updateResult.result == null) {                                 setResponse(item, new BulkItemResponse(item.id(), OP_TYPE_UPDATE, new BulkItemResponse.Failure(request.index(), updateRequest.type(), updateRequest.id(), t)));                             } else {                                 switch (updateResult.result.operation()) {                                     case UPSERT:                                     case INDEX:                                         IndexRequest indexRequest = updateResult.request();                                         if (ExceptionsHelper.status(t) == RestStatus.CONFLICT) {                                             logger.trace(""{} failed to execute bulk item (index) {}"", t, request.shardId(), indexRequest);                                         } else {                                             logger.debug(""{} failed to execute bulk item (index) {}"", t, request.shardId(), indexRequest);                                         }                                         setResponse(item, new BulkItemResponse(item.id(), OP_TYPE_UPDATE,                                                 new BulkItemResponse.Failure(request.index(), indexRequest.type(), indexRequest.id(), t)));                                         break;                                     case DELETE:                                         DeleteRequest deleteRequest = updateResult.request();                                         if (ExceptionsHelper.status(t) == RestStatus.CONFLICT) {                                             logger.trace(""{} failed to execute bulk item (delete) {}"", t, request.shardId(), deleteRequest);                                         } else {                                             logger.debug(""{} failed to execute bulk item (delete) {}"", t, request.shardId(), deleteRequest);                                         }                                         setResponse(item, new BulkItemResponse(item.id(), OP_TYPE_DELETE,                                                 new BulkItemResponse.Failure(request.index(), deleteRequest.type(), deleteRequest.id(), t)));                                         break;                                 }                             }                             // NOTE: Breaking out of the retry_on_conflict loop!                             break;                         }                     }                 }             } else {                 throw new IllegalStateException(""Unexpected index operation: "" + item.request());             }             assert item.getPrimaryResponse() != null;             assert preVersionTypes[requestIndex] != null;","location = handleItem(metaData, request, indexShard, preVersions, preVersionTypes, location, requestIndex, item);"
218,330f2919cbe6037525b79f82578af5ff5204c6b0,d0cbb6b7cd79c8ec937b45abce6fac19cf181218,12a6f36a341209c2e7e3958ce6f3dbca381c6ff8,Thu Mar 10 09:37:42 CET 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"// execute locally                 Tuple<Response, ReplicaRequest> primaryResponse = shardOperationOnPrimary(state.metaData(), request);                 primaryResponse.v2().primaryTerm(indexShardReference.opPrimaryTerm());                 if (logger.isTraceEnabled()) {                     logger.trace(""action [{}] completed on shard [{}] for request [{}] with cluster state version [{}]"", transportPrimaryAction, shardId, request, state.version());                 }                 ReplicationPhase replicationPhase = new ReplicationPhase(task, primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference);                 finishAndMoveToReplication(replicationPhase);",executeLocally();
219,330f2919cbe6037525b79f82578af5ff5204c6b0,d0cbb6b7cd79c8ec937b45abce6fac19cf181218,12a6f36a341209c2e7e3958ce6f3dbca381c6ff8,Thu Mar 10 09:37:42 CET 2016,core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java,"ParsedDocument doc = new ParsedDocument(context.uid(), context.version(), context.seqNo(), context.id(), context.type(), source.routing(), source.timestamp(), source.ttl(), context.docs(),             context.source(), update).parent(source.parent());","ParsedDocument doc = parsedDocument(source, context, update(context, mapping));"
220,330f2919cbe6037525b79f82578af5ff5204c6b0,d0cbb6b7cd79c8ec937b45abce6fac19cf181218,12a6f36a341209c2e7e3958ce6f3dbca381c6ff8,Thu Mar 10 09:37:42 CET 2016,core/src/test/java/org/elasticsearch/cluster/action/shard/ShardFailedClusterStateTaskExecutorTests.java,"TestShardRouting.newShardRouting(shardRouting.index(), shardRouting.id(), DiscoveryService.generateNodeId(Settings.EMPTY),                         randomInt(20), randomBoolean(), randomFrom(ShardRoutingState.values()));","TestShardRouting.newShardRouting(shardRouting.index(), shardRouting.id(), InternalClusterService.generateNodeId(Settings.EMPTY), randomBoolean(), randomFrom(ShardRoutingState.values()));"
221,330f2919cbe6037525b79f82578af5ff5204c6b0,d0cbb6b7cd79c8ec937b45abce6fac19cf181218,12a6f36a341209c2e7e3958ce6f3dbca381c6ff8,Thu Mar 10 09:37:42 CET 2016,core/src/test/java/org/elasticsearch/index/IndexingSlowLogTests.java,"ParsedDocument pd = new ParsedDocument(new StringField(""uid"", ""test:id"", Store.YES), new IntField(""version"", 1, Store.YES),                 new IntField(""seqNo"", 1, Store.YES), ""id"",","ParsedDocument pd = new ParsedDocument(new StringField(""uid"", ""test:id"", Store.YES), new LegacyIntField(""version"", 1, Store.YES), ""id"","
222,330f2919cbe6037525b79f82578af5ff5204c6b0,d0cbb6b7cd79c8ec937b45abce6fac19cf181218,12a6f36a341209c2e7e3958ce6f3dbca381c6ff8,Thu Mar 10 09:37:42 CET 2016,core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java,"// test if we still write it even if the shard is not active         ShardRouting inactiveRouting = TestShardRouting.newShardRouting(shard.shardRouting.index(), shard.shardRouting.shardId().id(),                 shard.shardRouting.currentNodeId(), null, null, shard.shardRouting.primaryTerm(), true, ShardRoutingState.INITIALIZING);         shard.persistMetadata(inactiveRouting, shard.shardRouting);         shardStateMetaData = load(logger, env.availableShardPaths(shard.shardId));         assertEquals(""inactive shard state shouldn't be persisted"", shardStateMetaData, getShardStateMetadata(shard));         assertEquals(""inactive shard state shouldn't be persisted"", shardStateMetaData, new ShardStateMetaData(routing.primary(), shard.indexSettings().getUUID(), routing.allocationId()));",// check that we don't write shard state metadata if persist == false
223,bbdbfe7373b7734d0034ca95afa09a0cb6df11e6,03754ade83daa7d6ccc07ed9fa7233241fae1032,dedc45ea627b15d4191486267a0035ac2bb7a210,Wed Mar 09 20:28:27 CET 2016,core/src/main/java/org/elasticsearch/index/mapper/ParseContext.java,this.docBoost = 1.0f;             this.dynamicMappers = new ArrayList<>();,this.dynamicMappingsUpdate = null;
224,474fd2607346308674f65ce336af8fc3c125b53c,20f5255670e3e1bdce973b55ec076f8a9f2b6870,198a79edf574543b4f7e7568265c36ddbe53f72d,Tue Mar 08 14:52:59 CET 2016,core/src/main/java/org/elasticsearch/common/settings/Setting.java,"return new Setting<Settings>(new GroupKey(key), (s) -> """", (s) -> null, dynamic, scope) {             @Override             public boolean isGroupSetting() {                 return true;             }             @Override             public Settings get(Settings settings) {                 return settings.getByPrefix(getKey());             }             @Override             public AbstractScopedSettings.SettingUpdater<Settings> newUpdater(Consumer<Settings> consumer, ESLogger logger, Consumer<Settings> validator) {                 if (isDynamic() == false) {                     throw new IllegalStateException(""setting ["" + getKey() + ""] is not dynamic"");                 }                 final Setting<?> setting = this;                 return new AbstractScopedSettings.SettingUpdater<Settings>() {                     @Override                     public boolean hasChanged(Settings current, Settings previous) {                         Settings currentSettings = get(current);                         Settings previousSettings = get(previous);                         return currentSettings.equals(previousSettings) == false;                     }                     @Override                     public Settings getValue(Settings current, Settings previous) {                         Settings currentSettings = get(current);                         Settings previousSettings = get(previous);                         try {                             validator.accept(currentSettings);                         } catch (Exception | AssertionError e) {                             throw new IllegalArgumentException(""illegal value can't update ["" + key + ""] from ["" + previousSettings.getAsMap() + ""] to ["" + currentSettings.getAsMap() + ""]"", e);                         }                         return currentSettings;                     }                     @Override                     public void apply(Settings value, Settings current, Settings previous) {                         logger.info(""updating [{}] from [{}] to [{}]"", key, getRaw(previous), getRaw(current));                         consumer.accept(value);                     }                     @Override                     public String toString() {                         return ""Updater for: "" + setting.toString();                     }                 };             }         };","return groupSetting(key, dynamic, scope, (s) -> true);"
225,7a49cd1287454dd3a7e7f8fce24f8d9cca9ef585,687aadef00b87b369ca935a1514e37a7b679609c,0b0a2513436c8a4bdec5b238fe360a66e0825319,Sun Mar 06 22:29:56 CET 2016,core/src/main/java/org/elasticsearch/common/cli/Terminal.java,private static final PrintWriter writer = new PrintWriter(System.out);,private final PrintWriter writer = newWriter();
226,7a49cd1287454dd3a7e7f8fce24f8d9cca9ef585,687aadef00b87b369ca935a1514e37a7b679609c,0b0a2513436c8a4bdec5b238fe360a66e0825319,Sun Mar 06 22:29:56 CET 2016,core/src/test/java/org/elasticsearch/plugins/PluginCliTests.java,/*         CliToolTestCase.CaptureOutputTerminal terminal = new CliToolTestCase.CaptureOutputTerminal();,MockTerminal terminal = new MockTerminal();
227,c11cf3bf1fec128946f2517b944e3feed27f1f0a,e4031932edaea00b5ec06f6153aa7e02e8f0e74e,29e3443917b56a5015ca1869af612a48ab306e83,Fri Mar 04 12:23:10 CET 2016,core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java,"Setting.dynamicKeySetting(""logger."", LogLevel.INFO.name(), LogLevel::parse,             SettingsProperty.Dynamic, SettingsProperty.ClusterScope);","Setting.prefixKeySetting(""logger."", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);"
228,c11cf3bf1fec128946f2517b944e3feed27f1f0a,e4031932edaea00b5ec06f6153aa7e02e8f0e74e,29e3443917b56a5015ca1869af612a48ab306e83,Fri Mar 04 12:23:10 CET 2016,core/src/main/java/org/elasticsearch/common/settings/Setting.java,"// They're using the setting, so we need to tell them to stop         if (this.isDeprecated() && this.exists(settings)) {             // It would be convenient to show its replacement key, but replacement is often not so simple             deprecationLogger.deprecated(""[{}] setting was deprecated in Elasticsearch and it will be removed in a future release! "" +                     ""See the breaking changes lists in the documentation for details"", getKey());         }         return settings.get(key, defaultValue.apply(settings));","return settings.get(getKey(), defaultValue.apply(settings));"
229,c11cf3bf1fec128946f2517b944e3feed27f1f0a,e4031932edaea00b5ec06f6153aa7e02e8f0e74e,29e3443917b56a5015ca1869af612a48ab306e83,Fri Mar 04 12:23:10 CET 2016,core/src/main/java/org/elasticsearch/common/settings/Setting.java,"builder.field(""key"", key);         builder.field(""properties"", properties);","builder.field(""key"", key.toString());         builder.field(""type"", scope.name());         builder.field(""dynamic"", dynamic);"
230,c11cf3bf1fec128946f2517b944e3feed27f1f0a,e4031932edaea00b5ec06f6153aa7e02e8f0e74e,29e3443917b56a5015ca1869af612a48ab306e83,Fri Mar 04 12:23:10 CET 2016,core/src/main/java/org/elasticsearch/common/settings/Setting.java,"public static Setting<Settings> groupSetting(String key, boolean dynamic, Scope scope) {         return new Setting<Settings>(new GroupKey(key), (s) -> """", (s) -> null, dynamic, scope) {             @Override             public boolean isGroupSetting() {                 return true;             }             @Override             public Settings get(Settings settings) {                 return settings.getByPrefix(getKey());             }             @Override             public AbstractScopedSettings.SettingUpdater<Settings> newUpdater(Consumer<Settings> consumer, ESLogger logger, Consumer<Settings> validator) {                 if (isDynamic() == false) {                     throw new IllegalStateException(""setting ["" + getKey() + ""] is not dynamic"");                 }                 final Setting<?> setting = this;                 return new AbstractScopedSettings.SettingUpdater<Settings>() {                     @Override                     public boolean hasChanged(Settings current, Settings previous) {                         Settings currentSettings = get(current);                         Settings previousSettings = get(previous);                         return currentSettings.equals(previousSettings) == false;                     }                     @Override                     public Settings getValue(Settings current, Settings previous) {                         Settings currentSettings = get(current);                         Settings previousSettings = get(previous);                         try {                             validator.accept(currentSettings);                         } catch (Exception | AssertionError e) {                             throw new IllegalArgumentException(""illegal value can't update ["" + key + ""] from ["" + previousSettings.getAsMap() + ""] to ["" + currentSettings.getAsMap() + ""]"", e);                         }                         return currentSettings;                     }                     @Override                     public void apply(Settings value, Settings current, Settings previous) {                         logger.info(""updating [{}] from [{}] to [{}]"", key, getRaw(previous), getRaw(current));                         consumer.accept(value);                     }                     @Override                     public String toString() {                         return ""Updater for: "" + setting.toString();                     }                 };             }         };     }","public static Setting<Settings> groupSetting(String key, SettingsProperty... properties) {         if (key.endsWith(""."") == false) {             throw new IllegalArgumentException(""key must end with a '.'"");         }         return new Setting<Settings>(key, """", (s) -> null, properties) {             @Override             public boolean isGroupSetting() {                 return true;             }             @Override             public Settings get(Settings settings) {                 return settings.getByPrefix(key);             }             @Override             public boolean match(String toTest) {                 return Regex.simpleMatch(key + ""*"", toTest);             }             @Override             public AbstractScopedSettings.SettingUpdater<Settings> newUpdater(Consumer<Settings> consumer, ESLogger logger, Consumer<Settings> validator) {                 if (isDynamic() == false) {                     throw new IllegalStateException(""setting ["" + getKey() + ""] is not dynamic"");                 }                 final Setting<?> setting = this;                 return new AbstractScopedSettings.SettingUpdater<Settings>() {                     @Override                     public boolean hasChanged(Settings current, Settings previous) {                         Settings currentSettings = get(current);                         Settings previousSettings = get(previous);                         return currentSettings.equals(previousSettings) == false;                     }                     @Override                     public Settings getValue(Settings current, Settings previous) {                         Settings currentSettings = get(current);                         Settings previousSettings = get(previous);                         try {                             validator.accept(currentSettings);                         } catch (Exception | AssertionError e) {                             throw new IllegalArgumentException(""illegal value can't update ["" + key + ""] from ["" + previousSettings.getAsMap() + ""] to ["" + currentSettings.getAsMap() + ""]"", e);                         }                         return currentSettings;                     }                     @Override                     public void apply(Settings value, Settings current, Settings previous) {                         logger.info(""updating [{}] from [{}] to [{}]"", key, getRaw(previous), getRaw(current));                         consumer.accept(value);                     }                     @Override                     public String toString() {                         return ""Updater for: "" + setting.toString();                     }                 };             }         };     }"
231,c11cf3bf1fec128946f2517b944e3feed27f1f0a,e4031932edaea00b5ec06f6153aa7e02e8f0e74e,29e3443917b56a5015ca1869af612a48ab306e83,Fri Mar 04 12:23:10 CET 2016,core/src/main/java/org/elasticsearch/common/settings/Setting.java,"public static Setting<TimeValue> timeSetting(String key, Function<Settings, String> defaultValue, TimeValue minValue, boolean dynamic, Scope scope) {         return new Setting<>(key, defaultValue, (s) -> parseTimeValue(s, minValue, key), dynamic, scope);     }","public static Setting<TimeValue> timeSetting(String key, Function<Settings, String> defaultValue, TimeValue minValue,                                                  SettingsProperty... properties) {         return new Setting<>(key, defaultValue, (s) -> {             TimeValue timeValue = TimeValue.parseTimeValue(s, null, key);             if (timeValue.millis() < minValue.millis()) {                 throw new IllegalArgumentException(""Failed to parse value ["" + s + ""] for setting ["" + key + ""] must be >= "" + minValue);             }             return timeValue;         }, properties);     }"
232,c11cf3bf1fec128946f2517b944e3feed27f1f0a,e4031932edaea00b5ec06f6153aa7e02e8f0e74e,29e3443917b56a5015ca1869af612a48ab306e83,Fri Mar 04 12:23:10 CET 2016,core/src/test/java/org/elasticsearch/common/settings/SettingTests.java,"public void testDynamicKeySetting() {         Setting<Boolean> setting = Setting.dynamicKeySetting(""foo."", ""false"", Boolean::parseBoolean, SettingsProperty.ClusterScope);         assertTrue(setting.hasComplexMatcher());         assertTrue(setting.match(""foo.bar""));         assertFalse(setting.match(""foo""));         Setting<Boolean> concreteSetting = setting.getConcreteSetting(""foo.bar"");         assertTrue(concreteSetting.get(Settings.builder().put(""foo.bar"", ""true"").build()));         assertFalse(concreteSetting.get(Settings.builder().put(""foo.baz"", ""true"").build()));         try {             setting.getConcreteSetting(""foo"");             fail();         } catch (IllegalArgumentException ex) {             assertEquals(""key must match setting but didn't [foo]"", ex.getMessage());         }     }","public void testPrefixKeySetting() {         Setting<Boolean> setting = Setting.prefixKeySetting(""foo."", ""false"", Boolean::parseBoolean, false, Setting.Scope.CLUSTER);         assertTrue(setting.hasComplexMatcher());         assertTrue(setting.match(""foo.bar""));         assertFalse(setting.match(""foo""));         Setting<Boolean> concreteSetting = setting.getConcreteSetting(""foo.bar"");         assertTrue(concreteSetting.get(Settings.builder().put(""foo.bar"", ""true"").build()));         assertFalse(concreteSetting.get(Settings.builder().put(""foo.baz"", ""true"").build()));         try {             setting.getConcreteSetting(""foo"");             fail();         } catch (IllegalArgumentException ex) {             assertEquals(""key [foo] must match [foo.] but didn't."", ex.getMessage());         }     }"
233,5fbf1b95dc4e0e0c71f393eeeeefa171fda11a6f,cadd8664bbf98f8fd00df098d2f405040e61f269,82567f1bdf578c0f1128f0f4a457b8ba6269e7ce,Wed Mar 02 09:43:53 CET 2016,core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java,"new Setting<>(""logger.level"", LogLevel.INFO.name(), LogLevel::parse, SettingsProperty.ClusterScope);","new Setting<>(""logger.level"", LogLevel.INFO.name(), LogLevel::parse, false, Setting.Scope.CLUSTER);"
234,5fbf1b95dc4e0e0c71f393eeeeefa171fda11a6f,cadd8664bbf98f8fd00df098d2f405040e61f269,82567f1bdf578c0f1128f0f4a457b8ba6269e7ce,Wed Mar 02 09:43:53 CET 2016,core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java,"public static final Setting<Integer> SETTING_HTTP_PUBLISH_PORT =         Setting.intSetting(""http.publish_port"", 0, 0, SettingsProperty.ClusterScope);","public static final Setting<Integer> SETTING_HTTP_PUBLISH_PORT = Setting.intSetting(""http.publish_port"", -1, -1, false, Scope.CLUSTER);"
235,aecf51cb42ea1abf1399989a23cae296542bfe6c,a7053afdb962b2e710cc1b1c1d2dff3b99658a83,79820ea94202c1fdf7cdc0cdefd7eddb9d0254c0,Tue Mar 01 17:20:15 CET 2016,core/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java,termSuggestion(suggestField).field(suggestField)                         .text(suggestText).size(suggestSize)                         .suggestMode(SuggestMode.resolve(suggestMode))));             modified = true;,termSuggestion(suggestField).field(suggestField).text(suggestText).size(suggestSize).suggestMode(suggestMode)));
236,c38119bae9a134953743d1030e92632acba6ec30,821a20f582ea70e9452323f782dcc21cfa9a3fa2,ba5be0332dbf28a3fa4b0e73d4222a1da39b5dfe,Fri Feb 26 22:59:54 CET 2016,core/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java,"SearchRequest searchRequest = new SearchRequest();         RestSearchAction.parseSearchRequest(searchRequest, queryRegistry, request, parseFieldMatcher, null);","SearchRequest searchRequest;         searchRequest = RestSearchAction.parseSearchRequest(queryRegistry, request, parseFieldMatcher, aggParsers);"
237,c38119bae9a134953743d1030e92632acba6ec30,821a20f582ea70e9452323f782dcc21cfa9a3fa2,ba5be0332dbf28a3fa4b0e73d4222a1da39b5dfe,Fri Feb 26 22:59:54 CET 2016,core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java,"public SearchSourceBuilder fromXContent(XContentParser parser, QueryParseContext context) throws IOException {         SearchSourceBuilder builder = new SearchSourceBuilder();         builder.parseXContent(parser, context);         return builder;     }","public SearchSourceBuilder fromXContent(XContentParser parser, QueryParseContext context, AggregatorParsers aggParsers)             throws IOException {         SearchSourceBuilder builder = new SearchSourceBuilder();         XContentParser.Token token = parser.currentToken();         String currentFieldName = null;         if (token != XContentParser.Token.START_OBJECT && (token = parser.nextToken()) != XContentParser.Token.START_OBJECT) {             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.START_OBJECT + ""] but found ["" + token + ""]"",                     parser.getTokenLocation());         }         while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {             if (token == XContentParser.Token.FIELD_NAME) {                 currentFieldName = parser.currentName();             } else if (token.isValue()) {                 if (context.parseFieldMatcher().match(currentFieldName, FROM_FIELD)) {                     builder.from = parser.intValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, SIZE_FIELD)) {                     builder.size = parser.intValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, TIMEOUT_FIELD)) {                     builder.timeoutInMillis = parser.longValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, TERMINATE_AFTER_FIELD)) {                     builder.terminateAfter = parser.intValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, MIN_SCORE_FIELD)) {                     builder.minScore = parser.floatValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, VERSION_FIELD)) {                     builder.version = parser.booleanValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, EXPLAIN_FIELD)) {                     builder.explain = parser.booleanValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, TRACK_SCORES_FIELD)) {                     builder.trackScores = parser.booleanValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {                     builder.fetchSourceContext = FetchSourceContext.parse(parser, context);                 } else if (context.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) {                     List<String> fieldNames = new ArrayList<>();                     fieldNames.add(parser.text());                     builder.fieldNames = fieldNames;                 } else if (context.parseFieldMatcher().match(currentFieldName, SORT_FIELD)) {                     builder.sort(parser.text());                 } else if (context.parseFieldMatcher().match(currentFieldName, PROFILE_FIELD)) {                     builder.profile = parser.booleanValue();                 } else {                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                             parser.getTokenLocation());                 }             } else if (token == XContentParser.Token.START_OBJECT) {                 if (context.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {                     builder.queryBuilder = context.parseInnerQueryBuilder();                 } else if (context.parseFieldMatcher().match(currentFieldName, POST_FILTER_FIELD)) {                     builder.postQueryBuilder = context.parseInnerQueryBuilder();                 } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {                     builder.fetchSourceContext = FetchSourceContext.parse(parser, context);                 } else if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELDS_FIELD)) {                     List<ScriptField> scriptFields = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                         String scriptFieldName = parser.currentName();                         token = parser.nextToken();                         if (token == XContentParser.Token.START_OBJECT) {                             Script script = null;                             boolean ignoreFailure = false;                             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                                 if (token == XContentParser.Token.FIELD_NAME) {                                     currentFieldName = parser.currentName();                                 } else if (token.isValue()) {                                     if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELD)) {                                         script = Script.parse(parser, context.parseFieldMatcher());                                     } else if (context.parseFieldMatcher().match(currentFieldName, IGNORE_FAILURE_FIELD)) {                                         ignoreFailure = parser.booleanValue();                                     } else {                                         throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName                                                 + ""]."", parser.getTokenLocation());                                     }                                 } else if (token == XContentParser.Token.START_OBJECT) {                                     if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELD)) {                                         script = Script.parse(parser, context.parseFieldMatcher());                                     } else {                                         throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName                                                 + ""]."", parser.getTokenLocation());                                     }                                 } else {                                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName                                             + ""]."", parser.getTokenLocation());                                 }                             }                             scriptFields.add(new ScriptField(scriptFieldName, script, ignoreFailure));                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.START_OBJECT + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.scriptFields = scriptFields;                 } else if (context.parseFieldMatcher().match(currentFieldName, INDICES_BOOST_FIELD)) {                     ObjectFloatHashMap<String> indexBoost = new ObjectFloatHashMap<String>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                         if (token == XContentParser.Token.FIELD_NAME) {                             currentFieldName = parser.currentName();                         } else if (token.isValue()) {                             indexBoost.put(currentFieldName, parser.floatValue());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                                     parser.getTokenLocation());                         }                     }                     builder.indexBoost = indexBoost;                 } else if (context.parseFieldMatcher().match(currentFieldName, AGGREGATIONS_FIELD)) {                     builder.aggregations = aggParsers.parseAggregators(parser, context);                 } else if (context.parseFieldMatcher().match(currentFieldName, HIGHLIGHT_FIELD)) {                     builder.highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context);                 } else if (context.parseFieldMatcher().match(currentFieldName, INNER_HITS_FIELD)) {                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     builder.innerHitsBuilder = xContentBuilder.bytes();                 } else if (context.parseFieldMatcher().match(currentFieldName, SUGGEST_FIELD)) {                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     builder.suggestBuilder = xContentBuilder.bytes();                 } else if (context.parseFieldMatcher().match(currentFieldName, SORT_FIELD)) {                     List<BytesReference> sorts = new ArrayList<>();                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     sorts.add(xContentBuilder.bytes());                     builder.sorts = sorts;                 } else if (context.parseFieldMatcher().match(currentFieldName, EXT_FIELD)) {                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     builder.ext = xContentBuilder.bytes();                 } else {                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                             parser.getTokenLocation());                 }             } else if (token == XContentParser.Token.START_ARRAY) {                 if (context.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) {                     List<String> fieldNames = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         if (token == XContentParser.Token.VALUE_STRING) {                             fieldNames.add(parser.text());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.VALUE_STRING + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.fieldNames = fieldNames;                 } else if (context.parseFieldMatcher().match(currentFieldName, FIELDDATA_FIELDS_FIELD)) {                     List<String> fieldDataFields = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         if (token == XContentParser.Token.VALUE_STRING) {                             fieldDataFields.add(parser.text());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.VALUE_STRING + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.fieldDataFields = fieldDataFields;                 } else if (context.parseFieldMatcher().match(currentFieldName, SORT_FIELD)) {                     List<BytesReference> sorts = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                         sorts.add(xContentBuilder.bytes());                     }                     builder.sorts = sorts;                 } else if (context.parseFieldMatcher().match(currentFieldName, RESCORE_FIELD)) {                     List<RescoreBuilder<?>> rescoreBuilders = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         rescoreBuilders.add(RescoreBuilder.parseFromXContent(context));                     }                     builder.rescoreBuilders = rescoreBuilders;                 } else if (context.parseFieldMatcher().match(currentFieldName, STATS_FIELD)) {                     List<String> stats = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         if (token == XContentParser.Token.VALUE_STRING) {                             stats.add(parser.text());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.VALUE_STRING + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.stats = stats;                 } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {                     builder.fetchSourceContext = FetchSourceContext.parse(parser, context);                 } else if (context.parseFieldMatcher().match(currentFieldName, SEARCH_AFTER)) {                     builder.searchAfterBuilder = SearchAfterBuilder.PROTOTYPE.fromXContent(parser, context.parseFieldMatcher());                 } else {                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                             parser.getTokenLocation());                 }             } else {                 throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                         parser.getTokenLocation());             }         }         return builder;     }"
238,09df7379c59e75ff27cdef087748579a64a79617,551e6bd66f542f99d261b22e01011066ec007e83,80fc0496bb2faf7ecba844a971dea4a20e8c7c3f,Thu Feb 25 22:05:27 CET 2016,core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java,"// will result in START_OBJECT             XContentParser.Token token = parser.nextToken();             if (token != XContentParser.Token.START_OBJECT) {                 throw new MapperParsingException(""Malformed content, must start with an object"");             }             boolean emptyDoc = false;             if (mapping.root.isEnabled()) {                 token = parser.nextToken();                 if (token == XContentParser.Token.END_OBJECT) {                     // empty doc, we can handle it...                     emptyDoc = true;                 } else if (token != XContentParser.Token.FIELD_NAME) {                     throw new MapperParsingException(""Malformed content, after first object, either the type field or the actual properties should exist"");                 }             }             for (MetadataFieldMapper metadataMapper : mapping.metadataMappers) {                 metadataMapper.preParse(context);             }             if (mapping.root.isEnabled() == false) {                 // entire type is disabled                 parser.skipChildren();             } else if (emptyDoc == false) {                 parseObjectOrNested(context, mapping.root, true);             }             for (MetadataFieldMapper metadataMapper : mapping.metadataMappers) {                 metadataMapper.postParse(context);             }             // try to parse the next token, this should be null if the object is ended properly             // but will throw a JSON exception if the extra tokens is not valid JSON (this will be handled by the catch)             if (source.parser() == null && parser != null) {                 // only check for end of tokens if we created the parser here                 token = parser.nextToken();                 if (token != null) {                     throw new IllegalArgumentException(""Malformed content, found extra data after parsing: "" + token);                 }             }         } catch (Throwable e) {             // if its already a mapper parsing exception, no need to wrap it...             if (e instanceof MapperParsingException) {                 throw (MapperParsingException) e;             }             // Throw a more meaningful message if the document is empty.             if (source.source() != null && source.source().length() == 0) {                 throw new MapperParsingException(""failed to parse, document is empty"");             }             throw new MapperParsingException(""failed to parse"", e);","validateStart(parser);             internalParseDocument(mapping, context, parser);             validateEnd(source, parser);         } catch (Throwable t) {             throw wrapInMapperParsingException(source, t);"
239,09df7379c59e75ff27cdef087748579a64a79617,551e6bd66f542f99d261b22e01011066ec007e83,80fc0496bb2faf7ecba844a971dea4a20e8c7c3f,Thu Feb 25 22:05:27 CET 2016,core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java,"Mapping update = createDynamicUpdate(mapping, docMapper, context.getDynamicMappers());         ParsedDocument doc = new ParsedDocument(context.uid(), context.version(), context.id(), context.type(), source.routing(), source.timestamp(), source.ttl(), context.docs(),             context.source(), update).parent(source.parent());","reverseOrder(context);         applyDocBoost(context);         ParsedDocument doc = parsedDocument(source, context, update(context, mapping));"
240,1a46628daaea0a0a55649bb557976e2c9ef63733,c3d652030cae3d74a5006eedb2dce1b9c5ce3bd8,11ce624343f994efc22da7599a36131f4b0bbf08,Mon Feb 15 11:37:16 CET 2016,core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java,"SearchSourceBuilder newBuilder = SearchSourceBuilder.parseSearchSource(parser, parseContext, aggParsers);         assertNotSame(testBuilder, newBuilder);","SearchSourceBuilder newBuilder = SearchSourceBuilder.parseSearchSource(parser, parseContext);         assertNull(parser.nextToken());"
241,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java,"shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(),                             new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats(), indexShard.seqNoStats()));","shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));"
242,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java,"return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(),                 new CommonStats(indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats());","return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, flags), indexShard.commitStats());"
243,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java,seqNo = in.readVLong();         primaryTerm = in.readVLong();,routedBasedOnClusterVersion = in.readVLong();
244,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java,out.writeVLong(seqNo);         out.writeVLong(primaryTerm);,out.writeVLong(routedBasedOnClusterVersion);
245,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"try (Releasable ignored = getIndexShardOperationsCounterOnReplica(request.shardId(), request.primaryTerm)) {",try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId())) {
246,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,final ReplicationPhase replicationPhase;             try {                 indexShardReference = getIndexShardOperationsCounterOnPrimary(shardId);,// closed in finishAsFailed(e) in the case of error             indexShardReference = getIndexShardReferenceOnPrimary(shardId);             if (indexShardReference.isRelocated() == false) {                 // execute locally
247,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"if (logger.isTraceEnabled()) {                     logger.trace(""finished replicating action [{}], request [{}]"", actionName, replicaRequest);                 }","setPhase(task, ""finished"");"
248,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java,"if (primaryTerms == null) {                 initializePrimaryTerms();             } else if (primaryTerms.length != numberOfShards) {                 throw new IllegalStateException(""primaryTerms length is ["" + primaryTerms.length                     + ""] but should be equal to number of shards ["" + numberOfShards() + ""]"");             }             return new IndexMetaData(index, version, primaryTerms, state, numberOfShards, numberOfReplicas, tmpSettings, mappings.build(),","final String uuid = settings.get(SETTING_INDEX_UUID, INDEX_UUID_NA_VALUE);             return new IndexMetaData(new Index(index, uuid), version, state, numberOfShards, numberOfReplicas, tmpSettings, mappings.build(),"
249,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java,"final long primaryTerm = indexMetaData.primaryTerm(shardId);                 IndexShardRoutingTable.Builder indexShardRoutingBuilder = new IndexShardRoutingTable.Builder(new ShardId(indexMetaData.getIndex(), shardId));","IndexShardRoutingTable.Builder indexShardRoutingBuilder = new IndexShardRoutingTable.Builder(new ShardId(index, shardId));"
250,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java,"indicesRouting.put(indexRoutingTable.value.index(), indexRoutingTable.value.normalizeVersionsAndPrimaryTerms());","indicesRouting.put(indexRoutingTable.value.getIndex().getName(), indexRoutingTable.value);"
251,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java,"this(copy, copy.version(), copy.primaryTerm());","this(copy.index(), copy.id(), copy.currentNodeId(), copy.relocatingNodeId(), copy.restoreSource(), copy.primary(), copy.state(), copy.unassignedInfo(), copy.allocationId(), true, copy.getExpectedShardSize());"
252,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java,"seqNoService = new SequenceNumbersService(shardId, engineConfig.getIndexSettings());             mergeScheduler = scheduler = new EngineMergeScheduler(engineConfig.getShardId(), engineConfig.getIndexSettings(), engineConfig.getMergeSchedulerConfig());","mergeScheduler = scheduler = new EngineMergeScheduler(engineConfig.getShardId(), engineConfig.getIndexSettings());"
253,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"public IndexShard relocated(String reason) throws IndexShardNotStartedException, InterruptedException {","public IndexShard relocated(String reason) throws IndexShardNotStartedException {         try (Releasable block = suspendableRefContainer.blockAcquisition()) {             // no shard operation locks are being held here, move state from started to relocated"
254,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"logger.info(""waiting for op count to reach 0"");         while (indexShardOperationCounter.refCount() > 0) {             Thread.sleep(100);         }         logger.info(""{} waiting for op count reached 0. continuing..."");",}
255,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/indices/IndicesService.java,"IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId()                             new ShardStats[]{new ShardStats(indexShard.routingEntry(), indexShard.shardPath(),                                     new CommonStats(indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats())});","IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[] { new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesQueryCache, indexShard, flags), indexShard.commitStats()) });"
256,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java,"if (request.markAsRelocated() || request.recoveryType() == RecoveryState.Type.RELOCATION) {             // TODO what happens if the recovery process fails afterwards, we need to mark this back to started","if (isPrimaryRelocation()) {             /**              * if the recovery process fails after setting the shard state to RELOCATED, both relocation source and              * target are failed (see {@link IndexShard#updateRoutingEntry}).              */"
257,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java,"// to move be closed by the time we get to the the relocated method             } catch (InterruptedException e) {                 throw new ElasticsearchException(""interrupted while waiting for pending operation to finish on relocated primary"", e);",// to move be closed by the time we get to the relocated method
258,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java,"final ShardRouting routing = TestShardRouting.newShardRouting(""test"", 0, ""xyz"", ""def"", 1, false, ShardRoutingState.STARTED, 0);","final ShardRouting routing = TestShardRouting.newShardRouting(""test"", 0, ""xyz"", ""def"", false, ShardRoutingState.STARTED);"
259,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/action/admin/indices/flush/SyncedFlushUnitTests.java,"1, copy == 0, ShardRoutingState.STARTED, 0);","copy == 0, ShardRoutingState.STARTED);"
260,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeActionTests.java,"final ShardId shardId = new ShardId(index, ++shardIndex);                 final int primaryTerm = randomInt(200);                 ShardRouting shard = TestShardRouting.newShardRouting(index, shardId.getId(), node.id(), primaryTerm, true, ShardRoutingState.STARTED, 1);","final ShardId shardId = new ShardId(index, ""_na_"", ++shardIndex);                 ShardRouting shard = TestShardRouting.newShardRouting(index, shardId.getId(), node.id(), true, ShardRoutingState.STARTED);"
261,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/action/support/replication/ClusterStateCreationUtils.java,IndexRoutingTable.Builder indexRoutingTableBuilder = IndexRoutingTable.builder(index);         final int primaryTerm = randomInt(200);,IndexRoutingTable.Builder indexRoutingTableBuilder = IndexRoutingTable.builder(indexMetaData.getIndex());
262,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java,"assertThat(indexMetaData.primaryTerm(0), equalTo(2l));         assertThat(indexMetaData.primaryTerm(1), equalTo(2l));         assertThat(indexMetaData.getCreationDate(), equalTo(-1l));","assertThat(indexMetaData.getCreationDate(), equalTo(-1L));"
263,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java,"ShardRouting shard = ShardRouting.newUnassigned(""test"", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));","ShardRouting shard = ShardRouting.newUnassigned(new Index(""test"",""_na_""), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));"
264,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java,"ShardRouting shard = ShardRouting.newUnassigned(""test"", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));         shard.initialize(""node1"", -1);","ShardRouting shard = ShardRouting.newUnassigned(new Index(""test"",""_na_""), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));         shard.initialize(""node1"", null, -1);"
265,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/ShardRoutingHelper.java,"return new ShardRouting(routing.index(), routing.shardId().id(), routing.currentNodeId(), routing.relocatingNodeId(), restoreSource, routing.primaryTerm(), routing.primary(), routing.state(), routing.version(), routing.unassignedInfo(), routing.allocationId(), true, routing.getExpectedShardSize());","return new ShardRouting(routing.index(), routing.shardId().id(), routing.currentNodeId(), routing.relocatingNodeId(), restoreSource, routing.primary(), routing.state(), routing.unassignedInfo(), routing.allocationId(), true, routing.getExpectedShardSize());"
266,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/ShardRoutingTests.java,"long term = randomInt(200);         ShardRouting routing = TestShardRouting.newShardRouting(""foo"", 1, ""node_1"", null, null, term, false, ShardRoutingState.INITIALIZING, 1);","ShardRouting routing = TestShardRouting.newShardRouting(""foo"", 1, ""node_1"", null, null, false, ShardRoutingState.INITIALIZING);"
267,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/UnassignedInfoTests.java,"ShardRouting shard = TestShardRouting.newShardRouting(""test"", 1, null, null, null, 1, true, ShardRoutingState.UNASSIGNED, 1, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));","ShardRouting shard = TestShardRouting.newShardRouting(""test"", 1, null, null, null, true, ShardRoutingState.UNASSIGNED, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));"
268,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/CatAllocationTestCase.java,"ShardRouting routing = TestShardRouting.newShardRouting(index, shard, ip, null, null, 1, primary, state, 1);","ShardRouting routing = TestShardRouting.newShardRouting(index, shard, ip, null, null, primary, state);"
269,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/NodeVersionAllocationDeciderTests.java,".addShard(TestShardRouting.newShardRouting(shard1.getIndex(), shard1.getId(), newNode.id(), 1, true, ShardRoutingState.STARTED, 10))                     .addShard(TestShardRouting.newShardRouting(shard1.getIndex(), shard1.getId(), oldNode1.id(), 1, false, ShardRoutingState.STARTED, 10))",".addShard(TestShardRouting.newShardRouting(shard1.getIndexName(), shard1.getId(), newNode.id(), true, ShardRoutingState.STARTED))                     .addShard(TestShardRouting.newShardRouting(shard1.getIndexName(), shard1.getId(), oldNode1.id(), false, ShardRoutingState.STARTED))"
270,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/NodeVersionAllocationDeciderTests.java,".addShard(TestShardRouting.newShardRouting(shard2.getIndex(), shard2.getId(), newNode.id(), 1, true, ShardRoutingState.STARTED, 10))                     .addShard(TestShardRouting.newShardRouting(shard2.getIndex(), shard2.getId(), oldNode1.id(), 1, false, ShardRoutingState.STARTED, 10))",".addShard(TestShardRouting.newShardRouting(shard2.getIndexName(), shard2.getId(), newNode.id(), true, ShardRoutingState.STARTED))                     .addShard(TestShardRouting.newShardRouting(shard2.getIndexName(), shard2.getId(), oldNode1.id(), false, ShardRoutingState.STARTED))"
271,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/StartedShardsRoutingTests.java,"final ShardRouting initShard;         final ShardRouting startedShard;         final ShardRouting relocatingShard;         final IndexRoutingTable.Builder indexRoutingTable = IndexRoutingTable.builder(""test"");         if (randomBoolean()) {             initShard = TestShardRouting.newShardRouting(""test"", 0, ""node1"", 1, true, ShardRoutingState.INITIALIZING, 1);             ShardRouting replica = TestShardRouting.newShardRouting(""test"", 0, null, 1, false, ShardRoutingState.UNASSIGNED, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(initShard.shardId()).addShard(initShard).addShard(replica).build());         } else {             ShardRouting primaryShard = TestShardRouting.newShardRouting(""test"", 0, ""node2"", 1, true, ShardRoutingState.STARTED, 1);             initShard = TestShardRouting.newShardRouting(""test"", 0, ""node1"", 1, false, ShardRoutingState.INITIALIZING, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(initShard.shardId()).addShard(primaryShard).addShard(initShard).build());         }         if (randomBoolean()) {             startedShard = TestShardRouting.newShardRouting(""test"", 1, ""node2"", 1, true, ShardRoutingState.STARTED, 1);             ShardRouting replica = TestShardRouting.newShardRouting(""test"", 1, null, 1, false, ShardRoutingState.UNASSIGNED, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(startedShard.shardId()).addShard(startedShard).addShard(replica).build());         } else {             ShardRouting primaryShard = TestShardRouting.newShardRouting(""test"", 1, ""node1"", 1, true, ShardRoutingState.STARTED, 1);             startedShard = TestShardRouting.newShardRouting(""test"", 1, ""node2"", 1, false, ShardRoutingState.STARTED, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(startedShard.shardId()).addShard(primaryShard).addShard(startedShard).build());         }         if (randomBoolean()) {             relocatingShard = TestShardRouting.newShardRouting(""test"", 2, ""node1"", ""node2"", 1, true, ShardRoutingState.RELOCATING, 1);             ShardRouting replica = TestShardRouting.newShardRouting(""test"", 2, null, 1, false, ShardRoutingState.UNASSIGNED, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(relocatingShard.shardId()).addShard(relocatingShard).addShard(replica).build());         } else {             ShardRouting primaryShard = TestShardRouting.newShardRouting(""test"", 2, ""node3"", 1, true, ShardRoutingState.STARTED, 1);             relocatingShard = TestShardRouting.newShardRouting(""test"", 2, ""node1"", ""node2"", 1, false, ShardRoutingState.RELOCATING, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(relocatingShard.shardId())                     .addShard(primaryShard).addShard(relocatingShard).build());         }         stateBuilder.routingTable(RoutingTable.builder().add(indexRoutingTable).build());","final ShardRouting initShard = TestShardRouting.newShardRouting(index, 0, ""node1"", true, ShardRoutingState.INITIALIZING);         final ShardRouting startedShard = TestShardRouting.newShardRouting(index, 1, ""node2"", true, ShardRoutingState.STARTED);         final ShardRouting relocatingShard = TestShardRouting.newShardRouting(index, 2, ""node1"", ""node2"", true, ShardRoutingState.RELOCATING);         stateBuilder.routingTable(RoutingTable.builder().add(IndexRoutingTable.builder(index)                 .addIndexShard(new IndexShardRoutingTable.Builder(initShard.shardId()).addShard(initShard).build())                 .addIndexShard(new IndexShardRoutingTable.Builder(startedShard.shardId()).addShard(startedShard).build())                 .addIndexShard(new IndexShardRoutingTable.Builder(relocatingShard.shardId()).addShard(relocatingShard).build())).build());"
272,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/StartedShardsRoutingTests.java,"TestShardRouting.newShardRouting(initShard.index(), initShard.id(), initShard.currentNodeId(), initShard.relocatingNodeId(),                         initShard.primaryTerm(), initShard.primary(),                         ShardRoutingState.INITIALIZING, initShard.allocationId(), randomInt())), false);","TestShardRouting.newShardRouting(initShard.index(), initShard.id(), initShard.currentNodeId(), initShard.relocatingNodeId(), initShard.primary(),                         ShardRoutingState.INITIALIZING, initShard.allocationId())), false);"
273,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/StartedShardsRoutingTests.java,"TestShardRouting.newShardRouting(startedShard.index(), startedShard.id(), startedShard.currentNodeId(), startedShard.relocatingNodeId(),                         startedShard.primaryTerm(), startedShard.primary(),                         ShardRoutingState.INITIALIZING, startedShard.allocationId(), 1)), false);","TestShardRouting.newShardRouting(startedShard.index(), startedShard.id(), startedShard.currentNodeId(), startedShard.relocatingNodeId(), startedShard.primary(),                         ShardRoutingState.INITIALIZING, startedShard.allocationId())), false);"
274,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java,"ShardRouting firstRouting = TestShardRouting.newShardRouting(""test"", 0, ""node1"", null, null, 1, true, ShardRoutingState.STARTED, 1);         ShardRouting secondRouting = TestShardRouting.newShardRouting(""test"", 1, ""node1"", null, null, 1, true, ShardRoutingState.STARTED, 1);","ShardRouting firstRouting = TestShardRouting.newShardRouting(""test"", 0, ""node1"", null, null, true, ShardRoutingState.STARTED);         ShardRouting secondRouting = TestShardRouting.newShardRouting(""test"", 1, ""node1"", null, null, true, ShardRoutingState.STARTED);"
275,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java,"firstRouting = TestShardRouting.newShardRouting(""test"", 0, ""node1"", null, null, 1, true, ShardRoutingState.STARTED, 1);         secondRouting = TestShardRouting.newShardRouting(""test"", 1, ""node1"", ""node2"", null, 1, true, ShardRoutingState.RELOCATING, 1);","firstRouting = TestShardRouting.newShardRouting(""test"", 0, ""node1"", null, null, true, ShardRoutingState.STARTED);         secondRouting = TestShardRouting.newShardRouting(""test"", 1, ""node1"", ""node2"", null, true, ShardRoutingState.RELOCATING);"
276,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java,"ShardRouting firstRouting = TestShardRouting.newShardRouting(""test"", 0, ""node2"", null, null, 1, true, ShardRoutingState.STARTED, 1);         ShardRouting secondRouting = TestShardRouting.newShardRouting(""test"", 1, ""node2"", null, null, 1, true, ShardRoutingState.STARTED, 1);","ShardRouting firstRouting = TestShardRouting.newShardRouting(""test"", 0, ""node2"", null, null, true, ShardRoutingState.STARTED);         ShardRouting secondRouting = TestShardRouting.newShardRouting(""test"", 1, ""node2"", null, null, true, ShardRoutingState.STARTED);"
277,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java,"firstRouting = TestShardRouting.newShardRouting(""test"", 0, ""node2"", null, null, 1, true, ShardRoutingState.STARTED, 1);         secondRouting = TestShardRouting.newShardRouting(""test"", 1, ""node2"", ""node3"", null, 1, true, ShardRoutingState.RELOCATING, 1);","firstRouting = TestShardRouting.newShardRouting(""test"", 0, ""node2"", null, null, true, ShardRoutingState.STARTED);         secondRouting = TestShardRouting.newShardRouting(""test"", 1, ""node2"", ""node3"", null, true, ShardRoutingState.RELOCATING);"
278,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java,"ShardRouting test_0 = ShardRouting.newUnassigned(""test"", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));","MetaData metaData = MetaData.builder()                 .put(IndexMetaData.builder(""test"").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))                 .build();         final IndexMetaData indexMetaData = metaData.index(""test"");         ShardRouting test_0 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));"
279,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java,"ShardRouting test_1 = ShardRouting.newUnassigned(""test"", 1, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));","ShardRouting test_1 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 1, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));"
280,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java,"ShardRouting test_2 = ShardRouting.newUnassigned(""test"", 2, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));","ShardRouting test_2 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 2, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));"
281,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java,"ShardRouting test_3 = ShardRouting.newUnassigned(""test"", 3, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));","ShardRouting test_3 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 3, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));"
282,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java,"ShardRouting test_0 = ShardRouting.newUnassigned(""test"", 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));","final Index index = new Index(""test"", ""_na_"");         ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));"
283,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java,"ShardRouting test_1 = ShardRouting.newUnassigned(""test"", 1, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));","ShardRouting test_1 = ShardRouting.newUnassigned(index, 1, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));"
284,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java,"ShardRouting test_2 = ShardRouting.newUnassigned(""test"", 2, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));","ShardRouting test_2 = ShardRouting.newUnassigned(index, 2, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));"
285,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java,"ShardRouting test_3 = ShardRouting.newUnassigned(""test"", 3, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));","ShardRouting test_3 = ShardRouting.newUnassigned(index, 3, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));"
286,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java,"ShardRouting other_0 = ShardRouting.newUnassigned(""other"", 0, null, 1, randomBoolean(), new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));","ShardRouting other_0 = ShardRouting.newUnassigned(new Index(""other"", ""_NA_""), 0, null, randomBoolean(), new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, ""foo""));"
287,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/gateway/PrimaryShardAllocatorTests.java,"assertShardAllocated(allocation, node1);","assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(), equalTo(true));         assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));         assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(), equalTo(node1.id()));         if (useAllocationIds) {             // check that allocation id is reused             assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).allocationId().getId(), equalTo(""allocId1""));         }"
288,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/gateway/PriorityComparatorTests.java,"1, randomBoolean(), ShardRoutingState.UNASSIGNED, 0, new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")),                 TestShardRouting.newShardRouting(""newest"", 0, null, null, null,                         1, randomBoolean(), ShardRoutingState.UNASSIGNED, 0, new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")));","randomBoolean(), ShardRoutingState.UNASSIGNED, new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")), TestShardRouting.newShardRouting(""newest"", 0, null, null, null,                 randomBoolean(), ShardRoutingState.UNASSIGNED, new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")));"
289,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/gateway/PriorityComparatorTests.java,"List<ShardRouting> shardRoutings = Arrays.asList(TestShardRouting.newShardRouting(""oldest"", 0, null, null, null, 1,                         randomBoolean(), ShardRoutingState.UNASSIGNED, 0, new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")),                 TestShardRouting.newShardRouting(""newest"", 0, null, null, null, 1,                         randomBoolean(), ShardRoutingState.UNASSIGNED, 0, new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")));","List<ShardRouting> shardRoutings = Arrays.asList(TestShardRouting.newShardRouting(""oldest"", 0, null, null, null,                 randomBoolean(), ShardRoutingState.UNASSIGNED, new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")), TestShardRouting.newShardRouting(""newest"", 0, null, null, null,                 randomBoolean(), ShardRoutingState.UNASSIGNED, new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")));"
290,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/gateway/PriorityComparatorTests.java,"shards.add(TestShardRouting.newShardRouting(indexMeta.name, randomIntBetween(1, 5), null, null, null, 1,                     randomBoolean(), ShardRoutingState.UNASSIGNED, randomIntBetween(0, 100),                     new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")));","shards.add(TestShardRouting.newShardRouting(indexMeta.name, randomIntBetween(1, 5), null, null, null,                     randomBoolean(), ShardRoutingState.UNASSIGNED, new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()), ""foobar"")));"
291,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java,"ShardRouting primaryShard = TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node1.id(), 1, true, ShardRoutingState.STARTED, 10);","ShardRouting primaryShard = TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node1.id(), true, ShardRoutingState.STARTED);"
292,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java,".addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node2.id(), null, null, 1, false, ShardRoutingState.INITIALIZING, 10, new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED, null)))",".addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node2.id(), null, null, false, ShardRoutingState.INITIALIZING, new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED, null)))"
293,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"assertThat(create.version(), equalTo(1l));         create = new Engine.Index(newUid(""1""), doc, create.seqNo(), create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);","assertThat(create.version(), equalTo(1L));         create = new Engine.Index(newUid(""1""), doc, create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);"
294,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1l, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0);","index = new Engine.Index(newUid(""1""), doc, 1L, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0);"
295,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"index = new Engine.Index(newUid(""1""), doc, index.seqNo(), 1l, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);","index = new Engine.Index(newUid(""1""), doc, 1L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);"
296,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java,"// test if we don't write it if the shard is not active         ShardRouting inactiveRouting = TestShardRouting.newShardRouting(shard.shardRouting.index(), shard.shardRouting.shardId().id(),                 shard.shardRouting.currentNodeId(), null, null, shard.shardRouting.primaryTerm(), true, ShardRoutingState.INITIALIZING,                 shard.shardRouting.version() + 1);","// test if we still write it even if the shard is not active         ShardRouting inactiveRouting = TestShardRouting.newShardRouting(shard.shardRouting.index(), shard.shardRouting.shardId().id(), shard.shardRouting.currentNodeId(), null, null, true, ShardRoutingState.INITIALIZING);"
297,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java,"ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()),                 shard.commitStats(), shard.seqNoStats());","ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), shard, new CommonStatsFlags()), shard.commitStats());"
298,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerIT.java,import static org.elasticsearch.index.shard.IndexShardState.*;,import static org.elasticsearch.index.shard.IndexShardState.RELOCATED;
299,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/indices/flush/SyncedFlushSingleNodeTests.java,shard.incrementOperationCounterOnPrimary();         try {,try (Releasable operationLock = shard.acquirePrimaryOperationLock()) {
300,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java,"new IndexShardRoutingTable.Builder(new ShardId(""test"", i))                                     .addShard(TestShardRouting.newShardRouting(""test"", i, masterId, 1, true, ShardRoutingState.STARTED, shardVersions[shardIds[i]]))","new IndexShardRoutingTable.Builder(new ShardId(index, i))                                     .addShard(TestShardRouting.newShardRouting(""test"", i, masterId, true, ShardRoutingState.STARTED))"
301,4bb5b4100d0687f29d758ce5a329c831c563ebe5,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,Fri Feb 12 15:53:31 CET 2016,core/src/test/java/org/elasticsearch/indices/store/IndicesStoreTests.java,"IndexShardRoutingTable.Builder routingTable = new IndexShardRoutingTable.Builder(new ShardId(""test"", 1));         final int primaryTerm = randomInt(200);","IndexShardRoutingTable.Builder routingTable = new IndexShardRoutingTable.Builder(new ShardId(""test"", ""_na_"", 1));"
302,eed557742f5db7cd82d22b69a84220cc598fd744,04681ef6165a40192a6e268ca2df861d9d017f47,bbeb09eae7ac3c5d9837bb26eacfac6bba468929,Fri Feb 12 00:30:58 CET 2016,core/src/main/java/org/elasticsearch/search/suggest/SuggestParseElement.java,if (suggestText != null && prefix == null) {                         suggestionContext.setPrefix(suggestText);                         suggestionContext.setText(suggestText);                     } else if (suggestText == null && prefix != null) {                         suggestionContext.setPrefix(prefix);                         suggestionContext.setText(prefix);                     } else if (regex != null) {                         suggestionContext.setRegex(regex);                         suggestionContext.setText(regex);                     }                     suggestionContext.setShardContext(shardContext);,if (suggestText != null) {                         suggestionContext.setText(suggestText);                     }                     if (prefix != null) {                         suggestionContext.setPrefix(prefix);                     }                     if (regex != null) {                         suggestionContext.setRegex(regex);                     }                     if (suggestText != null && prefix == null) {                         suggestionContext.setPrefix(suggestText);                         suggestionContext.setText(suggestText);                     } else if (suggestText == null && prefix != null) {                         suggestionContext.setPrefix(prefix);                         suggestionContext.setText(prefix);                     } else if (regex != null) {                         suggestionContext.setRegex(regex);                         suggestionContext.setText(regex);                     }
303,eed557742f5db7cd82d22b69a84220cc598fd744,04681ef6165a40192a6e268ca2df861d9d017f47,bbeb09eae7ac3c5d9837bb26eacfac6bba468929,Fri Feb 12 00:30:58 CET 2016,core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestParser.java,"final CompletionSuggestionContext suggestion = new CompletionSuggestionContext(completionSuggester, mapperService);",final CompletionSuggestionContext suggestion = new CompletionSuggestionContext(shardContext);
304,eed557742f5db7cd82d22b69a84220cc598fd744,04681ef6165a40192a6e268ca2df861d9d017f47,bbeb09eae7ac3c5d9837bb26eacfac6bba468929,Fri Feb 12 00:30:58 CET 2016,core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java,static final CompletionSuggester PROTOTYPE = new CompletionSuggester();,public static final CompletionSuggester PROTOTYPE = new CompletionSuggester();
305,eed557742f5db7cd82d22b69a84220cc598fd744,04681ef6165a40192a6e268ca2df861d9d017f47,bbeb09eae7ac3c5d9837bb26eacfac6bba468929,Fri Feb 12 00:30:58 CET 2016,core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGeneratorBuilder.java,"transferIfNotNull(this.minWordLength, generator::minWordLength);","transferIfNotNull(this.minWordLength, generator::minQueryLength);"
306,eed557742f5db7cd82d22b69a84220cc598fd744,04681ef6165a40192a6e268ca2df861d9d017f47,bbeb09eae7ac3c5d9837bb26eacfac6bba468929,Fri Feb 12 00:30:58 CET 2016,core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java,static PhraseSuggester PROTOTYPE;,public static final PhraseSuggester PROTOTYPE = new PhraseSuggester();
307,eed557742f5db7cd82d22b69a84220cc598fd744,04681ef6165a40192a6e268ca2df861d9d017f47,bbeb09eae7ac3c5d9837bb26eacfac6bba468929,Fri Feb 12 00:30:58 CET 2016,core/src/main/java/org/elasticsearch/search/suggest/term/TermSuggester.java,static final TermSuggester PROTOTYPE = new TermSuggester();,public static final TermSuggester PROTOTYPE = new TermSuggester();
308,eed557742f5db7cd82d22b69a84220cc598fd744,04681ef6165a40192a6e268ca2df861d9d017f47,bbeb09eae7ac3c5d9837bb26eacfac6bba468929,Fri Feb 12 00:30:58 CET 2016,core/src/test/java/org/elasticsearch/search/suggest/AbstractSuggestionBuilderTestCase.java,"suggesters = new Suggesters(Collections.emptyMap(), scriptService, null);",suggesters = new Suggesters(Collections.emptyMap());
309,eed557742f5db7cd82d22b69a84220cc598fd744,04681ef6165a40192a6e268ca2df861d9d017f47,bbeb09eae7ac3c5d9837bb26eacfac6bba468929,Fri Feb 12 00:30:58 CET 2016,core/src/test/java/org/elasticsearch/search/suggest/AbstractSuggestionBuilderTestCase.java,"suggestBuilder.setText(randomAsciiOfLength(10));             SB suggestionBuilder = randomTestBuilder();             suggestBuilder.addSuggestion(suggestionBuilder);             if (suggestionBuilder.text() == null) {                 // we either need suggestion text or global text                 suggestBuilder.setText(""This is some global Text"");             }             if (suggestionBuilder.text() != null && suggestionBuilder.prefix() != null) {                 suggestionBuilder.prefix(null);             }             XContentBuilder xContentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()));             if (randomBoolean()) {                 xContentBuilder.prettyPrint();             }             suggestBuilder.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);             System.out.println(suggestBuilder);             XContentParser parser = XContentHelper.createParser(xContentBuilder.bytes());             parser.nextToken(); // set cursor to START_OBJECT             SuggestionSearchContext suggestionSearchContext = parseElement.parseInternal(parser, mockShardContext);             SuggestionContext oldSchoolContext = suggestionSearchContext.suggestions().get(suggestionBuilder.name());             SuggestionContext newSchoolContext = suggestionBuilder.build(mockShardContext, suggestBuilder.getGlobalText());             assertNotSame(oldSchoolContext, newSchoolContext);             // deep comparison of analyzers is difficult here, but we check they are same class             if (oldSchoolContext.getAnalyzer() == null) {                 assertNull(newSchoolContext.getAnalyzer());             } else if (newSchoolContext.getAnalyzer() == null) {                 assertNull(oldSchoolContext.getAnalyzer());             } else {                 assertEquals(oldSchoolContext.getAnalyzer().getClass(), newSchoolContext.getAnalyzer().getClass());             }             assertEquals(oldSchoolContext.getField(), newSchoolContext.getField());             // TODO consolidate text/prefix/regex             //assertEquals(oldSchoolContext.getPrefix(), newSchoolContext.getPrefix());             //assertEquals(oldSchoolContext.getRegex(), newSchoolContext.getRegex());             assertEquals(oldSchoolContext.getShardSize(), newSchoolContext.getShardSize());             assertEquals(oldSchoolContext.getSize(), newSchoolContext.getSize());             assertEquals(oldSchoolContext.getSuggester().getClass(), newSchoolContext.getSuggester().getClass());             // TODO consolidate text/prefix/regex             //assertEquals(oldSchoolContext.getText(), newSchoolContext.getText());             assertEquals(oldSchoolContext.getClass(), newSchoolContext.getClass());             assertSuggestionContext(oldSchoolContext, newSchoolContext);","SB suggestionBuilder = randomTestBuilder();             suggestBuilder.addSuggestion(suggestionBuilder);             if (suggestionBuilder.text() == null) {                 // we either need suggestion text or global text                 suggestBuilder.setText(randomAsciiOfLengthBetween(5, 50));             }             if (suggestionBuilder.text() != null && suggestionBuilder.prefix() != null) {                 suggestionBuilder.prefix(null);             }             XContentBuilder xContentBuilder = XContentFactory.contentBuilder(randomFrom(XContentType.values()));             if (randomBoolean()) {                 xContentBuilder.prettyPrint();             }             suggestBuilder.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS);             XContentParser parser = XContentHelper.createParser(xContentBuilder.bytes());             parser.nextToken(); // set cursor to START_OBJECT             SuggestionSearchContext parsedSuggestionSearchContext = parseElement.parseInternal(parser, mockShardContext);             SuggestionSearchContext buildSuggestSearchContext = suggestBuilder.build(mockShardContext);             assertEquals(parsedSuggestionSearchContext.suggestions().size(), buildSuggestSearchContext.suggestions().size());             Iterator<Entry<String, SuggestionContext>> iterator = buildSuggestSearchContext.suggestions().entrySet().iterator();             for (Entry<String, SuggestionContext> entry : parsedSuggestionSearchContext.suggestions().entrySet()) {                 Entry<String, SuggestionContext> other = iterator.next();                 assertEquals(entry.getKey(), other.getKey());                 SuggestionContext oldSchoolContext = entry.getValue();                 SuggestionContext newSchoolContext = other.getValue();                 assertNotSame(oldSchoolContext, newSchoolContext);                 // deep comparison of analyzers is difficult here, but we check they are set or not set                 if (oldSchoolContext.getAnalyzer() != null) {                     assertNotNull(newSchoolContext.getAnalyzer());                 } else {                     assertNull(newSchoolContext.getAnalyzer());                 }                 assertEquals(oldSchoolContext.getField(), newSchoolContext.getField());                 assertEquals(oldSchoolContext.getPrefix(), newSchoolContext.getPrefix());                 assertEquals(oldSchoolContext.getRegex(), newSchoolContext.getRegex());                 assertEquals(oldSchoolContext.getShardSize(), newSchoolContext.getShardSize());                 assertEquals(oldSchoolContext.getSize(), newSchoolContext.getSize());                 assertEquals(oldSchoolContext.getSuggester().getClass(), newSchoolContext.getSuggester().getClass());                 assertEquals(oldSchoolContext.getText(), newSchoolContext.getText());                 assertEquals(oldSchoolContext.getClass(), newSchoolContext.getClass());                 assertSuggestionContext(oldSchoolContext, newSchoolContext);             }"
310,eed557742f5db7cd82d22b69a84220cc598fd744,04681ef6165a40192a6e268ca2df861d9d017f47,bbeb09eae7ac3c5d9837bb26eacfac6bba468929,Fri Feb 12 00:30:58 CET 2016,core/src/test/java/org/elasticsearch/search/suggest/term/TermSuggestionBuilderTests.java,"@SuppressWarnings(""unchecked"")         TermSuggestionContext oldContext = (TermSuggestionContext) oldSuggestion;         @SuppressWarnings(""unchecked"")         TermSuggestionContext newContext = (TermSuggestionContext) newSuggestion;         assertSpellcheckerSettings(oldContext.getDirectSpellCheckerSettings(), newContext.getDirectSpellCheckerSettings());",// put assertions on TermSuggestionContext here
311,c1d44780675a9ff43e87a44f62969a0214928988,a034e12bfa04044dead41956f14d0d53d7bb7438,7b5ed21d0dda532d43af51d3b5cd44ae6f4b82ed,Tue Feb 02 00:33:09 CET 2016,core/src/main/java/org/elasticsearch/action/support/TransportAction.java,"public final void execute(Task task, Request request, ActionListener<Response> listener) {         ActionRequestValidationException validationException = request.validate();         if (validationException != null) {             listener.onFailure(validationException);             return;         }         if (filters.length == 0) {             try {                 doExecute(task, request, listener);             } catch(Throwable t) {                 logger.trace(""Error during transport action execution."", t);                 listener.onFailure(t);             }         } else {             RequestFilterChain<Request, Response> requestFilterChain = new RequestFilterChain<>(this, logger);             requestFilterChain.proceed(task, actionName, request, listener);         }     }","public final Task execute(Request request, TaskListener<Response> listener) {         Task task = taskManager.register(""transport"", actionName, request);         execute(task, request, new ActionListener<Response>() {             @Override             public void onResponse(Response response) {                 if (task != null) {                     taskManager.unregister(task);                 }                 listener.onResponse(task, response);             }             @Override             public void onFailure(Throwable e) {                 if (task != null) {                     taskManager.unregister(task);                 }                 listener.onFailure(task, e);             }         });         return task;     }"
312,c1d44780675a9ff43e87a44f62969a0214928988,a034e12bfa04044dead41956f14d0d53d7bb7438,7b5ed21d0dda532d43af51d3b5cd44ae6f4b82ed,Tue Feb 02 00:33:09 CET 2016,core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java,"builder.parseXContent(parser, context);","XContentParser.Token token = parser.currentToken();         String currentFieldName = null;         if (token != XContentParser.Token.START_OBJECT && (token = parser.nextToken()) != XContentParser.Token.START_OBJECT) {             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.START_OBJECT + ""] but found ["" + token + ""]"",                     parser.getTokenLocation());         }         while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {             if (token == XContentParser.Token.FIELD_NAME) {                 currentFieldName = parser.currentName();             } else if (token.isValue()) {                 if (context.parseFieldMatcher().match(currentFieldName, FROM_FIELD)) {                     builder.from = parser.intValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, SIZE_FIELD)) {                     builder.size = parser.intValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, TIMEOUT_FIELD)) {                     builder.timeoutInMillis = parser.longValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, TERMINATE_AFTER_FIELD)) {                     builder.terminateAfter = parser.intValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, MIN_SCORE_FIELD)) {                     builder.minScore = parser.floatValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, VERSION_FIELD)) {                     builder.version = parser.booleanValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, EXPLAIN_FIELD)) {                     builder.explain = parser.booleanValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, TRACK_SCORES_FIELD)) {                     builder.trackScores = parser.booleanValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {                     builder.fetchSourceContext = FetchSourceContext.parse(parser, context);                 } else if (context.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) {                     List<String> fieldNames = new ArrayList<>();                     fieldNames.add(parser.text());                     builder.fieldNames = fieldNames;                 } else if (context.parseFieldMatcher().match(currentFieldName, SORT_FIELD)) {                     builder.sort(parser.text());                 } else if (context.parseFieldMatcher().match(currentFieldName, PROFILE_FIELD)) {                     builder.profile = parser.booleanValue();                 } else {                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                             parser.getTokenLocation());                 }             } else if (token == XContentParser.Token.START_OBJECT) {                 if (context.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {                     builder.queryBuilder = context.parseInnerQueryBuilder();                 } else if (context.parseFieldMatcher().match(currentFieldName, POST_FILTER_FIELD)) {                     builder.postQueryBuilder = context.parseInnerQueryBuilder();                 } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {                     builder.fetchSourceContext = FetchSourceContext.parse(parser, context);                 } else if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELDS_FIELD)) {                     List<ScriptField> scriptFields = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                         String scriptFieldName = parser.currentName();                         token = parser.nextToken();                         if (token == XContentParser.Token.START_OBJECT) {                             Script script = null;                             boolean ignoreFailure = false;                             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                                 if (token == XContentParser.Token.FIELD_NAME) {                                     currentFieldName = parser.currentName();                                 } else if (token.isValue()) {                                     if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELD)) {                                         script = Script.parse(parser, context.parseFieldMatcher());                                     } else if (context.parseFieldMatcher().match(currentFieldName, IGNORE_FAILURE_FIELD)) {                                         ignoreFailure = parser.booleanValue();                                     } else {                                         throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName                                                 + ""]."", parser.getTokenLocation());                                     }                                 } else if (token == XContentParser.Token.START_OBJECT) {                                     if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELD)) {                                         script = Script.parse(parser, context.parseFieldMatcher());                                     } else {                                         throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName                                                 + ""]."", parser.getTokenLocation());                                     }                                 } else {                                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName                                             + ""]."", parser.getTokenLocation());                                 }                             }                             scriptFields.add(new ScriptField(scriptFieldName, script, ignoreFailure));                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.START_OBJECT + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.scriptFields = scriptFields;                 } else if (context.parseFieldMatcher().match(currentFieldName, INDICES_BOOST_FIELD)) {                     ObjectFloatHashMap<String> indexBoost = new ObjectFloatHashMap<String>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                         if (token == XContentParser.Token.FIELD_NAME) {                             currentFieldName = parser.currentName();                         } else if (token.isValue()) {                             indexBoost.put(currentFieldName, parser.floatValue());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                                     parser.getTokenLocation());                         }                     }                     builder.indexBoost = indexBoost;                 } else if (context.parseFieldMatcher().match(currentFieldName, AGGREGATIONS_FIELD)) {                     List<BytesReference> aggregations = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                         currentFieldName = parser.currentName();                         token = parser.nextToken();                         if (token == XContentParser.Token.START_OBJECT) {                             XContentBuilder xContentBuilder = XContentFactory.jsonBuilder();                             xContentBuilder.startObject();                             xContentBuilder.field(currentFieldName);                             xContentBuilder.copyCurrentStructure(parser);                             xContentBuilder.endObject();                             aggregations.add(xContentBuilder.bytes());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                                     parser.getTokenLocation());                         }                     }                     builder.aggregations = aggregations;                 } else if (context.parseFieldMatcher().match(currentFieldName, HIGHLIGHT_FIELD)) {                     builder.highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context);                 } else if (context.parseFieldMatcher().match(currentFieldName, INNER_HITS_FIELD)) {                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     builder.innerHitsBuilder = xContentBuilder.bytes();                 } else if (context.parseFieldMatcher().match(currentFieldName, SUGGEST_FIELD)) {                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     builder.suggestBuilder = xContentBuilder.bytes();                 } else if (context.parseFieldMatcher().match(currentFieldName, SORT_FIELD)) {                     List<BytesReference> sorts = new ArrayList<>();                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     sorts.add(xContentBuilder.bytes());                     builder.sorts = sorts;                 } else if (context.parseFieldMatcher().match(currentFieldName, EXT_FIELD)) {                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     builder.ext = xContentBuilder.bytes();                 } else {                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                             parser.getTokenLocation());                 }             } else if (token == XContentParser.Token.START_ARRAY) {                 if (context.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) {                     List<String> fieldNames = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         if (token == XContentParser.Token.VALUE_STRING) {                             fieldNames.add(parser.text());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.VALUE_STRING + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.fieldNames = fieldNames;                 } else if (context.parseFieldMatcher().match(currentFieldName, FIELDDATA_FIELDS_FIELD)) {                     List<String> fieldDataFields = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         if (token == XContentParser.Token.VALUE_STRING) {                             fieldDataFields.add(parser.text());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.VALUE_STRING + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.fieldDataFields = fieldDataFields;                 } else if (context.parseFieldMatcher().match(currentFieldName, SORT_FIELD)) {                     List<BytesReference> sorts = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                         sorts.add(xContentBuilder.bytes());                     }                     builder.sorts = sorts;                 } else if (context.parseFieldMatcher().match(currentFieldName, RESCORE_FIELD)) {                     List<RescoreBuilder<?>> rescoreBuilders = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         rescoreBuilders.add(RescoreBuilder.parseFromXContent(context));                     }                     builder.rescoreBuilders = rescoreBuilders;                 } else if (context.parseFieldMatcher().match(currentFieldName, STATS_FIELD)) {                     List<String> stats = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         if (token == XContentParser.Token.VALUE_STRING) {                             stats.add(parser.text());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.VALUE_STRING + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.stats = stats;                 } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {                     builder.fetchSourceContext = FetchSourceContext.parse(parser, context);                 } else if (context.parseFieldMatcher().match(currentFieldName, SEARCH_AFTER)) {                     builder.searchAfterBuilder = SearchAfterBuilder.PROTOTYPE.fromXContent(parser, context.parseFieldMatcher());                 } else {                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                             parser.getTokenLocation());                 }             } else {                 throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                         parser.getTokenLocation());             }         }"
313,a241983c9d7def1927406cf7db9a9b5c7c23442a,859f9e69b7927d06fa866b6fd3016366ddff52ba,ed7bc5ba16d8746de5f709508db6d3d3c60ef574,Mon Feb 01 14:38:33 CET 2016,core/src/test/java/org/elasticsearch/search/aggregations/bucket/FilterIT.java,".addAggregation(histogram(""histo"").field(""value"").interval(1l).minDocCount(0)                         .subAggregation(filter(""filter"", matchAllQuery())))",".addAggregation(histogram(""histo"").field(""value"").interval(1L).minDocCount(0)                         .subAggregation(filter(""filter"").filter(matchAllQuery())))"
314,a241983c9d7def1927406cf7db9a9b5c7c23442a,859f9e69b7927d06fa866b6fd3016366ddff52ba,ed7bc5ba16d8746de5f709508db6d3d3c60ef574,Mon Feb 01 14:38:33 CET 2016,core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java,".addAggregation(histogram(""histo"").field(""value"").interval(1l).minDocCount(0)                         .subAggregation(filters(""filters"", new KeyedFilter(""all"", matchAllQuery()))))",".addAggregation(histogram(""histo"").field(""value"").interval(1L).minDocCount(0)                         .subAggregation(filters(""filters"").filter(""all"", matchAllQuery())))"
315,a241983c9d7def1927406cf7db9a9b5c7c23442a,859f9e69b7927d06fa866b6fd3016366ddff52ba,ed7bc5ba16d8746de5f709508db6d3d3c60ef574,Mon Feb 01 14:38:33 CET 2016,core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoDistanceIT.java,".addAggregation(histogram(""histo"").field(""value"").interval(1l).minDocCount(0)                         .subAggregation(geoDistance(""geo_dist"", new GeoPoint(52.3760, 4.894)).field(""location"").addRange(""0-100"", 0.0, 100.0)))",".addAggregation(histogram(""histo"").field(""value"").interval(1L).minDocCount(0)                         .subAggregation(geoDistance(""geo_dist"").field(""location"").point(""52.3760, 4.894"").addRange(""0-100"", 0.0, 100.0)))"
316,a241983c9d7def1927406cf7db9a9b5c7c23442a,859f9e69b7927d06fa866b6fd3016366ddff52ba,ed7bc5ba16d8746de5f709508db6d3d3c60ef574,Mon Feb 01 14:38:33 CET 2016,core/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedIT.java,".addAggregation(histogram(""histo"").field(""value"").interval(1l).minDocCount(0)                         .subAggregation(nested(""nested"", ""nested"")))",".addAggregation(histogram(""histo"").field(""value"").interval(1L).minDocCount(0)                         .subAggregation(nested(""nested"").path(""nested"")))"
317,a241983c9d7def1927406cf7db9a9b5c7c23442a,859f9e69b7927d06fa866b6fd3016366ddff52ba,ed7bc5ba16d8746de5f709508db6d3d3c60ef574,Mon Feb 01 14:38:33 CET 2016,core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeIT.java,".extendedBounds(new ExtendedBounds(0l, (long) numBuckets_empty_rnd - 1))                                 .subAggregation(derivative(""deriv"", ""_count"").gapPolicy(randomFrom(GapPolicy.values()))))",".extendedBounds(0L, (long) numBuckets_empty_rnd - 1)                                 .subAggregation(derivative(""deriv"").setBucketsPaths(""_count"").gapPolicy(randomFrom(GapPolicy.values()))))"
318,a241983c9d7def1927406cf7db9a9b5c7c23442a,859f9e69b7927d06fa866b6fd3016366ddff52ba,ed7bc5ba16d8746de5f709508db6d3d3c60ef574,Mon Feb 01 14:38:33 CET 2016,core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeIT.java,".extendedBounds(new ExtendedBounds(0l, (long) numBuckets_empty_rnd - 1))",".extendedBounds(0L, (long) numBuckets_empty_rnd - 1)"
319,859f9e69b7927d06fa866b6fd3016366ddff52ba,187009c12c4b7c10f03270fa9c9ea8f919417a6c,74a1959c3b59d9ddd4af8656dfb9b0d575bac557,Fri Jan 29 12:58:19 CET 2016,core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/ScriptHeuristic.java,"initialize(context.scriptService(), context);","searchScript = context.scriptService().executable(script, ScriptContext.Standard.AGGS, Collections.emptyMap());         searchScript.setNextVar(""_subset_freq"", subsetDfHolder);         searchScript.setNextVar(""_subset_size"", subsetSizeHolder);         searchScript.setNextVar(""_superset_freq"", supersetDfHolder);         searchScript.setNextVar(""_superset_size"", supersetSizeHolder);"
320,859f9e69b7927d06fa866b6fd3016366ddff52ba,187009c12c4b7c10f03270fa9c9ea8f919417a6c,74a1959c3b59d9ddd4af8656dfb9b0d575bac557,Fri Jan 29 12:58:19 CET 2016,core/src/main/java/org/elasticsearch/search/internal/DefaultSearchContext.java,"public DefaultSearchContext(long id, ShardSearchRequest request, SearchShardTarget shardTarget,                                 Engine.Searcher engineSearcher, IndexService indexService, IndexShard indexShard,                                 ScriptService scriptService, PageCacheRecycler pageCacheRecycler,                                 BigArrays bigArrays, Counter timeEstimateCounter, ParseFieldMatcher parseFieldMatcher,                                 TimeValue timeout     ) {         super(parseFieldMatcher);         this.id = id;         this.request = request;         this.searchType = request.searchType();         this.shardTarget = shardTarget;         this.engineSearcher = engineSearcher;         this.scriptService = scriptService;         this.pageCacheRecycler = pageCacheRecycler;         // SearchContexts use a BigArrays that can circuit break         this.bigArrays = bigArrays.withCircuitBreaking();         this.dfsResult = new DfsSearchResult(id, shardTarget);         this.queryResult = new QuerySearchResult(id, shardTarget);         this.fetchResult = new FetchSearchResult(id, shardTarget);         this.indexShard = indexShard;         this.indexService = indexService;         this.searcher = new ContextIndexSearcher(engineSearcher, indexService.cache().query(), indexShard.getQueryCachingPolicy());         this.timeEstimateCounter = timeEstimateCounter;         this.timeoutInMillis = timeout.millis();     }","public DefaultSearchContext(long id, ShardSearchRequest request, SearchShardTarget shardTarget, Engine.Searcher engineSearcher,             IndexService indexService, IndexShard indexShard, ScriptService scriptService, PageCacheRecycler pageCacheRecycler,             BigArrays bigArrays, Counter timeEstimateCounter, ParseFieldMatcher parseFieldMatcher, TimeValue timeout,             FetchPhase fetchPhase) {         super(parseFieldMatcher, request);         this.id = id;         this.request = request;         this.fetchPhase = fetchPhase;         this.searchType = request.searchType();         this.shardTarget = shardTarget;         this.engineSearcher = engineSearcher;         this.scriptService = scriptService;         this.pageCacheRecycler = pageCacheRecycler;         // SearchContexts use a BigArrays that can circuit break         this.bigArrays = bigArrays.withCircuitBreaking();         this.dfsResult = new DfsSearchResult(id, shardTarget);         this.queryResult = new QuerySearchResult(id, shardTarget);         this.fetchResult = new FetchSearchResult(id, shardTarget);         this.indexShard = indexShard;         this.indexService = indexService;         this.searcher = new ContextIndexSearcher(engineSearcher, indexService.cache().query(), indexShard.getQueryCachingPolicy());         this.timeEstimateCounter = timeEstimateCounter;         this.timeoutInMillis = timeout.millis();     }"
321,23d41ce42f32af5c238b7466a65a82a9b95edf9c,744875e03f2596d06425afbfc3a957f84ff0fb51,bc6de733d12ecca33f49b44cdcefe5f16c5bb5c0,Thu Jan 28 15:07:00 CET 2016,core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java,ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING         ESLoggerFactory.LOG_LEVEL_SETTING)));,ThreadContext.DEFAULT_HEADERS_SETTING)));
322,7ff99eb89d887c17c69f1b9abcfe676421134ccd,21dc50966f0a8c0ae3315985f91e2945da7638f5,a8c967306a059a2c5fd3a03ed315a3990a078610,Wed Jan 27 16:33:50 CET 2016,core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java,"if (scriptEngineService.sandboxed()) {                             assertCompileAccepted(lang, script, scriptType, scriptContext);","if (scriptEngineService.isSandboxed()) {                                 assertCompileAccepted(lang, script, scriptType, scriptContext, contextAndHeaders);"
323,71c3e57aee3581686329af74aa459c04ae04420a,6ec13e62a7d7071f7a57b5bbe2ba581ecda52160,f8cb1912af190e42245a646cc66bf3bb3dc7f2f9,Wed Jan 27 11:42:42 CET 2016,core/src/main/java/org/elasticsearch/http/HttpServer.java,"this.disableSites = this.settings.getAsBoolean(""http.disable_sites"", false);         transport.httpServerAdapter(this);",transport.httpServerAdapter(new Dispatcher(this));
324,71c3e57aee3581686329af74aa459c04ae04420a,6ec13e62a7d7071f7a57b5bbe2ba581ecda52160,f8cb1912af190e42245a646cc66bf3bb3dc7f2f9,Wed Jan 27 11:42:42 CET 2016,core/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestCase.java,".put(""path.home"", createTempDir().toString())                 .put(""name"", ""test-"" + getTestName())",".put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())"
325,0404db65e3497452886173957729c8e82cfd4a03,daadf8e04feb3a316a6c845a0c2ed56f519a1eab,63da9281a9e9d1302a62b27102961b4d2483bf91,Wed Jan 27 11:31:00 CET 2016,core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java,URLRepository.SUPPORTED_PROTOCOLS_SETTING         Node.NODE_INGEST_SETTING         ClusterModule.SHARDS_ALLOCATOR_TYPE_SETTING         EsExecutors.PROCESSORS_SETTING)));,URLRepository.SUPPORTED_PROTOCOLS_SETTING)));
326,3b35754f5900286acdeb9ada7d2a988a9d177ecd,d63b8a25f8ccfa68d34681505a9be27daef38c5b,4e5316591a95b28528335e1905558bfa1c0c4c6a,Tue Jan 26 14:17:53 CET 2016,core/src/test/java/org/elasticsearch/percolator/PercolateDocumentParserTests.java,"AggregatorParsers aggregatorParsers = new AggregatorParsers(Collections.emptySet(), Collections.emptySet(),                 new NamedWriteableRegistry());         AggregationPhase aggregationPhase = new AggregationPhase(new AggregationParseElement(aggregatorParsers, indicesQueriesRegistry),                 new AggregationBinaryParseElement(aggregatorParsers, indicesQueriesRegistry));         MappingUpdatedAction mappingUpdatedAction = Mockito.mock(MappingUpdatedAction.class);         parser = new PercolateDocumentParser(                 highlightPhase, new SortParseElement(), aggregationPhase, mappingUpdatedAction         );","AggregatorParsers aggregatorParsers = new AggregatorParsers(Collections.emptySet(), Collections.emptySet());         AggregationPhase aggregationPhase = new AggregationPhase(new AggregationParseElement(aggregatorParsers), new AggregationBinaryParseElement(aggregatorParsers));         parser = new PercolateDocumentParser(highlightPhase, new SortParseElement(), aggregationPhase);"
327,36d98478bf3fba3bdc469d1b856bf60cc947553e,a5a62932b9cca3f89c8fa5e7cfed26e91ff2958b,4c1e93bd89cfbf97c25e84e0cdcf9818e9cd97f6,Mon Jan 25 18:01:09 CET 2016,core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java,Node.NODE_INGEST_SETTING)));,ScriptService.SCRIPT_CACHE_SIZE_SETTING         IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING         IndicesFieldDataCache.INDICES_FIELDDATA_CACHE_SIZE_KEY         IndicesRequestCache.INDICES_CACHE_QUERY_SIZE         IndicesRequestCache.INDICES_CACHE_QUERY_EXPIRE         HunspellService.HUNSPELL_LAZY_LOAD         HunspellService.HUNSPELL_IGNORE_CASE         HunspellService.HUNSPELL_DICTIONARY_OPTIONS         IndicesStore.INDICES_STORE_DELETE_SHARD_TIMEOUT         Environment.PATH_CONF_SETTING         Environment.PATH_DATA_SETTING         Environment.PATH_HOME_SETTING         Environment.PATH_LOGS_SETTING         Environment.PATH_PLUGINS_SETTING         Environment.PATH_REPO_SETTING         Environment.PATH_SCRIPTS_SETTING         Environment.PATH_SHARED_DATA_SETTING         Environment.PIDFILE_SETTING         DiscoveryService.DISCOVERY_SEED_SETTING         DiscoveryService.INITIAL_STATE_TIMEOUT_SETTING         DiscoveryModule.DISCOVERY_TYPE_SETTING         DiscoveryModule.ZEN_MASTER_SERVICE_TYPE_SETTING         FaultDetection.PING_RETRIES_SETTING         FaultDetection.PING_TIMEOUT_SETTING         FaultDetection.REGISTER_CONNECTION_LISTENER_SETTING         FaultDetection.PING_INTERVAL_SETTING         FaultDetection.CONNECT_ON_NETWORK_DISCONNECT_SETTING         ZenDiscovery.PING_TIMEOUT_SETTING         ZenDiscovery.JOIN_TIMEOUT_SETTING         ZenDiscovery.JOIN_RETRY_ATTEMPTS_SETTING         ZenDiscovery.JOIN_RETRY_DELAY_SETTING         ZenDiscovery.MAX_PINGS_FROM_ANOTHER_MASTER_SETTING         ZenDiscovery.SEND_LEAVE_REQUEST_SETTING         ZenDiscovery.MASTER_ELECTION_FILTER_CLIENT_SETTING         ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING         ZenDiscovery.MASTER_ELECTION_FILTER_DATA_SETTING         UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING         UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING         SearchService.DEFAULT_KEEPALIVE_SETTING         SearchService.KEEPALIVE_INTERVAL_SETTING         Node.WRITE_PORTS_FIELD_SETTING         URLRepository.ALLOWED_URLS_SETTING         URLRepository.REPOSITORIES_LIST_DIRECTORIES_SETTING         URLRepository.REPOSITORIES_URL_SETTING         URLRepository.SUPPORTED_PROTOCOLS_SETTING)));
328,cd8320b1716642ae4b0daec6ebc7623d041df674,e6f9cbce8f76096ea7366922e731cc9e93fb83b9,ec31feca93fdfad9c8b4ef7a757b408ecf18d274,Mon Jan 25 11:42:20 CET 2016,core/src/main/java/org/elasticsearch/search/aggregations/bucket/filter/FilterAggregator.java,"Query filter = this.filter.toQuery(context.searchContext().indexShard().getQueryShardContext());             return new FilterAggregator(name, filter, factories, context, parent, pipelineAggregators, metaData);","IndexSearcher contextSearcher = context.searchContext().searcher();             if (searcher != contextSearcher) {                 searcher = contextSearcher;                 weight = contextSearcher.createNormalizedWeight(filter, false);             }             return new FilterAggregator(name, weight, factories, context, parent, pipelineAggregators, metaData);"
329,cd8320b1716642ae4b0daec6ebc7623d041df674,e6f9cbce8f76096ea7366922e731cc9e93fb83b9,ec31feca93fdfad9c8b4ef7a757b408ecf18d274,Mon Jan 25 11:42:20 CET 2016,core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregator.java,"return new FiltersAggregator(name, factories, filters, keyed, otherBucket ? otherBucketKey : null, context, parent,                     pipelineAggregators, metaData);","IndexSearcher contextSearcher = context.searchContext().searcher();             if (searcher != contextSearcher) {                 searcher = contextSearcher;                 weights = new Weight[filters.size()];                 for (int i = 0; i < filters.size(); ++i) {                     KeyedFilter keyedFilter = filters.get(i);                     this.weights[i] = contextSearcher.createNormalizedWeight(keyedFilter.filter, false);                 }             }             return new FiltersAggregator(name, factories, keys, weights, keyed, otherBucketKey, context, parent, pipelineAggregators, metaData);"
330,9a1fdb6987feadaf6d433ca0a8e131ead1b6f50c,ad7fec87b019255d88f01afb02df9088dc280b43,e9bb3d31a33f45752de25cd646955d07be345aff,Fri Jan 22 15:18:18 CET 2016,core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java,IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING         IndicesFieldDataCache.INDICES_FIELDDATA_CACHE_SIZE_KEY         IndicesRequestCache.INDICES_CACHE_QUERY_SIZE         IndicesRequestCache.INDICES_CACHE_QUERY_EXPIRE         HunspellService.HUNSPELL_LAZY_LOAD         HunspellService.HUNSPELL_IGNORE_CASE         HunspellService.HUNSPELL_DICTIONARY_OPTIONS         IndicesStore.INDICES_STORE_DELETE_SHARD_TIMEOUT)));,Environment.PATH_CONF_SETTING         Environment.PATH_DATA_SETTING         Environment.PATH_HOME_SETTING         Environment.PATH_LOGS_SETTING         Environment.PATH_PLUGINS_SETTING         Environment.PATH_REPO_SETTING         Environment.PATH_SCRIPTS_SETTING         Environment.PATH_SHARED_DATA_SETTING         Environment.PIDFILE_SETTING     )));
331,9a1fdb6987feadaf6d433ca0a8e131ead1b6f50c,ad7fec87b019255d88f01afb02df9088dc280b43,e9bb3d31a33f45752de25cd646955d07be345aff,Fri Jan 22 15:18:18 CET 2016,core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java,".put(""path.conf"", getDataPath(""/indices/analyze/conf_dir""))                 .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())                 .put(HUNSPELL_IGNORE_CASE.getKey(), true)",".put(Environment.PATH_CONF_SETTING.getKey(), getDataPath(""/indices/analyze/conf_dir""))                 .put(HUNSPELL_LAZY_LOAD, randomBoolean())                 .put(HUNSPELL_IGNORE_CASE, true)"
332,9a1fdb6987feadaf6d433ca0a8e131ead1b6f50c,ad7fec87b019255d88f01afb02df9088dc280b43,e9bb3d31a33f45752de25cd646955d07be345aff,Fri Jan 22 15:18:18 CET 2016,core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java,".put(""path.conf"", getDataPath(""/indices/analyze/no_aff_conf_dir""))                 .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())",".put(Environment.PATH_CONF_SETTING.getKey(), getDataPath(""/indices/analyze/no_aff_conf_dir""))                 .put(HUNSPELL_LAZY_LOAD, randomBoolean())"
333,9a1fdb6987feadaf6d433ca0a8e131ead1b6f50c,ad7fec87b019255d88f01afb02df9088dc280b43,e9bb3d31a33f45752de25cd646955d07be345aff,Fri Jan 22 15:18:18 CET 2016,core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java,".put(""path.conf"", getDataPath(""/indices/analyze/two_aff_conf_dir""))                 .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())",".put(Environment.PATH_CONF_SETTING.getKey(), getDataPath(""/indices/analyze/two_aff_conf_dir""))                 .put(HUNSPELL_LAZY_LOAD, randomBoolean())"
334,602a0f183ed055ae4e0688fc0aa14cfb13c96306,993092cde660abdf0a13228be954ff7e877969b4,df5f1b1ee9da7d45e20880e411d7e5280ef5ca59,Tue Jan 19 22:01:38 CET 2016,core/src/main/java/org/elasticsearch/client/transport/TransportClient.java,"modules.add(new ActionModule(this.settings, true));                 modules.add(new CircuitBreakerModule(this.settings));",modules.add(new ActionModule(true));                 modules.add(new CircuitBreakerModule(settings));
335,602a0f183ed055ae4e0688fc0aa14cfb13c96306,993092cde660abdf0a13228be954ff7e877969b4,df5f1b1ee9da7d45e20880e411d7e5280ef5ca59,Tue Jan 19 22:01:38 CET 2016,core/src/main/java/org/elasticsearch/node/Node.java,"modules.add(new SearchModule());             modules.add(new ActionModule(this.settings, false));","modules.add(new SearchModule(settings, namedWriteableRegistry));             modules.add(new ActionModule(false));"
336,3d0cedbabbedca4649f8778cb3e6329717db4b7a,e9e300c42e5fa16d54c8dcd2d9ba71701c473c11,5c8816436400063d7a439b389378f94090247efe,Tue Jan 19 20:47:43 CET 2016,core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java,"protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {         return new ReplicationRequest(shardId);","protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {         return new BasicReplicationRequest(request, shardId);"
337,3d0cedbabbedca4649f8778cb3e6329717db4b7a,e9e300c42e5fa16d54c8dcd2d9ba71701c473c11,5c8816436400063d7a439b389378f94090247efe,Tue Jan 19 20:47:43 CET 2016,core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java,protected ReplicationRequest(T request) {         this.timeout = request.timeout();         this.index = request.index();         this.consistencyLevel = request.consistencyLevel();     },"protected ReplicationRequest(Request request) {         this(request, request);     }"
338,645b0530611d5856ba11d62171eef489a94afc48,85797aeb503d3ed8a17fb0ac0ce3a37a512731ea,7745c64a625f8d411d0dcd0f808f38043af8d819,Fri Jan 15 20:04:37 CET 2016,core/src/main/java/org/elasticsearch/action/bulk/BulkShardRequest.java,"// This is included in error messages so we'll try to make it somewhat user friendly.         StringBuilder b = new StringBuilder(""BulkShardRequest to ["");         b.append(index).append(""] containing ["").append(items.length).append(""] requests"");         if (refresh) {             b.append("" and a refresh"");         }         return b.toString();","return ""shard bulk {"" + super.toString() + ""}"";"
339,645b0530611d5856ba11d62171eef489a94afc48,85797aeb503d3ed8a17fb0ac0ce3a37a512731ea,7745c64a625f8d411d0dcd0f808f38043af8d819,Fri Jan 15 20:04:37 CET 2016,core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java,"builder.parseXContent(parser, context);","XContentParser.Token token = parser.currentToken();         String currentFieldName = null;         if (token != XContentParser.Token.START_OBJECT && (token = parser.nextToken()) != XContentParser.Token.START_OBJECT) {             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.START_OBJECT + ""] but found ["" + token + ""]"",                     parser.getTokenLocation());         }         while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {             if (token == XContentParser.Token.FIELD_NAME) {                 currentFieldName = parser.currentName();             } else if (token.isValue()) {                 if (context.parseFieldMatcher().match(currentFieldName, FROM_FIELD)) {                     builder.from = parser.intValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, SIZE_FIELD)) {                     builder.size = parser.intValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, TIMEOUT_FIELD)) {                     builder.timeoutInMillis = parser.longValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, TERMINATE_AFTER_FIELD)) {                     builder.terminateAfter = parser.intValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, MIN_SCORE_FIELD)) {                     builder.minScore = parser.floatValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, VERSION_FIELD)) {                     builder.version = parser.booleanValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, EXPLAIN_FIELD)) {                     builder.explain = parser.booleanValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, TRACK_SCORES_FIELD)) {                     builder.trackScores = parser.booleanValue();                 } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {                     builder.fetchSourceContext = FetchSourceContext.parse(parser, context);                 } else if (context.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) {                     List<String> fieldNames = new ArrayList<>();                     fieldNames.add(parser.text());                     builder.fieldNames = fieldNames;                 } else if (context.parseFieldMatcher().match(currentFieldName, SORT_FIELD)) {                     builder.sort(parser.text());                 } else if (context.parseFieldMatcher().match(currentFieldName, PROFILE_FIELD)) {                     builder.profile = parser.booleanValue();                 } else {                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                             parser.getTokenLocation());                 }             } else if (token == XContentParser.Token.START_OBJECT) {                 if (context.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {                     builder.queryBuilder = context.parseInnerQueryBuilder();                 } else if (context.parseFieldMatcher().match(currentFieldName, POST_FILTER_FIELD)) {                     builder.postQueryBuilder = context.parseInnerQueryBuilder();                 } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {                     builder.fetchSourceContext = FetchSourceContext.parse(parser, context);                 } else if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELDS_FIELD)) {                     List<ScriptField> scriptFields = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                         String scriptFieldName = parser.currentName();                         token = parser.nextToken();                         if (token == XContentParser.Token.START_OBJECT) {                             Script script = null;                             boolean ignoreFailure = false;                             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                                 if (token == XContentParser.Token.FIELD_NAME) {                                     currentFieldName = parser.currentName();                                 } else if (token.isValue()) {                                     if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELD)) {                                         script = Script.parse(parser, context.parseFieldMatcher());                                     } else if (context.parseFieldMatcher().match(currentFieldName, IGNORE_FAILURE_FIELD)) {                                         ignoreFailure = parser.booleanValue();                                     } else {                                         throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName                                                 + ""]."", parser.getTokenLocation());                                     }                                 } else if (token == XContentParser.Token.START_OBJECT) {                                     if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELD)) {                                         script = Script.parse(parser, context.parseFieldMatcher());                                     } else {                                         throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName                                                 + ""]."", parser.getTokenLocation());                                     }                                 } else {                                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName                                             + ""]."", parser.getTokenLocation());                                 }                             }                             scriptFields.add(new ScriptField(scriptFieldName, script, ignoreFailure));                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.START_OBJECT + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.scriptFields = scriptFields;                 } else if (context.parseFieldMatcher().match(currentFieldName, INDICES_BOOST_FIELD)) {                     ObjectFloatHashMap<String> indexBoost = new ObjectFloatHashMap<String>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                         if (token == XContentParser.Token.FIELD_NAME) {                             currentFieldName = parser.currentName();                         } else if (token.isValue()) {                             indexBoost.put(currentFieldName, parser.floatValue());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                                     parser.getTokenLocation());                         }                     }                     builder.indexBoost = indexBoost;                 } else if (context.parseFieldMatcher().match(currentFieldName, AGGREGATIONS_FIELD)) {                     List<BytesReference> aggregations = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                         currentFieldName = parser.currentName();                         token = parser.nextToken();                         if (token == XContentParser.Token.START_OBJECT) {                             XContentBuilder xContentBuilder = XContentFactory.jsonBuilder();                             xContentBuilder.startObject();                             xContentBuilder.field(currentFieldName);                             xContentBuilder.copyCurrentStructure(parser);                             xContentBuilder.endObject();                             aggregations.add(xContentBuilder.bytes());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                                     parser.getTokenLocation());                         }                     }                     builder.aggregations = aggregations;                 } else if (context.parseFieldMatcher().match(currentFieldName, HIGHLIGHT_FIELD)) {                     builder.highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context);                 } else if (context.parseFieldMatcher().match(currentFieldName, INNER_HITS_FIELD)) {                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     builder.innerHitsBuilder = xContentBuilder.bytes();                 } else if (context.parseFieldMatcher().match(currentFieldName, SUGGEST_FIELD)) {                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     builder.suggestBuilder = xContentBuilder.bytes();                 } else if (context.parseFieldMatcher().match(currentFieldName, SORT_FIELD)) {                     List<BytesReference> sorts = new ArrayList<>();                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     sorts.add(xContentBuilder.bytes());                     builder.sorts = sorts;                 } else if (context.parseFieldMatcher().match(currentFieldName, EXT_FIELD)) {                     XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                     builder.ext = xContentBuilder.bytes();                 } else {                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                             parser.getTokenLocation());                 }             } else if (token == XContentParser.Token.START_ARRAY) {                 if (context.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) {                     List<String> fieldNames = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         if (token == XContentParser.Token.VALUE_STRING) {                             fieldNames.add(parser.text());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.VALUE_STRING + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.fieldNames = fieldNames;                 } else if (context.parseFieldMatcher().match(currentFieldName, FIELDDATA_FIELDS_FIELD)) {                     List<String> fieldDataFields = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         if (token == XContentParser.Token.VALUE_STRING) {                             fieldDataFields.add(parser.text());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.VALUE_STRING + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.fieldDataFields = fieldDataFields;                 } else if (context.parseFieldMatcher().match(currentFieldName, SORT_FIELD)) {                     List<BytesReference> sorts = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                         sorts.add(xContentBuilder.bytes());                     }                     builder.sorts = sorts;                 } else if (context.parseFieldMatcher().match(currentFieldName, RESCORE_FIELD)) {                     List<BytesReference> rescoreBuilders = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser);                         rescoreBuilders.add(xContentBuilder.bytes());                     }                     builder.rescoreBuilders = rescoreBuilders;                 } else if (context.parseFieldMatcher().match(currentFieldName, STATS_FIELD)) {                     List<String> stats = new ArrayList<>();                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                         if (token == XContentParser.Token.VALUE_STRING) {                             stats.add(parser.text());                         } else {                             throw new ParsingException(parser.getTokenLocation(), ""Expected ["" + XContentParser.Token.VALUE_STRING + ""] in [""                                     + currentFieldName + ""] but found ["" + token + ""]"", parser.getTokenLocation());                         }                     }                     builder.stats = stats;                 } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {                     builder.fetchSourceContext = FetchSourceContext.parse(parser, context);                 } else {                     throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                             parser.getTokenLocation());                 }             } else {                 throw new ParsingException(parser.getTokenLocation(), ""Unknown key for a "" + token + "" in ["" + currentFieldName + ""]."",                         parser.getTokenLocation());             }         }"
340,f3de7783d2f6e1a53529170c8bfcb79f2e9bade3,db832cce068a6595c9e00b34c0ae751e653d0441,39bc001e33489c5033da2bb7520cb907d2dd16ff,Mon Jan 11 11:36:16 CET 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,indexingService.postIndex(index);         // Notify IMC so that it can go and check heap used by all indexing buffers periodically:         indexingMemoryController.bytesWritten(index.getTranslogLocation().size);,indexingOperationListeners.postIndex(index);
341,f3de7783d2f6e1a53529170c8bfcb79f2e9bade3,db832cce068a6595c9e00b34c0ae751e653d0441,39bc001e33489c5033da2bb7520cb907d2dd16ff,Mon Jan 11 11:36:16 CET 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,indexingService.postDelete(delete);         // Notify IMC so that it can go and check heap used by all indexing buffers periodically:         indexingMemoryController.bytesWritten(delete.getTranslogLocation().size);,indexingOperationListeners.postDelete(delete);
342,f3de7783d2f6e1a53529170c8bfcb79f2e9bade3,db832cce068a6595c9e00b34c0ae751e653d0441,39bc001e33489c5033da2bb7520cb907d2dd16ff,Mon Jan 11 11:36:16 CET 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"threadPool, indexingService, indexSettings, engineWarmer, store, deletionPolicy, mergePolicyConfig.getMergePolicy(), mergeSchedulerConfig,             mapperService.indexAnalyzer(), similarityService.similarity(mapperService), codecService, shardEventListener, translogRecoveryPerformer, indexCache.query(), cachingPolicy, translogConfig,             idxSettings.getSettings().getAsTime(IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING, IndexingMemoryController.SHARD_DEFAULT_INACTIVE_TIME));","threadPool, indexSettings, engineWarmer, store, deletionPolicy, mergePolicyConfig.getMergePolicy(), mergeSchedulerConfig,             mapperService.indexAnalyzer(), similarityService.similarity(mapperService), codecService, shardEventListener, translogRecoveryPerformer, indexCache.query(), cachingPolicy, translogConfig, inactiveTime);"
343,4d0feff2efc358914f2d29634eafdb4dec1e5c0f,2078d3f4dbefb4d7f3f306464ce49e8da9fecdbf,77dbfbc98842afb15b8def37e9cef570e2c53a36,Mon Jan 11 10:00:10 CET 2016,core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java,"} else if (KEY_PRIMARY_TERMS.equals(currentFieldName)) {                         LongArrayList list = new LongArrayList();                         while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                             if (token == XContentParser.Token.VALUE_NUMBER) {                                 list.add(parser.longValue());                             } else {                                 throw new IllegalStateException(""found a non-numeric value under ["" + KEY_PRIMARY_TERMS + ""]"");                             }                         }                         builder.primaryTerms(list.toArray());","} else {                         throw new IllegalArgumentException(""Unexpected field for an array "" + currentFieldName);"
344,2078d3f4dbefb4d7f3f306464ce49e8da9fecdbf,83a5fe9650c36fa2a416f9da1e4c63b8432fea4b,8081c782efa276f45e4df1f04d4464f760ff9d85,Wed Jan 06 11:56:06 CET 2016,core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java,"if (!lifecycle.started()) {             return;         }         try {             final UpdateTask<T> updateTask = new UpdateTask<>(source, task, config, executor, listener);             synchronized (updateTasksPerExecutor) {                 updateTasksPerExecutor.computeIfAbsent(executor, k -> new ArrayList<>()).add(updateTask);             }             if (config.timeout() != null) {                 updateTasksExecutor.execute(updateTask, threadPool.scheduler(), config.timeout(), () -> threadPool.generic().execute(() -> {                     if (updateTask.processed.getAndSet(true) == false) {                         logger.debug(""cluster state update task [{}] timed out after [{}]"", source, config.timeout());                         listener.onFailure(source, new ProcessClusterEventTimeoutException(config.timeout(), source));                     }                 }));             } else {                 updateTasksExecutor.execute(updateTask);             }         } catch (EsRejectedExecutionException e) {             // ignore cases where we are shutting down..., there is really nothing interesting             // to be done here...             if (!lifecycle.stoppedOrClosed()) {                 throw e;             }         }","innerSubmitStateUpdateTask(source, task, config, executor, safe(listener, logger));"
345,2078d3f4dbefb4d7f3f306464ce49e8da9fecdbf,83a5fe9650c36fa2a416f9da1e4c63b8432fea4b,8081c782efa276f45e4df1f04d4464f760ff9d85,Wed Jan 06 11:56:06 CET 2016,core/src/test/java/org/elasticsearch/action/support/replication/ClusterStateCreationUtils.java,import static org.elasticsearch.test.ESTestCase.*;,import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_CREATION_DATE;
346,2078d3f4dbefb4d7f3f306464ce49e8da9fecdbf,83a5fe9650c36fa2a416f9da1e4c63b8432fea4b,8081c782efa276f45e4df1f04d4464f760ff9d85,Wed Jan 06 11:56:06 CET 2016,core/src/test/java/org/elasticsearch/cluster/routing/allocation/StartedShardsRoutingTests.java,"final ShardRouting initShard;         final ShardRouting startedShard;         final ShardRouting relocatingShard;         final IndexRoutingTable.Builder indexRoutingTable = IndexRoutingTable.builder(""test"");         if (randomBoolean()) {             initShard = TestShardRouting.newShardRouting(""test"", 0, ""node1"", 1, true, ShardRoutingState.INITIALIZING, 1);             ShardRouting replica = TestShardRouting.newShardRouting(""test"", 0, null, 1, false, ShardRoutingState.UNASSIGNED, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(initShard.shardId()).addShard(initShard).addShard(replica).build());         } else {             ShardRouting primaryShard = TestShardRouting.newShardRouting(""test"", 0, ""node2"", 1, true, ShardRoutingState.STARTED, 1);             initShard = TestShardRouting.newShardRouting(""test"", 0, ""node1"", 1, false, ShardRoutingState.INITIALIZING, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(initShard.shardId()).addShard(primaryShard).addShard(initShard).build());         }         if (randomBoolean()) {             startedShard = TestShardRouting.newShardRouting(""test"", 1, ""node2"", 1, true, ShardRoutingState.STARTED, 1);             ShardRouting replica = TestShardRouting.newShardRouting(""test"", 1, null, 1, false, ShardRoutingState.UNASSIGNED, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(startedShard.shardId()).addShard(startedShard).addShard(replica).build());         } else {             ShardRouting primaryShard = TestShardRouting.newShardRouting(""test"", 1, ""node1"", 1, true, ShardRoutingState.STARTED, 1);             startedShard = TestShardRouting.newShardRouting(""test"", 1, ""node2"", 1, false, ShardRoutingState.STARTED, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(startedShard.shardId()).addShard(primaryShard).addShard(startedShard).build());         }         if (randomBoolean()) {             relocatingShard = TestShardRouting.newShardRouting(""test"", 2, ""node1"", ""node2"", 1, true, ShardRoutingState.RELOCATING, 1);             ShardRouting replica = TestShardRouting.newShardRouting(""test"", 2, null, 1, false, ShardRoutingState.UNASSIGNED, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(relocatingShard.shardId()).addShard(relocatingShard).addShard(replica).build());         } else {             ShardRouting primaryShard = TestShardRouting.newShardRouting(""test"", 2, ""node3"", 1, true, ShardRoutingState.STARTED, 1);             relocatingShard = TestShardRouting.newShardRouting(""test"", 2, ""node1"", ""node2"", 1, false, ShardRoutingState.RELOCATING, 1);             indexRoutingTable.addIndexShard(new IndexShardRoutingTable.Builder(relocatingShard.shardId())                     .addShard(primaryShard).addShard(relocatingShard).build());         }         stateBuilder.routingTable(RoutingTable.builder().add(indexRoutingTable).build());","final ShardRouting initShard = TestShardRouting.newShardRouting(""test"", 0, ""node1"", true, ShardRoutingState.INITIALIZING, 1);         final ShardRouting startedShard = TestShardRouting.newShardRouting(""test"", 1, ""node2"", true, ShardRoutingState.STARTED, 1);         final ShardRouting relocatingShard = TestShardRouting.newShardRouting(""test"", 2, ""node1"", ""node2"", true, ShardRoutingState.RELOCATING, 1);         stateBuilder.routingTable(RoutingTable.builder().add(IndexRoutingTable.builder(""test"")                 .addIndexShard(new IndexShardRoutingTable.Builder(initShard.shardId()).addShard(initShard).build())                 .addIndexShard(new IndexShardRoutingTable.Builder(startedShard.shardId()).addShard(startedShard).build())                 .addIndexShard(new IndexShardRoutingTable.Builder(relocatingShard.shardId()).addShard(relocatingShard).build())).build());"
347,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"logger.debug(""shard is now inactive"");","updateBufferSize(IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER);                 logger.debug(""marking shard as inactive (inactive_time=[{}]) indexing wise"", inactiveTime);"
348,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"final boolean compoundOnFlush = settings.getAsBoolean(EngineConfig.INDEX_COMPOUND_ON_FLUSH, config.isCompoundOnFlush());             if (compoundOnFlush != config.isCompoundOnFlush()) {                 logger.info(""updating {} from [{}] to [{}]"", EngineConfig.INDEX_COMPOUND_ON_FLUSH, config.isCompoundOnFlush(), compoundOnFlush);                 config.setCompoundOnFlush(compoundOnFlush);                 change = true;","final String versionMapSize = settings.get(EngineConfig.INDEX_VERSION_MAP_SIZE, config.getVersionMapSizeSetting());             if (config.getVersionMapSizeSetting().equals(versionMapSize) == false) {                 config.setVersionMapSizeSetting(versionMapSize);"
349,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/main/java/org/elasticsearch/index/translog/Translog.java,"newFile = TranslogWriter.create(config.getType(), shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), config.getBufferSizeBytes(), getChannelFactory());","newFile = TranslogWriter.create(shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), getChannelFactory(), config.getBufferSize());"
350,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java,"this.inactiveTime = this.settings.getAsTime(SHARD_INACTIVE_TIME_SETTING, SHARD_DEFAULT_INACTIVE_TIME);         // we need to have this relatively small to free up heap quickly enough         this.interval = this.settings.getAsTime(SHARD_MEMORY_INTERVAL_TIME_SETTING, TimeValue.timeValueSeconds(5));","// we need to have this relatively small to move a shard from inactive to active fast (enough)         this.interval = this.settings.getAsTime(SHARD_INACTIVE_INTERVAL_TIME_SETTING, TimeValue.timeValueSeconds(30));"
351,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java,public void run() {             runLock.lock();             try {                 runUnlocked();             } finally {                 runLock.unlock();,"public synchronized void run() {             List<IndexShard> availableShards = availableShards();             List<IndexShard> activeShards = new ArrayList<>();             for (IndexShard shard : availableShards) {                 if (!checkIdle(shard)) {                     activeShards.add(shard);                 }             }             int activeShardCount = activeShards.size();             // TODO: we could be smarter here by taking into account how RAM the IndexWriter on each shard             // is actually using (using IW.ramBytesUsed), so that small indices (e.g. Marvel) would not             // get the same indexing buffer as large indices.  But it quickly gets tricky...             if (activeShardCount == 0) {                 return;             }             ByteSizeValue shardIndexingBufferSize = new ByteSizeValue(indexingBuffer.bytes() / activeShardCount);             if (shardIndexingBufferSize.bytes() < minShardIndexBufferSize.bytes()) {                 shardIndexingBufferSize = minShardIndexBufferSize;             }             if (shardIndexingBufferSize.bytes() > maxShardIndexBufferSize.bytes()) {                 shardIndexingBufferSize = maxShardIndexBufferSize;             }             logger.debug(""recalculating shard indexing buffer, total is [{}] with [{}] active shards, each shard set to indexing=[{}]"", indexingBuffer, activeShardCount, shardIndexingBufferSize);             for (IndexShard shard : activeShards) {                 updateShardBuffers(shard, shardIndexingBufferSize);"
352,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,public void deleteShard(IndexShard shard) {             indexBufferRAMBytesUsed.remove(shard);             writingBytes.remove(shard);,public void deleteShard(IndexShard id) {             indexingBuffers.remove(id);
353,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"Long bytes = indexBufferRAMBytesUsed.get(shard);             if (bytes == null) {                 bytes = 0L;                 // First time we are seeing this shard:                 writingBytes.put(shard, 0L);","lastIndexTimeNanos.put(shard, currentTimeInNanos());             if (indexingBuffers.containsKey(shard) == false) {                 // First time we are seeing this shard; start it off with inactive buffers as IndexShard does:                 indexingBuffers.put(shard, IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER);"
354,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, ""4mb"").build());",".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, ""10mb"").build());"
355,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"controller.assertBuffer(shard0, 1);","controller.assertBuffers(shard0, new ByteSizeValue(10, ByteSizeUnit.MB)); // translog is maxed at 64K"
356,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"controller.assertBuffer(shard0, 1);         controller.assertBuffer(shard1, 1);","controller.assertBuffers(shard0, new ByteSizeValue(5, ByteSizeUnit.MB));         controller.assertBuffers(shard1, new ByteSizeValue(5, ByteSizeUnit.MB));"
357,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"controller.assertBuffer(shard2, 1);","controller.assertBuffers(shard2, new ByteSizeValue(10, ByteSizeUnit.MB)); // translog is maxed at 64K"
358,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, ""5mb"")",".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, ""10mb"")             .put(IndexShard.INDEX_SHARD_INACTIVE_TIME_SETTING, ""5s"")"
359,3744fb9dc0ed3f4ccf6503d49a33d287986e64d7,5f4afe842cfc37876e52f5112efaa895bf564bd4,7e3ccf2ee32cef80715b3d47cb30e06426e3002c,Wed Jan 06 10:03:42 CET 2016,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"controller.simulateIndexing(shard0);         controller.assertBuffer(shard0, 0);         controller.assertBuffer(shard1, 2);","controller.assertBuffers(shard0, new ByteSizeValue(10, ByteSizeUnit.MB));         controller.assertInactive(shard1);"
360,83a5fe9650c36fa2a416f9da1e4c63b8432fea4b,31afc8a9a575c1965cfec2faab7e3c001a6cf981,d0a10b337ed414eaf8ef3c60452d1a2f92be6ae8,Fri Dec 18 22:45:34 CET 2015,core/src/test/java/org/elasticsearch/gateway/PrimaryShardAllocatorTests.java,"ShardRouting shard = TestShardRouting.newShardRouting(""test"", 0, null, null, null, 1, true, ShardRoutingState.UNASSIGNED, 0, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));         assertThat(testAllocator.needToFindPrimaryCopy(shard), equalTo(false));","final RoutingAllocation allocation;         if (randomBoolean()) {             allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders(), randomBoolean(), Version.CURRENT);         } else {             allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders(), true, Version.V_2_1_0);         }         boolean changed = testAllocator.allocateUnassigned(allocation);         assertThat(changed, equalTo(false));         assertThat(allocation.routingNodes().unassigned().size(), equalTo(1));         assertThat(allocation.routingNodes().unassigned().iterator().next().shardId(), equalTo(shardId));"
361,83a5fe9650c36fa2a416f9da1e4c63b8432fea4b,31afc8a9a575c1965cfec2faab7e3c001a6cf981,d0a10b337ed414eaf8ef3c60452d1a2f92be6ae8,Fri Dec 18 22:45:34 CET 2015,core/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java,".addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node1.id(), 1, true, ShardRoutingState.STARTED, 10))                                         .addShard(ShardRouting.newUnassigned(shardId.getIndex(), shardId.getId(), null, 1, false, new UnassignedInfo(reason, null)))",".addShard(primaryShard)                                         .addShard(ShardRouting.newUnassigned(shardId.getIndex(), shardId.getId(), null, false, new UnassignedInfo(reason, null)))"
362,83a5fe9650c36fa2a416f9da1e4c63b8432fea4b,31afc8a9a575c1965cfec2faab7e3c001a6cf981,d0a10b337ed414eaf8ef3c60452d1a2f92be6ae8,Fri Dec 18 22:45:34 CET 2015,core/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java,".addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node1.id(), 1, true, ShardRoutingState.STARTED, 10))                                         .addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node2.id(), null, null, 1, false, ShardRoutingState.INITIALIZING, 10, new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED, null)))",".addShard(primaryShard)                                         .addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node2.id(), null, null, false, ShardRoutingState.INITIALIZING, 10, new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED, null)))"
363,6ea266a89c563c5ef6b987df809495cc4cbc7594,4f445688dd59c01f61cfca64e3094e7bbd097cb4,bc8745dcc27caca6d66e646e759017514a021b55,Tue Dec 15 16:33:01 CET 2015,core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java,IndexStoreConfig.INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC_SETTING.getKey()         RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE_SETTING.getKey()         RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE_SETTING.getKey()         RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING.getKey()));,IndexStoreConfig.INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC         RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC));
364,6ea266a89c563c5ef6b987df809495cc4cbc7594,4f445688dd59c01f61cfca64e3094e7bbd097cb4,bc8745dcc27caca6d66e646e759017514a021b55,Tue Dec 15 16:33:01 CET 2015,core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java,".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING.getKey(), chunkSize, ByteSizeUnit.BYTES)                                 .put(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE_SETTING.getKey(), chunkSize, ByteSizeUnit.BYTES)",".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, chunkSize, ByteSizeUnit.BYTES)"
365,6ea266a89c563c5ef6b987df809495cc4cbc7594,4f445688dd59c01f61cfca64e3094e7bbd097cb4,bc8745dcc27caca6d66e646e759017514a021b55,Tue Dec 15 16:33:01 CET 2015,core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java,".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING.getKey(), ""20mb"")                                 .put(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE_SETTING.getKey(), ""512kb"")",".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, ""20mb"")"
366,6ea266a89c563c5ef6b987df809495cc4cbc7594,4f445688dd59c01f61cfca64e3094e7bbd097cb4,bc8745dcc27caca6d66e646e759017514a021b55,Tue Dec 15 16:33:01 CET 2015,core/src/test/java/org/elasticsearch/recovery/RecoverySettingsTests.java,"innerTestSettings(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE_SETTING.getKey(), randomIntBetween(1, 200), ByteSizeUnit.BYTES, new Validator() {             @Override             public void validate(RecoverySettings recoverySettings, int expectedValue) {                 assertEquals(expectedValue, recoverySettings.fileChunkSize().bytesAsInt());             }         });         innerTestSettings(RecoverySettings.INDICES_RECOVERY_TRANSLOG_OPS_SETTING.getKey(), randomIntBetween(1, 200), new Validator() {             @Override             public void validate(RecoverySettings recoverySettings, int expectedValue) {                 assertEquals(expectedValue, recoverySettings.translogOps());             }         });         innerTestSettings(RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE_SETTING.getKey(), randomIntBetween(1, 200), ByteSizeUnit.BYTES, new Validator() {             @Override             public void validate(RecoverySettings recoverySettings, int expectedValue) {                 assertEquals(expectedValue, recoverySettings.translogSize().bytesAsInt());             }         });         innerTestSettings(RecoverySettings.INDICES_RECOVERY_CONCURRENT_STREAMS_SETTING.getKey(), randomIntBetween(1, 200), new Validator() {","innerTestSettings(RecoverySettings.INDICES_RECOVERY_CONCURRENT_STREAMS, randomIntBetween(1, 200), new Validator() {"
367,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,public void checkIdle(long inactiveTimeNS) {         if (System.nanoTime() - lastWriteNS >= inactiveTimeNS) {,final boolean checkIdle(long inactiveTimeNS) { // pkg private for testing         Engine engineOrNull = getEngineOrNull();         if (engineOrNull != null && System.nanoTime() - engineOrNull.getLastWriteNanos() >= inactiveTimeNS) {
368,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/main/java/org/elasticsearch/index/translog/Translog.java,"newFile = TranslogWriter.create(config.getType(), shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), config.getBufferSizeBytes());","newFile = TranslogWriter.create(config.getType(), shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), config.getBufferSize(), getChannelFactory());"
369,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java,"this.inactiveTime = this.settings.getAsTime(SHARD_INACTIVE_TIME_SETTING, TimeValue.timeValueMinutes(5));         // we need to have this relatively small to free up heap quickly enough         this.interval = this.settings.getAsTime(SHARD_MEMORY_INTERVAL_TIME_SETTING, TimeValue.timeValueSeconds(5));","// we need to have this relatively small to move a shard from inactive to active fast (enough)         this.interval = this.settings.getAsTime(SHARD_INACTIVE_INTERVAL_TIME_SETTING, TimeValue.timeValueSeconds(30));"
370,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java,"logger.debug(""using indexing buffer size [{}] with {} [{}], {} [{}]"",","logger.debug(""using indexing buffer size [{}], with {} [{}], {} [{}], {} [{}]"","
371,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java,"// Fast check to sum up how much heap all shards' indexing buffers are using now:             long totalBytesUsed = 0;             for (ShardId shardId : availableShards()) {                 Long refreshingBytes = refreshingBytes.get(shardId);                 // Give shard a chance to transition to inactive so sync'd flush can happen:                 checkIdle(shardId, inactiveTime.nanos());                 // nocommit explain why order is important here!                 Long refreshingBytes = refreshingBytes.get(shardId);                 long shardBytesUsed = getIndexBufferRAMBytesUsed(shardId);                 if (refreshingBytes != null) {                     // Only count up bytes not already being refreshed:                     shardBytesUsed -= refreshingBytes;                     // If the refresh completed just after we pulled refreshingBytes and before we pulled index buffer bytes, then we could                     // have a negative value here:                     if (shardBytesUsed < 0) {                         continue;","ByteSizeValue shardIndexingBufferSize = new ByteSizeValue(indexingBuffer.bytes() / activeShardCount);             if (shardIndexingBufferSize.bytes() < minShardIndexBufferSize.bytes()) {                 shardIndexingBufferSize = minShardIndexBufferSize;             }             if (shardIndexingBufferSize.bytes() > maxShardIndexBufferSize.bytes()) {                 shardIndexingBufferSize = maxShardIndexBufferSize;             }             ByteSizeValue shardTranslogBufferSize = new ByteSizeValue(translogBuffer.bytes() / activeShardCount);             if (shardTranslogBufferSize.bytes() < minShardTranslogBufferSize.bytes()) {                 shardTranslogBufferSize = minShardTranslogBufferSize;             }             if (shardTranslogBufferSize.bytes() > maxShardTranslogBufferSize.bytes()) {                 shardTranslogBufferSize = maxShardTranslogBufferSize;             }             logger.debug(""recalculating shard indexing buffer, total is [{}] with [{}] active shards, each shard set to indexing=[{}], translog=[{}]"", indexingBuffer, activeShardCount, shardIndexingBufferSize, shardTranslogBufferSize);             for (IndexShard shard : activeShards) {                 updateShardBuffers(shard, shardIndexingBufferSize, shardTranslogBufferSize);"
372,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java,"// force the shard to become idle now:         indicesService.indexService(""test"").getShardOrNull(0).checkIdle(0);         assertBusy(new Runnable() { // should be very very quick             @Override             public void run() {","Boolean result = indicesService.indexService(""test"").getShardOrNull(0).checkIdle(0);         assertEquals(Boolean.TRUE, result);         assertBusy(() -> {"
373,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,".put(SHARD_MEMORY_INTERVAL_TIME_SETTING, ""200h"") // disable it",".put(SHARD_INACTIVE_INTERVAL_TIME_SETTING, ""200h"") // disable it                     .put(IndexShard.INDEX_SHARD_INACTIVE_TIME_SETTING, ""1ms"") // nearly immediate"
374,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,protected List<ShardId> availableShards() {             return new ArrayList<>(indexBufferRAMBytesUsed.keySet());,protected List<IndexShard> availableShards() {             return new ArrayList<>(indexingBuffers.keySet());
375,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"public void simulateIndexing(ShardId shardId) {             Long bytes = indexBufferRAMBytesUsed.get(shardId);             if (bytes == null) {                 bytes = 0L;             }             // Each doc we index takes up a megabyte!             bytes += 1024*1024;             indexBufferRAMBytesUsed.put(shardId, bytes);             forceCheck();         }","public void simulateIndexing(IndexShard shard) {             lastIndexTimeNanos.put(shard, currentTimeInNanos());             if (indexingBuffers.containsKey(shard) == false) {                 // First time we are seeing this shard; start it off with inactive buffers as IndexShard does:                 indexingBuffers.put(shard, IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER);                 translogBuffers.put(shard, IndexingMemoryController.INACTIVE_SHARD_TRANSLOG_BUFFER);             }             activeShards.add(shard);             forceCheck();         }"
376,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, ""4mb"").build());         final ShardId shard1 = new ShardId(""test"", 1);         controller.simulateIndexing(shard1);         controller.assertBuffer(shard1, new ByteSizeValue(1, ByteSizeUnit.MB));",".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, ""10mb"")             .put(IndexingMemoryController.TRANSLOG_BUFFER_SIZE_SETTING, ""100kb"").build());         IndexShard shard0 = test.getShard(0);         controller.simulateIndexing(shard0);         controller.assertBuffers(shard0, new ByteSizeValue(10, ByteSizeUnit.MB), new ByteSizeValue(64, ByteSizeUnit.KB)); // translog is maxed at 64K"
377,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"final ShardId shard2 = new ShardId(""test"", 2);         controller.simulateIndexing(shard2);         controller.assertBuffer(shard1, new ByteSizeValue(1, ByteSizeUnit.MB));         controller.assertBuffer(shard2, new ByteSizeValue(1, ByteSizeUnit.MB));","IndexShard shard1 = test.getShard(1);         controller.simulateIndexing(shard1);         controller.assertBuffers(shard0, new ByteSizeValue(5, ByteSizeUnit.MB), new ByteSizeValue(50, ByteSizeUnit.KB));         controller.assertBuffers(shard1, new ByteSizeValue(5, ByteSizeUnit.MB), new ByteSizeValue(50, ByteSizeUnit.KB));"
378,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"final ShardId shard3 = new ShardId(""test"", 3);         controller.simulateIndexing(shard3);         controller.assertBuffer(shard3, new ByteSizeValue(1, ByteSizeUnit.MB));","IndexShard shard2 = test.getShard(2);         controller.simulateIndexing(shard2);         controller.assertBuffers(shard2, new ByteSizeValue(10, ByteSizeUnit.MB), new ByteSizeValue(64, ByteSizeUnit.KB)); // translog is maxed at 64K"
379,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, ""5mb"")",".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, ""10mb"")             .put(IndexingMemoryController.TRANSLOG_BUFFER_SIZE_SETTING, ""100kb"")             .put(IndexShard.INDEX_SHARD_INACTIVE_TIME_SETTING, ""5s"")"
380,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"// index into one shard only, crosses the 5mb limit, so shard1 is refreshed         controller.simulateIndexing(shard1);         controller.simulateIndexing(shard1);         controller.assertBuffer(shard1, new ByteSizeValue(0, ByteSizeUnit.MB));         controller.assertBuffer(shard2, new ByteSizeValue(2, ByteSizeUnit.MB));","// both shards now inactive         controller.assertInactive(shard0);         controller.assertInactive(shard1);         // index into one shard only, see it becomes active         controller.simulateIndexing(shard0);         controller.assertBuffers(shard0, new ByteSizeValue(10, ByteSizeUnit.MB), new ByteSizeValue(64, ByteSizeUnit.KB));         controller.assertInactive(shard1);"
381,27d8509f0e95e598d725bc713da07d5b433631c6,99e328c9bfb87a84943ab3357d5d2f0cc07c12a5,7bca97bba6ac012f875d758cc5f49546396b20e2,Tue Dec 15 11:07:19 CET 2015,core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java,"controller.simulateIndexing(shard2);         controller.simulateIndexing(shard2);         controller.assertBuffer(shard2, new ByteSizeValue(4, ByteSizeUnit.MB));         controller.simulateIndexing(shard2);         controller.simulateIndexing(shard2);         // shard2 crossed 5 mb and is now cleared:         controller.assertBuffer(shard2, new ByteSizeValue(0, ByteSizeUnit.MB));","controller.incrementTimeSec(3); // increment but not enough to become inactive         controller.forceCheck();         controller.assertBuffers(shard0, new ByteSizeValue(10, ByteSizeUnit.MB), new ByteSizeValue(64, ByteSizeUnit.KB));         controller.assertInactive(shard1);         controller.incrementTimeSec(3); // increment some more         controller.forceCheck();         controller.assertInactive(shard0);         controller.assertInactive(shard1);         // index some and shard becomes immediately active         controller.simulateIndexing(shard1);         controller.assertInactive(shard0);         controller.assertBuffers(shard1, new ByteSizeValue(10, ByteSizeUnit.MB), new ByteSizeValue(64, ByteSizeUnit.KB));"
382,503a166b7148a79ac6221894eca4835ef68d3480,a8382de09d88ead31fd52a97dda15572f92b1360,afcaa593ae7c5cc4e337e779d307ad31a9010cae,Fri Dec 11 14:32:16 CET 2015,core/src/main/java/org/elasticsearch/action/delete/DeleteResponse.java,RestStatus status = getShardInfo().status();         if (isFound() == false) {             status = NOT_FOUND;         }         return status;,if (found == false) {             return RestStatus.NOT_FOUND;         }         return super.status();
383,503a166b7148a79ac6221894eca4835ef68d3480,a8382de09d88ead31fd52a97dda15572f92b1360,afcaa593ae7c5cc4e337e779d307ad31a9010cae,Fri Dec 11 14:32:16 CET 2015,core/src/main/java/org/elasticsearch/action/delete/DeleteResponse.java,"ActionWriteResponse.ShardInfo shardInfo = getShardInfo();         builder.field(Fields.FOUND, found)             .field(Fields._INDEX, index)             .field(Fields._TYPE, type)             .field(Fields._ID, id)             .field(Fields._VERSION, version)             .value(shardInfo);","builder.field(Fields.FOUND, isFound());         super.toXContent(builder, params);"
384,503a166b7148a79ac6221894eca4835ef68d3480,a8382de09d88ead31fd52a97dda15572f92b1360,afcaa593ae7c5cc4e337e779d307ad31a9010cae,Fri Dec 11 14:32:16 CET 2015,core/src/main/java/org/elasticsearch/action/index/IndexResponse.java,RestStatus status = getShardInfo().status();         if (created) {             status = CREATED;         }         return status;,if (created) {             return RestStatus.CREATED;         }         return super.status();
385,503a166b7148a79ac6221894eca4835ef68d3480,a8382de09d88ead31fd52a97dda15572f92b1360,afcaa593ae7c5cc4e337e779d307ad31a9010cae,Fri Dec 11 14:32:16 CET 2015,core/src/main/java/org/elasticsearch/action/index/IndexResponse.java,"ActionWriteResponse.ShardInfo shardInfo = getShardInfo();         builder.field(Fields._INDEX, index)             .field(Fields._TYPE, type)             .field(Fields._ID, id)             .field(Fields._VERSION, version);         shardInfo.toXContent(builder, params);         builder.field(Fields.CREATED, created);","super.toXContent(builder, params);         builder.field(Fields.CREATED, isCreated());"
386,b8367817174790c9ebda17e1ab30362783792335,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,7f4ef9f586236aa518ee9d29b58775300901804f,Fri Dec 11 09:16:21 CET 2015,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"public Engine.Delete prepareDeleteOnReplica(String type, String id, long version, VersionType versionType) {         final DocumentMapper documentMapper = docMapper(type).getDocumentMapper();         return prepareDelete(type, id, documentMapper.uidMapper().term(Uid.createUid(type, id)), version, versionType, Engine.Operation.Origin.REPLICA);     }","public Engine.Delete prepareDeleteOnReplica(String type, String id, long seqNo, long version, VersionType versionType) {         if (shardRouting.primary() && shardRouting.isRelocationTarget() == false) {             throw new IllegalIndexShardStateException(shardId, state, ""shard is not a replica"");         }         final DocumentMapper documentMapper = docMapper(type).getDocumentMapper();         final Term uid = documentMapper.uidMapper().term(Uid.createUid(type, id));         return prepareDelete(type, id, uid, seqNo, version, versionType, Engine.Operation.Origin.REPLICA);     }"
387,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java,"request.seqNo(delete.seqNo());         assert request.versionType().validateVersionForWrites(request.version());         return new WriteResult<>(new DeleteResponse(indexShard.shardId(), request.type(), request.id(),                 delete.seqNo(), delete.version(), delete.found()), delete.getTranslogLocation());","assert request.versionType().validateVersionForWrites(request.version());         return new WriteResult<>(             new DeleteResponse(indexShard.shardId(), request.type(), request.id(), delete.version(), delete.found()),             delete.getTranslogLocation());"
388,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java,"""Dynamics mappings are not available on the node that holds the primary yet"");             }         }         final boolean created = indexShard.index(operation);         // update the version on request so it will happen on the replicas         final long version = operation.version();         request.version(version);         request.versionType(request.versionType().versionTypeForReplicationAndRecovery());         request.seqNo(operation.seqNo());         assert request.versionType().validateVersionForWrites(request.version());         return new WriteResult<>(new IndexResponse(shardId, request.type(), request.id(), request.seqNo(), request.version(), created), operation.getTranslogLocation());","""Dynamic mappings are not available on the node that holds the primary yet"");             }         }         final boolean created = indexShard.index(operation);         // update the version on request so it will happen on the replicas         final long version = operation.version();         request.version(version);         request.versionType(request.versionType().versionTypeForReplicationAndRecovery());         assert request.versionType().validateVersionForWrites(request.version());         return new WriteResult<>(new IndexResponse(shardId, request.type(), request.id(), request.version(), created), operation.getTranslogLocation());"
389,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"try (Releasable shardReference = getIndexShardOperationsCounter(request.internalShardId, request.primaryTerm)) {                 shardOperationOnReplica(request.internalShardId, request);","assert request.shardId() != null : ""request shardId must be set"";             try (Releasable ignored = getIndexShardOperationsCounter(request.shardId())) {                 shardOperationOnReplica(request);                 if (logger.isTraceEnabled()) {                     logger.trace(""action [{}] completed on shard [{}] for request [{}]"", transportReplicaAction, request.shardId(), request);                 }"
390,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"public static void processAfterWrite(boolean refresh, IndexShard indexShard, Translog.Location location) {","protected final void processAfterWrite(boolean refresh, IndexShard indexShard, Translog.Location location) {"
391,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java,"UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(),                                 response.getId(), response.getSeqNo(), response.getVersion(), response.isCreated());","UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.isCreated());"
392,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java,"UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(),                                 response.getSeqNo(), response.getVersion(), response.isCreated());","UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.isCreated());"
393,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java,"UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(),                                 response.getId(), response.getSeqNo(), response.getVersion(), false);","UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), false);"
394,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java,"final ShardId shardId = new ShardId(request.index(), request.shardId());","final ShardId shardId = new ShardId(getResult.getIndex(), request.shardId());"
395,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java,"UpdateResponse update = new UpdateResponse(new ShardId(getResult.getIndex(), request.shardId()), getResult.getType(), getResult.getId(), getResult.getVersion(), false);","UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(), getResult.getVersion(), false);"
396,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/action/update/UpdateResponse.java,"this(new ShardInfo(0, 0), shardId, type, id, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, created);","this(new ShardInfo(0, 0), shardId, type, id, version, created);"
397,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"return prepareIndex(docMapper(source.type()), source, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, versionType, Engine.Operation.Origin.PRIMARY);","return prepareIndex(docMapper(source.type()), source, version, versionType, Engine.Operation.Origin.PRIMARY);"
398,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java,"builder.startObject(itemResponse.getOpType());                     if (itemResponse.isFailed()) {                         builder.field(Fields._INDEX, itemResponse.getIndex());                         builder.field(Fields._TYPE, itemResponse.getType());                         builder.field(Fields._ID, itemResponse.getId());                         builder.field(Fields.STATUS, itemResponse.getFailure().getStatus().getStatus());                         builder.startObject(Fields.ERROR);                         ElasticsearchException.toXContent(builder, request, itemResponse.getFailure().getCause());                         builder.endObject();                     } else {                         final DocWriteResponse docResponse = itemResponse.getResponse();                         docResponse.toXContent(builder, request);                         RestStatus status = docResponse.getShardInfo().status();                         if (docResponse instanceof DeleteResponse) {                             DeleteResponse deleteResponse = (DeleteResponse) docResponse;                             if (deleteResponse.isFound() == false) {                                 status = RestStatus.NOT_FOUND;                             }                         } else if (docResponse instanceof IndexResponse) {                             IndexResponse indexResponse = (IndexResponse) docResponse;                             if (indexResponse.isCreated()) {                                 status = RestStatus.CREATED;                             }                         } else if (docResponse instanceof UpdateResponse) {                             UpdateResponse updateResponse = (UpdateResponse) docResponse;                             if (updateResponse.isCreated()) {                                 status = RestStatus.CREATED;                             }                         }                         builder.field(Fields.STATUS, status.getStatus());                     }                     builder.endObject();","itemResponse.toXContent(builder, request);"
399,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/rest/action/delete/RestDeleteAction.java,"client.delete(deleteRequest, new RestBuilderListener<DeleteResponse>(channel) {             @Override             public RestResponse buildResponse(DeleteResponse result, XContentBuilder builder) throws Exception {                 builder.startObject();                 result.toXContent(builder, request);                 builder.endObject();                 RestStatus status = result.getShardInfo().status();                 if (!result.isFound()) {                     status = NOT_FOUND;                 }                 return new BytesRestResponse(status, builder);             }         });","client.delete(deleteRequest, new RestStatusToXContentListener<>(channel));"
400,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/rest/action/index/RestIndexAction.java,"client.index(indexRequest, new RestBuilderListener<IndexResponse>(channel) {             @Override             public RestResponse buildResponse(IndexResponse response, XContentBuilder builder) throws Exception {                 builder.startObject();                 response.toXContent(builder, request);                 RestStatus status = response.getShardInfo().status();                 if (response.isCreated()) {                     status = CREATED;                 }                 return new BytesRestResponse(status, builder);             }         });","client.index(indexRequest, new RestStatusToXContentListener<>(channel));"
401,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/main/java/org/elasticsearch/rest/action/update/RestUpdateAction.java,"client.update(updateRequest, new RestBuilderListener<UpdateResponse>(channel) {             @Override             public RestResponse buildResponse(UpdateResponse response, XContentBuilder builder) throws Exception {                 builder.startObject();                 response.toXContent(builder, request);                 builder.endObject();                 RestStatus status = response.getShardInfo().status();                 if (response.isCreated()) {                     status = CREATED;                 }                 return new BytesRestResponse(status, builder);             }         });","client.update(updateRequest, new RestStatusToXContentListener<>(channel));"
402,68f1a87c481bc9d7ad77e725a65fb38c8bb5e01b,95e8a39b9bf603799ccd477795f76af6ccdc6420,fafeb3abddd8e691e966064bfd3131714e20d8a2,Thu Dec 10 17:50:56 CET 2015,core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java,final Request request = new Request();         final long primaryTerm = randomInt(200);         request.primaryTerm(primaryTerm);         PlainActionFuture<Response> listener = new PlainActionFuture<>();,final Request request = new Request(shardId);         final PlainActionFuture<Response> listener = new PlainActionFuture<>();
403,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java,"return TransportIndexAction.executeIndexRequestOnPrimary(indexRequest, indexShard, mappingUpdatedAction);","return executeIndexRequestOnPrimary(indexRequest, indexShard);"
404,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java,"final WriteResult<IndexResponse> result = executeIndexRequestOnPrimary(request, indexShard, mappingUpdatedAction);","final WriteResult<IndexResponse> result = executeIndexRequestOnPrimary(request, indexShard);"
405,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/cluster/ClusterState.java,"builder.startObject(""primary_terms"");                 for (int shard = 0; shard < indexMetaData.getNumberOfShards(); shard++) {                     builder.field(Integer.toString(shard), indexMetaData.primaryTerm(shard));",builder.startObject(IndexMetaData.KEY_ACTIVE_ALLOCATIONS);                 for (IntObjectCursor<Set<String>> cursor : indexMetaData.getActiveAllocationIds()) {                     builder.startArray(String.valueOf(cursor.key));                     for (String allocationId : cursor.value) {                         builder.value(allocationId);                     }                     builder.endArray();
406,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java,"if (Arrays.equals(primaryTerms, that.primaryTerms) == false) {",if (!activeAllocationIds.equals(that.activeAllocationIds)) {
407,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java,"primaryTerms = after.primaryTerms;             mappings = DiffableUtils.diff(before.mappings, after.mappings);             aliases = DiffableUtils.diff(before.aliases, after.aliases);             customs = DiffableUtils.diff(before.customs, after.customs);","mappings = DiffableUtils.diff(before.mappings, after.mappings, DiffableUtils.getStringKeySerializer());             aliases = DiffableUtils.diff(before.aliases, after.aliases, DiffableUtils.getStringKeySerializer());             customs = DiffableUtils.diff(before.customs, after.customs, DiffableUtils.getStringKeySerializer());             activeAllocationIds = DiffableUtils.diff(before.activeAllocationIds, after.activeAllocationIds,                     DiffableUtils.getVIntKeySerializer(), DiffableUtils.StringSetValueSerializer.getInstance());"
408,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java,"primaryTerms = in.readVLongArray();             mappings = DiffableUtils.readImmutableOpenMapDiff(in, MappingMetaData.PROTO);             aliases = DiffableUtils.readImmutableOpenMapDiff(in, AliasMetaData.PROTO);             customs = DiffableUtils.readImmutableOpenMapDiff(in, new DiffableUtils.KeyedReader<Custom>() {","mappings = DiffableUtils.readImmutableOpenMapDiff(in, DiffableUtils.getStringKeySerializer(), MappingMetaData.PROTO);             aliases = DiffableUtils.readImmutableOpenMapDiff(in, DiffableUtils.getStringKeySerializer(), AliasMetaData.PROTO);             customs = DiffableUtils.readImmutableOpenMapDiff(in, DiffableUtils.getStringKeySerializer(),                     new DiffableUtils.DiffableValueSerializer<String, Custom>() {"
409,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java,"if (primaryTerms == null) {                 initializePrimaryTerms();             } else if (primaryTerms.length != numberOfShards()) {                 throw new IllegalStateException(""primaryTerms length is ["" + primaryTerms.length                         + ""] but should be equal to number of shards ["" + numberOfShards() + ""]"");             }             return new IndexMetaData(index, version, primaryTerms, state, tmpSettings, mappings.build(), tmpAliases.build(), customs.build());","Integer maybeNumberOfShards = settings.getAsInt(SETTING_NUMBER_OF_SHARDS, null);             if (maybeNumberOfShards == null) {                 throw new IllegalArgumentException(""must specify numberOfShards for index ["" + index + ""]"");             }             int numberOfShards = maybeNumberOfShards;             if (numberOfShards <= 0) {                 throw new IllegalArgumentException(""must specify positive number of shards for index ["" + index + ""]"");             }             Integer maybeNumberOfReplicas = settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, null);             if (maybeNumberOfReplicas == null) {                 throw new IllegalArgumentException(""must specify numberOfReplicas for index ["" + index + ""]"");             }             int numberOfReplicas = maybeNumberOfReplicas;             if (numberOfReplicas < 0) {                 throw new IllegalArgumentException(""must specify non-negative number of shards for index ["" + index + ""]"");             }             // fill missing slots in activeAllocationIds with empty set if needed and make all entries immutable             ImmutableOpenIntMap.Builder<Set<String>> filledActiveAllocationIds = ImmutableOpenIntMap.builder();             for (int i = 0; i < numberOfShards; i++) {                 if (activeAllocationIds.containsKey(i)) {                     filledActiveAllocationIds.put(i, Collections.unmodifiableSet(new HashSet<>(activeAllocationIds.get(i))));                 } else {                     filledActiveAllocationIds.put(i, Collections.emptySet());                 }             }             Map<String, String> requireMap = settings.getByPrefix(""index.routing.allocation.require."").getAsMap();             final DiscoveryNodeFilters requireFilters;             if (requireMap.isEmpty()) {                 requireFilters = null;             } else {                 requireFilters = DiscoveryNodeFilters.buildFromKeyValue(AND, requireMap);             }             Map<String, String> includeMap = settings.getByPrefix(""index.routing.allocation.include."").getAsMap();             final DiscoveryNodeFilters includeFilters;             if (includeMap.isEmpty()) {                 includeFilters = null;             } else {                 includeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, includeMap);             }             Map<String, String> excludeMap = settings.getByPrefix(""index.routing.allocation.exclude."").getAsMap();             final DiscoveryNodeFilters excludeFilters;             if (excludeMap.isEmpty()) {                 excludeFilters = null;             } else {                 excludeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, excludeMap);             }             Version indexCreatedVersion = Version.indexCreated(settings);             Version indexUpgradedVersion = settings.getAsVersion(IndexMetaData.SETTING_VERSION_UPGRADED, indexCreatedVersion);             String stringLuceneVersion = settings.get(SETTING_VERSION_MINIMUM_COMPATIBLE);             final org.apache.lucene.util.Version minimumCompatibleLuceneVersion;             if (stringLuceneVersion != null) {                 try {                     minimumCompatibleLuceneVersion = org.apache.lucene.util.Version.parse(stringLuceneVersion);                 } catch (ParseException ex) {                     throw new IllegalStateException(""Cannot parse lucene version ["" + stringLuceneVersion + ""] in the ["" + SETTING_VERSION_MINIMUM_COMPATIBLE +""] setting"", ex);                 }             } else {                 minimumCompatibleLuceneVersion = null;             }             return new IndexMetaData(index, version, state, numberOfShards, numberOfReplicas, tmpSettings, mappings.build(),                     tmpAliases.build(), customs.build(), filledActiveAllocationIds.build(), requireFilters, includeFilters, excludeFilters,                     indexCreatedVersion, indexUpgradedVersion, minimumCompatibleLuceneVersion);"
410,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java,builder.startArray(Fields.PRIMARY_TERMS);             for (int i = 0; i < indexMetaData.getNumberOfShards(); i++) {                 builder.value(indexMetaData.primaryTerm(i));             }             builder.endArray();,builder.startObject(KEY_ACTIVE_ALLOCATIONS);             for (IntObjectCursor<Set<String>> cursor : indexMetaData.activeAllocationIds) {                 builder.startArray(String.valueOf(cursor.key));                 for (String allocationId : cursor.value) {                     builder.value(allocationId);                 }                 builder.endArray();             }             builder.endObject();
411,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java,"RoutingAllocation.Result result = buildChangedResult(clusterState.metaData(), routingNodes);","final RoutingAllocation.Result result = buildChangedResult(clusterState.metaData(), routingNodes);"
412,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java,"// make sure index meta data and routing tables are in sync w.r.t primaryTerm         MetaData.Builder metaDataBuilder = null;         for (IndexRoutingTable indexRoutingTable : newRoutingTable) {             final IndexMetaData indexMetaData = currentMetaData.index(indexRoutingTable.getIndex());             if (indexMetaData == null) {                 throw new IllegalStateException(""no metadata found for index ["" + indexRoutingTable.index() + ""]"");             }             IndexMetaData.Builder indexMetaDataBuilder = null;             for (IndexShardRoutingTable shardRoutings : indexRoutingTable) {                 final ShardRouting primary = shardRoutings.primaryShard();                 if (primary == null) {                     throw new IllegalStateException(""missing primary shard for "" + shardRoutings.shardId());                 }                 final int shardId = primary.shardId().id();                 if (primary.primaryTerm() != indexMetaData.primaryTerm(shardId)) {                     assert primary.primaryTerm() > indexMetaData.primaryTerm(shardId) :                             ""primary term should only increase. Index primary term [""                                     + indexMetaData.primaryTerm(shardId) + ""] but primary routing is "" + primary;                     if (indexMetaDataBuilder == null) {                         indexMetaDataBuilder = IndexMetaData.builder(indexMetaData);                     }                     indexMetaDataBuilder.primaryTerm(shardId, primary.primaryTerm());","// make sure index meta data and routing tables are in sync w.r.t active allocation ids         MetaData.Builder metaDataBuilder = null;         for (IndexRoutingTable indexRoutingTable : newRoutingTable) {             final IndexMetaData indexMetaData = currentMetaData.index(indexRoutingTable.getIndex());             if (indexMetaData == null) {                 throw new IllegalStateException(""no metadata found for index ["" + indexRoutingTable.index() + ""]"");             }             IndexMetaData.Builder indexMetaDataBuilder = null;             for (IndexShardRoutingTable shardRoutings : indexRoutingTable) {                 Set<String> activeAllocationIds = shardRoutings.activeShards().stream()                         .map(ShardRouting::allocationId)                         .filter(Objects::nonNull)                         .map(AllocationId::getId)                         .collect(Collectors.toSet());                 // only update active allocation ids if there is an active shard                 if (activeAllocationIds.isEmpty() == false) {                     // get currently stored allocation ids                     Set<String> storedAllocationIds = indexMetaData.activeAllocationIds(shardRoutings.shardId().id());                     if (activeAllocationIds.equals(storedAllocationIds) == false) {                         if (indexMetaDataBuilder == null) {                             indexMetaDataBuilder = IndexMetaData.builder(indexMetaData);                         }                         indexMetaDataBuilder.putActiveAllocationIds(shardRoutings.shardId().id(), activeAllocationIds);                     }"
413,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java,"new ClusterStateHealth(clusterState.getMetaData(), clusterState.routingTable()),","new ClusterStateHealth(clusterState.getMetaData(), result.routingTable()),"
414,95e8a39b9bf603799ccd477795f76af6ccdc6420,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,54022774620dd1ec5789576a9985eb96f5493152,Mon Dec 07 14:03:31 CET 2015,core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java,"threads[i] = new Thread(new Runnable() {                 @Override                 public void run() {                     try {                         downLatch.await();                         for (int opCount = 0; opCount < opsPerThread; opCount++) {                             Translog.Operation op;                             switch (randomFrom(Translog.Operation.Type.values())) {                                 case CREATE:                                 case INDEX:                                     op = new Translog.Index(""test"", threadId + ""_"" + opCount,                                             randomUnicodeOfLengthBetween(1, 20 * 1024).getBytes(""UTF-8""));                                     break;                                 case DELETE:                                     op = new Translog.Delete(new Term(""_uid"", threadId + ""_"" + opCount),                                             opCount, 1 + randomInt(100000),                                             randomFrom(VersionType.values()));                                     break;                                 default:                                     throw new ElasticsearchException(""not supported op type"");                             }                             Translog.Location loc = translog.add(op);                             writtenOperations.add(new LocationOperation(op, loc));                         }                     } catch (Throwable t) {                         threadExceptions[threadId] = t;                     }                 }             });","threads[i] = new TranslogThread(translog, downLatch, opsPerThread, threadId, writtenOperations, threadExceptions);"
415,bffd55dd040c6918a0d2bb5cfd0c62e9b9ea72d3,3d061a8e6259006b0a849b0a7f059783af25b9f6,c512cc5248d488a886d03ab52cf4a31cf11d2126,Tue Nov 24 20:04:46 CET 2015,core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java,"// TODO: find a cleaner way to handle existing root mappings and using their field type as the default.             // the vast majority of these root mappers only need the existing type for backwards compatibility, since             // the pre 2.0 field type settings could be modified             // UID first so it will be the first stored field to load (so will benefit from ""fields: []"" early termination             this.rootMappers.put(UidFieldMapper.class, new UidFieldMapper(indexSettings, mapperService.fullName(UidFieldMapper.NAME)));             this.rootMappers.put(IdFieldMapper.class, new IdFieldMapper(indexSettings, mapperService.fullName(IdFieldMapper.NAME)));             this.rootMappers.put(RoutingFieldMapper.class, new RoutingFieldMapper(indexSettings, mapperService.fullName(RoutingFieldMapper.NAME)));             // add default mappers, order is important (for example analyzer should come before the rest to set context.analyzer)             this.rootMappers.put(IndexFieldMapper.class, new IndexFieldMapper(indexSettings, mapperService.fullName(IndexFieldMapper.NAME)));             this.rootMappers.put(SourceFieldMapper.class, new SourceFieldMapper(indexSettings));             this.rootMappers.put(TypeFieldMapper.class, new TypeFieldMapper(indexSettings, mapperService.fullName(TypeFieldMapper.NAME)));             this.rootMappers.put(AllFieldMapper.class, new AllFieldMapper(indexSettings, mapperService.fullName(AllFieldMapper.NAME)));             this.rootMappers.put(TimestampFieldMapper.class, new TimestampFieldMapper(indexSettings, mapperService.fullName(TimestampFieldMapper.NAME)));             this.rootMappers.put(TTLFieldMapper.class, new TTLFieldMapper(indexSettings));             this.rootMappers.put(VersionFieldMapper.class, new VersionFieldMapper(indexSettings));             this.rootMappers.put(SeqNoFieldMapper.class, new SeqNoFieldMapper(indexSettings));             this.rootMappers.put(ParentFieldMapper.class, new ParentFieldMapper(indexSettings, mapperService.fullName(ParentFieldMapper.NAME), /* parent type */builder.name()));             // _field_names last so that it can see all other fields             this.rootMappers.put(FieldNamesFieldMapper.class, new FieldNamesFieldMapper(indexSettings, mapperService.fullName(FieldNamesFieldMapper.NAME)));","for (Map.Entry<String, MetadataFieldMapper.TypeParser> entry : mapperService.mapperRegistry.getMetadataMapperParsers().entrySet()) {                 final String name = entry.getKey();                 final TypeParser parser = entry.getValue();                 final MetadataFieldMapper metadataMapper = parser.getDefault(indexSettings, mapperService.fullName(name), builder.name());                 metadataMappers.put(metadataMapper.getClass(), metadataMapper);             }"
416,8de24c2f9f87435224552f95e6a34987bc865522,e2e38b3d713e86bd8f87c5646074307e2df1671a,c1264b926fb3967f7d2d25f1576549b304ffeab3,Mon Nov 23 13:58:27 CET 2015,core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java,"primaryResponse.v2().primaryTerm(primary.primaryTerm());                 logger.trace(""operation completed on primary [{}]"", primary);","if (logger.isTraceEnabled()) {                     logger.trace(""operation completed on primary [{}], action [{}], request [{}], cluster state version [{}]"", primary, actionName, por.request, observer.observedState().version());                 }"
417,d68b8101e1551576122c0e8d4b47d6a9c5475190,1e5af7b6f382b822df5ba188b5fc7ff750ba17cc,6a2fa73fb5309935ed5b42d4cfa8f47b47dacc59,Thu Nov 19 11:04:36 CET 2015,core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java,"return buildChangedResult(clusterState.metaData(), routingNodes);","RoutingTable routingTable = new RoutingTable.Builder().updateNodes(routingNodes).build().validateRaiseException(clusterState.metaData());         RoutingAllocation.Result result = new RoutingAllocation.Result(true, routingTable);         String startedShardsAsString = firstListElementsToCommaDelimitedString(startedShards, s -> s.shardId().toString());         logClusterHealthStateChange(                 new ClusterStateHealth(clusterState)                 new ClusterStateHealth(clusterState.metaData(), routingTable),                 ""shards started ["" + startedShardsAsString + ""] ...""         );         return result;"
418,d68b8101e1551576122c0e8d4b47d6a9c5475190,1e5af7b6f382b822df5ba188b5fc7ff750ba17cc,6a2fa73fb5309935ed5b42d4cfa8f47b47dacc59,Thu Nov 19 11:04:36 CET 2015,core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java,"return buildChangedResult(clusterState.metaData(), routingNodes, explanations);","RoutingTable routingTable = new RoutingTable.Builder().updateNodes(routingNodes).build().validateRaiseException(clusterState.metaData());         RoutingAllocation.Result result = new RoutingAllocation.Result(true, routingTable, explanations);         logClusterHealthStateChange(                 new ClusterStateHealth(clusterState)                 new ClusterStateHealth(clusterState.getMetaData(), routingTable),                 ""reroute commands""         );         return result;"
419,d68b8101e1551576122c0e8d4b47d6a9c5475190,1e5af7b6f382b822df5ba188b5fc7ff750ba17cc,6a2fa73fb5309935ed5b42d4cfa8f47b47dacc59,Thu Nov 19 11:04:36 CET 2015,core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java,"clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode(""node1""))).build();         RoutingAllocation.Result result = strategy.reroute(clusterState);         clusterState = ClusterState.builder(clusterState).routingResult(result).build();         clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode(""node2""))).build();         result = strategy.reroute(clusterState);         clusterState = ClusterState.builder(clusterState).routingResult(result).build();","clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode(""node1"")).put(newNode(""node2""))).build();         RoutingTable prevRoutingTable = routingTable;         routingTable = strategy.reroute(clusterState, ""reroute"").routingTable();         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();"
420,d68b8101e1551576122c0e8d4b47d6a9c5475190,1e5af7b6f382b822df5ba188b5fc7ff750ba17cc,6a2fa73fb5309935ed5b42d4cfa8f47b47dacc59,Thu Nov 19 11:04:36 CET 2015,core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java,RoutingTable prevRoutingTable = clusterState.routingTable();         result = strategy.reroute(clusterState);         clusterState = ClusterState.builder(clusterState).routingResult(result).build();,"prevRoutingTable = routingTable;         routingTable = strategy.reroute(clusterState, ""reroute"").routingTable();         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();"
421,d68b8101e1551576122c0e8d4b47d6a9c5475190,1e5af7b6f382b822df5ba188b5fc7ff750ba17cc,6a2fa73fb5309935ed5b42d4cfa8f47b47dacc59,Thu Nov 19 11:04:36 CET 2015,core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java,rerouteResult = allocation.reroute(clusterState);         clusterState = ClusterState.builder(clusterState).routingResult(rerouteResult).build();,"rerouteResult = allocation.reroute(clusterState, ""reroute"");         clusterState = ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();"
422,edef67ffdce72e62dcd2a14e29b8d4427ec6cac4,969b385c59742dad9e97962ad12252f2bbf5f9d1,c335b3a1762080f8cb5b2694985d93f17978474e,Mon Oct 26 11:05:57 CET 2015,core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java,"config.getAnalyzer(), config.getSimilarity(), new CodecService(shardId.index()), config.getEventListener()         , config.getTranslogRecoveryPerformer(), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig, TimeValue.timeValueMinutes(5));","config.getAnalyzer(), config.getSimilarity(), new CodecService(INDEX_SETTINGS, null), config.getEventListener()         , config.getTranslogRecoveryPerformer(), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig);"
423,c618f75b7640365387ad790bb6e485e16990da9f,ca76712de6d2b41a350d13b92e51ebdff39e3df2,5b1ee8bd749ea553a4aad57962a798a4ff98da77,Thu Oct 15 12:02:34 CEST 2015,core/src/main/java/org/elasticsearch/search/SearchService.java,"final IndexService indexService = indicesService.indexServiceSafe(indexShard.shardId().index().name());                             ShardSearchRequest request = new ShardSearchLocalRequest(indexShard.shardId(), indexMetaData.numberOfShards(),                                     SearchType.QUERY_THEN_FETCH, entry.source().build(new QueryParseContext(indexService.queryParserService().indicesQueriesRegistry())), entry.types(), entry.requestCache());","ShardSearchRequest request = new ShardSearchLocalRequest(indexShard.shardId(), indexMetaData.getNumberOfShards(),                                     SearchType.QUERY_THEN_FETCH, entry.source(), entry.types(), entry.requestCache());"
424,d9e11e4b39982930d70ada813a90ca8f5dcebd28,9492223c2b0cab7a7af7873fab7e1801ce75a105,50368b3704d346e8aeec057474a13e1bd3a637d9,Fri Oct 09 18:04:03 CEST 2015,core/src/main/java/org/elasticsearch/index/mapper/Mapper.java,"private final Map<String, TypeParser> typeParsers;","private final Function<String, TypeParser> typeParsers;"
425,23f97c30a094e8557d7ea4b28c2daba5c0ed9bdf,7f435e2f4f3d7e2249781986cf8c72b00e5f301e,072f6ae138cff390a8f28a8024bf3a00fca73904,Wed Oct 07 18:20:27 CEST 2015,core/src/main/java/org/elasticsearch/index/engine/Engine.java,long startTime();,public long startTime() {             return this.startTime;         }
426,23f97c30a094e8557d7ea4b28c2daba5c0ed9bdf,7f435e2f4f3d7e2249781986cf8c72b00e5f301e,072f6ae138cff390a8f28a8024bf3a00fca73904,Wed Oct 07 18:20:27 CEST 2015,core/src/main/java/org/elasticsearch/index/engine/Engine.java,@Override         public long startTime() {             return this.startTime;         },public long startTime() {             return this.startTime;         }
427,1915c74e93e13f1b9e755cfdda0343b1475577ee,108f5c5701b9811de6743bb54f34107e6d54712f,a798f4f711d1921755596004d7cd1904c5dcddaf,Tue Oct 06 16:21:58 CEST 2015,core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java,boolean hasStrategy = strategy != null;         out.writeBoolean(hasStrategy);         if (hasStrategy) {,if (strategy == null) {             out.writeBoolean(false);         } else {             out.writeBoolean(true);
428,a0821355384ec6881bade28dd3d29e1a64bea550,c5971272ee71a24f17e4958d729588c59266ab05,2fd1cde35e2870cf7e854f94b807d430c30e5828,Tue Oct 06 10:19:56 CEST 2015,core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java,return indexService.shard(shardId.id());,IndexShard indexShard = indexService.getShardOrNull(shardId.id());             return indexShard;
429,ba68a8df63f45af12642b0874ac64dd4841fc832,672a54b39a40ea3cbddcd5d861aa71316d9df268,3ab39385016377778a50df1023d1a944304cefa1,Mon Oct 05 20:00:53 CEST 2015,core/src/main/java/org/elasticsearch/index/IndexService.java,"private volatile Map<Integer, IndexShardInjectorPair> shards = emptyMap();","private volatile ImmutableMap<Integer, IndexShard> shards = ImmutableMap.of();"
430,ba68a8df63f45af12642b0874ac64dd4841fc832,672a54b39a40ea3cbddcd5d861aa71316d9df268,3ab39385016377778a50df1023d1a944304cefa1,Mon Oct 05 20:00:53 CEST 2015,core/src/main/java/org/elasticsearch/index/IndexService.java,"HashMap<Integer, IndexShardInjectorPair> newShards = new HashMap<>(shards);         IndexShardInjectorPair indexShardInjectorPair = newShards.remove(shardId);         indexShard = indexShardInjectorPair.getIndexShard();         shardInjector = indexShardInjectorPair.getInjector();         shards = unmodifiableMap(newShards);         closeShardInjector(reason, sId, shardInjector, indexShard);","HashMap<Integer, IndexShard> tmpShardsMap = new HashMap<>(shards);         indexShard = tmpShardsMap.remove(shardId);         shards = ImmutableMap.copyOf(tmpShardsMap);         closeShard(reason, sId, indexShard, indexShard.store());"
431,9f08d48d340783fc8096b52d3c8f3631c2e21312,2b94126567200814cc36998b93537e3025e9e1cd,74d641181e77beb4bc350493bab6f69872665691,Fri Sep 25 11:14:53 CEST 2015,core/src/test/java/org/elasticsearch/index/query/plugin/DummyQueryParserPlugin.java,return new DummyQueryBuilder();,return null;
432,9f08d48d340783fc8096b52d3c8f3631c2e21312,2b94126567200814cc36998b93537e3025e9e1cd,74d641181e77beb4bc350493bab6f69872665691,Fri Sep 25 11:14:53 CEST 2015,core/src/test/java/org/elasticsearch/index/query/plugin/DummyQueryParserPlugin.java,return true;,return false;
433,34de79370f2b7e220d254484ebb2e01cb94b74f2,4425cd657024f817d806b7258c3e86ad497f916b,e939611c8ef2b940887f0f3ad158d966998d4846,Fri Sep 25 09:38:24 CEST 2015,core/src/main/java/org/elasticsearch/ElasticsearchException.java,"exceptions.put(org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException.class, 140);         exceptions.put(org.elasticsearch.index.query.QueryShardException.class, 141);         final int maxOrd = 141;         assert exceptions.size() == maxOrd + 1;         Constructor<? extends ElasticsearchException>[] idToSupplier = new Constructor[maxOrd + 1];","exceptions.put(org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException.class, exceptions.size());         // NOTE: ONLY APPEND TO THE END and NEVER REMOVE EXCEPTIONS IN MINOR VERSIONS         Constructor<? extends ElasticsearchException>[] idToSupplier = new Constructor[exceptions.size()];"
434,08ae68c19544a3bcf4e517d78093bac8ef60949f,394e551365f2f45f7735d08e2ea57123d86de46a,dbb01f5b43704ee75c92aff30ed2ee62b791e0d8,Wed Sep 23 19:07:30 CEST 2015,core/src/test/java/org/elasticsearch/search/rescore/QueryRescorerIT.java,"QueryBuilders.functionScoreQuery(QueryBuilders.termQuery(""field1"", English.intToEnglish(8)))                         .boostMode(CombineFunction.REPLACE).add(ScoreFunctionBuilders.scriptFunction(new Script(""1000.0f"")))).setScoreMode(                 ""total"");","QueryBuilders.functionScoreQuery(QueryBuilders.termQuery(""field1"", English.intToEnglish(8)),                         ScoreFunctionBuilders.scriptFunction(new Script(""1000.0f""))).boostMode(CombineFunction.REPLACE)).setScoreMode(""total"");"
435,08ae68c19544a3bcf4e517d78093bac8ef60949f,394e551365f2f45f7735d08e2ea57123d86de46a,dbb01f5b43704ee75c92aff30ed2ee62b791e0d8,Wed Sep 23 19:07:30 CEST 2015,core/src/test/java/org/elasticsearch/search/rescore/QueryRescorerIT.java,"QueryBuilders.functionScoreQuery(QueryBuilders.termQuery(""field1"", English.intToEnglish(7)))                         .boostMode(CombineFunction.REPLACE).add(ScoreFunctionBuilders.scriptFunction(new Script(""10000.0f""))))","QueryBuilders.functionScoreQuery(QueryBuilders.termQuery(""field1"", English.intToEnglish(7)),                         ScoreFunctionBuilders.scriptFunction(new Script(""10000.0f""))).boostMode(CombineFunction.REPLACE))"
436,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java,} catch (QueryShardException|QueryParsingException e) {,} catch (ParsingException e) {
437,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java,"throw new QueryParsingException(context.parseContext(), ""Failed to parse"", e);","throw new ParsingException(context, ""Failed to parse"", e);"
438,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java,} catch (QueryShardException e) {,} catch (ParsingException e) {
439,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java,"throw new QueryParsingException(getShardContext().parseContext(), ""Failed to parse"", e);","throw new ParsingException(getParseContext(), ""Failed to parse"", e);"
440,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java,"public ParsedQuery parse(String source) throws QueryParsingException, QueryShardException {",public ParsedQuery parse(String source) throws ParsingException {
441,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java,"@Deprecated     //norelease this method will be removed once all queries are refactored     public Query parseInnerQuery() throws IOException, QueryShardException {         QueryBuilder builder = parseInnerQueryBuilder();         Query result = null;         if (builder != null) {             result = builder.toQuery(this.shardContext);","public Query parseInnerQuery() throws ParsingException, IOException {         // move to START object         XContentParser.Token token;         if (parser.currentToken() != XContentParser.Token.START_OBJECT) {             token = parser.nextToken();             if (token != XContentParser.Token.START_OBJECT) {                 throw new ParsingException(this, ""[_na] query malformed, must start with start_object"");             }         }         token = parser.nextToken();         if (token == XContentParser.Token.END_OBJECT) {             // empty query             return null;         }         if (token != XContentParser.Token.FIELD_NAME) {             throw new ParsingException(this, ""[_na] query malformed, no field after start_object"");         }         String queryName = parser.currentName();         // move to the next START_OBJECT         token = parser.nextToken();         if (token != XContentParser.Token.START_OBJECT && token != XContentParser.Token.START_ARRAY) {             throw new ParsingException(this, ""[_na] query malformed, no field after start_object"");         }         QueryParser queryParser = indexQueryParser.queryParser(queryName);         if (queryParser == null) {             throw new ParsingException(this, ""No query registered for ["" + queryName + ""]"");         }         Query result = queryParser.parse(this);         if (parser.currentToken() == XContentParser.Token.END_OBJECT || parser.currentToken() == XContentParser.Token.END_ARRAY) {             // if we are at END_OBJECT, move to the next one...             parser.nextToken();"
442,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java,"@Deprecated     //norelease should be possible to remove after refactoring all queries     public Query parseInnerFilter() throws QueryShardException, IOException {         assert this.shardContext != null;         QueryBuilder builder = parseInnerFilterToQueryBuilder();         Query result = null;         if (builder != null) {             result = builder.toQuery(this.shardContext);","public Query parseInnerFilter() throws ParsingException, IOException {         final boolean originalIsFilter = isFilter;         try {             isFilter = true;             return parseInnerQuery();         } finally {             isFilter = originalIsFilter;"
443,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java,"throw new QueryShardException(shardContext, ""[nested] requires 'path' field"");","throw new ParsingException(parseContext, ""[nested] requires 'path' field"");"
444,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/test/java/org/elasticsearch/ESExceptionTests.java,"new Throwable(""this exception is unknown"", new QueryShardException(new Index(""foo""), ""foobar"", null) ), // somethin unknown","new Throwable(""this exception is unknown"", new ParsingException(new Index(""foo""), 1, 2, ""foobar"", null) ), // somethin unknown"
445,1228a9fe55582f99afff2c356408008b069c704b,197313c19be74f40222bf20f742071e1b266d5d0,c8d1f7aa673e20a8806826b86b348dd34f9b4864,Fri Sep 18 20:35:56 CEST 2015,core/src/test/java/org/elasticsearch/percolator/PercolatorBackwardsCompatibilityIT.java,"assertThat(e.getRootCause(), instanceOf(QueryShardException.class));","assertThat(e.getRootCause(), instanceOf(ParsingException.class));"
446,bab9523c5688f254a75b3e975f0f5ae934dc0190,37b46fb79c622fec79e220b4ac93d548b59982ae,5b3118fc247699683d2bb00290586c21bc25d701,Fri Sep 18 12:05:03 CEST 2015,core/src/main/java/org/elasticsearch/ElasticsearchException.java,"Class<? extends ElasticsearchException>[] exceptions = new Class[]{                 org.elasticsearch.common.settings.SettingsException.class                 org.elasticsearch.index.snapshots.IndexShardSnapshotFailedException.class                 org.elasticsearch.index.engine.IndexFailedEngineException.class                 org.elasticsearch.indices.recovery.RecoverFilesRecoveryException.class                 org.elasticsearch.index.translog.TruncatedTranslogException.class                 org.elasticsearch.repositories.RepositoryException.class                 org.elasticsearch.index.engine.DocumentSourceMissingException.class                 org.elasticsearch.index.engine.DocumentMissingException.class                 org.elasticsearch.common.util.concurrent.EsRejectedExecutionException.class                 org.elasticsearch.cluster.routing.RoutingException.class                 org.elasticsearch.common.lucene.Lucene.EarlyTerminationException.class                 org.elasticsearch.indices.InvalidAliasNameException.class                 org.elasticsearch.index.engine.EngineCreationFailureException.class                 org.elasticsearch.index.snapshots.IndexShardRestoreFailedException.class                 org.elasticsearch.script.groovy.GroovyScriptCompilationException.class                 org.elasticsearch.cluster.routing.RoutingValidationException.class                 org.elasticsearch.snapshots.SnapshotMissingException.class                 org.elasticsearch.index.shard.IndexShardRecoveryException.class                 org.elasticsearch.action.search.SearchPhaseExecutionException.class                 org.elasticsearch.common.util.concurrent.UncategorizedExecutionException.class                 org.elasticsearch.index.engine.SnapshotFailedEngineException.class                 org.elasticsearch.action.search.ReduceSearchPhaseException.class                 org.elasticsearch.action.RoutingMissingException.class                 org.elasticsearch.index.engine.DeleteFailedEngineException.class                 org.elasticsearch.indices.recovery.RecoveryFailedException.class                 org.elasticsearch.search.builder.SearchSourceBuilderException.class                 org.elasticsearch.index.engine.RefreshFailedEngineException.class                 org.elasticsearch.index.snapshots.IndexShardSnapshotException.class                 org.elasticsearch.search.query.QueryPhaseExecutionException.class                 org.elasticsearch.cluster.metadata.ProcessClusterEventTimeoutException.class                 org.elasticsearch.index.percolator.PercolatorException.class                 org.elasticsearch.snapshots.ConcurrentSnapshotExecutionException.class                 org.elasticsearch.indices.IndexTemplateAlreadyExistsException.class                 org.elasticsearch.indices.InvalidIndexNameException.class                 org.elasticsearch.indices.recovery.DelayRecoveryException.class                 org.elasticsearch.indices.AliasFilterParsingException.class                 org.elasticsearch.indices.InvalidIndexTemplateException.class                 org.elasticsearch.http.HttpException.class                 org.elasticsearch.index.shard.IndexShardNotRecoveringException.class                 org.elasticsearch.indices.IndexPrimaryShardNotAllocatedException.class                 org.elasticsearch.action.UnavailableShardsException.class                 org.elasticsearch.transport.ActionNotFoundTransportException.class                 org.elasticsearch.index.shard.TranslogRecoveryPerformer.BatchOperationException.class                 org.elasticsearch.ElasticsearchException.class                 org.elasticsearch.index.shard.IndexShardClosedException.class                 org.elasticsearch.client.transport.NoNodeAvailableException.class                 org.elasticsearch.cluster.block.ClusterBlockException.class                 org.elasticsearch.action.FailedNodeException.class                 org.elasticsearch.indices.TypeMissingException.class                 org.elasticsearch.indices.InvalidTypeNameException.class                 org.elasticsearch.transport.netty.SizeHeaderFrameDecoder.HttpOnTransportException.class                 org.elasticsearch.common.util.CancellableThreads.ExecutionCancelledException.class                 org.elasticsearch.snapshots.SnapshotCreationException.class                 org.elasticsearch.script.groovy.GroovyScriptExecutionException.class                 org.elasticsearch.indices.IndexTemplateMissingException.class                 org.elasticsearch.transport.NodeNotConnectedException.class                 org.elasticsearch.index.shard.IndexShardRecoveringException.class                 org.elasticsearch.index.shard.IndexShardStartedException.class                 org.elasticsearch.indices.IndexClosedException.class                 org.elasticsearch.repositories.RepositoryMissingException.class                 org.elasticsearch.search.warmer.IndexWarmerMissingException.class                 org.elasticsearch.percolator.PercolateException.class                 org.elasticsearch.index.engine.EngineException.class                 org.elasticsearch.script.expression.ExpressionScriptExecutionException.class                 org.elasticsearch.action.NoShardAvailableActionException.class                 org.elasticsearch.transport.ReceiveTimeoutTransportException.class                 org.elasticsearch.http.BindHttpException.class                 org.elasticsearch.transport.RemoteTransportException.class                 org.elasticsearch.index.shard.IndexShardRelocatedException.class                 org.elasticsearch.snapshots.InvalidSnapshotNameException.class                 org.elasticsearch.repositories.RepositoryVerificationException.class                 org.elasticsearch.search.SearchException.class                 org.elasticsearch.transport.ActionTransportException.class                 org.elasticsearch.common.settings.NoClassSettingsException.class                 org.elasticsearch.transport.NodeShouldNotConnectException.class                 org.elasticsearch.index.mapper.MapperParsingException.class                 org.elasticsearch.action.support.replication.TransportReplicationAction.RetryOnReplicaException.class                 org.elasticsearch.search.dfs.DfsPhaseExecutionException.class                 org.elasticsearch.index.engine.VersionConflictEngineException.class                 org.elasticsearch.snapshots.SnapshotRestoreException.class                 org.elasticsearch.script.Script.ScriptParseException.class                 org.elasticsearch.ElasticsearchGenerationException.class                 org.elasticsearch.action.TimestampParsingException.class                 org.elasticsearch.action.NoSuchNodeException.class                 org.elasticsearch.transport.BindTransportException.class                 org.elasticsearch.snapshots.SnapshotException.class                 org.elasticsearch.index.mapper.MapperException.class                 org.elasticsearch.transport.TransportException.class                 org.elasticsearch.search.SearchContextException.class                 org.elasticsearch.index.translog.TranslogCorruptedException.class                 org.elasticsearch.transport.TransportSerializationException.class                 org.elasticsearch.cluster.IncompatibleClusterStateVersionException.class                 org.elasticsearch.indices.IndexCreationException.class                 org.elasticsearch.index.mapper.MergeMappingException.class                 org.elasticsearch.transport.NotSerializableTransportException.class                 org.elasticsearch.ElasticsearchTimeoutException.class                 org.elasticsearch.search.SearchContextMissingException.class                 org.elasticsearch.transport.SendRequestTransportException.class                 org.elasticsearch.index.IndexShardAlreadyExistsException.class                 org.elasticsearch.indices.IndexAlreadyExistsException.class                 org.elasticsearch.index.engine.DocumentAlreadyExistsException.class                 org.elasticsearch.transport.ConnectTransportException.class                 org.elasticsearch.gateway.GatewayException.class                 org.elasticsearch.script.ScriptException.class                 org.elasticsearch.script.expression.ExpressionScriptCompilationException.class                 org.elasticsearch.index.shard.IndexShardNotStartedException.class                 org.elasticsearch.index.mapper.StrictDynamicMappingException.class                 org.elasticsearch.index.engine.EngineClosedException.class                 AliasesNotFoundException.class                 org.elasticsearch.transport.ResponseHandlerFailureTransportException.class                 org.elasticsearch.search.SearchParseException.class                 org.elasticsearch.search.fetch.FetchPhaseExecutionException.class                 org.elasticsearch.transport.NodeDisconnectedException.class                 org.elasticsearch.common.breaker.CircuitBreakingException.class                 org.elasticsearch.search.aggregations.AggregationInitializationException.class                 org.elasticsearch.search.aggregations.InvalidAggregationPathException.class                 org.elasticsearch.cluster.routing.IllegalShardRoutingStateException.class                 org.elasticsearch.index.engine.FlushFailedEngineException.class                 org.elasticsearch.index.AlreadyExpiredException.class                 org.elasticsearch.index.translog.TranslogException.class                 org.elasticsearch.index.engine.FlushNotAllowedEngineException.class                 org.elasticsearch.index.engine.RecoveryEngineException.class                 org.elasticsearch.common.blobstore.BlobStoreException.class                 org.elasticsearch.index.snapshots.IndexShardRestoreException.class                 org.elasticsearch.index.query.QueryShardException.class                 org.elasticsearch.index.query.QueryParsingException.class                 org.elasticsearch.action.support.replication.TransportReplicationAction.RetryOnPrimaryException.class                 org.elasticsearch.index.engine.DeleteByQueryFailedEngineException.class                 org.elasticsearch.discovery.MasterNotDiscoveredException.class                 org.elasticsearch.action.support.broadcast.BroadcastShardOperationFailedException.class                 org.elasticsearch.node.NodeClosedException.class                 org.elasticsearch.search.aggregations.AggregationExecutionException.class                 org.elasticsearch.ElasticsearchParseException.class                 org.elasticsearch.action.PrimaryMissingActionException.class                 org.elasticsearch.index.engine.CreateFailedEngineException.class                 org.elasticsearch.index.shard.IllegalIndexShardStateException.class                 ElasticsearchSecurityException.class                 ResourceNotFoundException.class                 IndexNotFoundException.class                 ShardNotFoundException.class                 NotSerializableExceptionWrapper.class                 Discovery.FailedToCommitClusterStateException.class         };         Map<String, Constructor<? extends ElasticsearchException>> mapping = new HashMap<>(exceptions.length);         for (Class<? extends ElasticsearchException> e : exceptions) {             String name = e.getName();","// each exception gets an ordinal assigned that must never change. While the exception name can         // change due to refactorings etc. like renaming we have to keep the ordinal <--> class mapping         // to deserialize the exception coming from another node or from an corruption marker on         // a corrupted index.         final Map<Class<? extends ElasticsearchException>, Integer> exceptions = new HashMap<>();         exceptions.put(org.elasticsearch.index.snapshots.IndexShardSnapshotFailedException.class, 0);         exceptions.put(org.elasticsearch.search.dfs.DfsPhaseExecutionException.class, 1);         exceptions.put(org.elasticsearch.common.util.CancellableThreads.ExecutionCancelledException.class, 2);         exceptions.put(org.elasticsearch.discovery.MasterNotDiscoveredException.class, 3);         exceptions.put(org.elasticsearch.ElasticsearchSecurityException.class, 4);         exceptions.put(org.elasticsearch.index.snapshots.IndexShardRestoreException.class, 5);         exceptions.put(org.elasticsearch.indices.IndexClosedException.class, 6);         exceptions.put(org.elasticsearch.http.BindHttpException.class, 7);         exceptions.put(org.elasticsearch.action.search.ReduceSearchPhaseException.class, 8);         exceptions.put(org.elasticsearch.node.NodeClosedException.class, 9);         exceptions.put(org.elasticsearch.index.engine.SnapshotFailedEngineException.class, 10);         exceptions.put(org.elasticsearch.index.shard.ShardNotFoundException.class, 11);         exceptions.put(org.elasticsearch.transport.ConnectTransportException.class, 12);         exceptions.put(org.elasticsearch.transport.NotSerializableTransportException.class, 13);         exceptions.put(org.elasticsearch.transport.ResponseHandlerFailureTransportException.class, 14);         exceptions.put(org.elasticsearch.indices.IndexCreationException.class, 15);         exceptions.put(org.elasticsearch.index.IndexNotFoundException.class, 16);         exceptions.put(org.elasticsearch.cluster.routing.IllegalShardRoutingStateException.class, 17);         exceptions.put(org.elasticsearch.action.support.broadcast.BroadcastShardOperationFailedException.class, 18);         exceptions.put(org.elasticsearch.ResourceNotFoundException.class, 19);         exceptions.put(org.elasticsearch.transport.ActionTransportException.class, 20);         exceptions.put(org.elasticsearch.ElasticsearchGenerationException.class, 21);         exceptions.put(org.elasticsearch.index.engine.CreateFailedEngineException.class, 22);         exceptions.put(org.elasticsearch.index.shard.IndexShardStartedException.class, 23);         exceptions.put(org.elasticsearch.search.SearchContextMissingException.class, 24);         exceptions.put(org.elasticsearch.script.ScriptException.class, 25);         exceptions.put(org.elasticsearch.index.shard.TranslogRecoveryPerformer.BatchOperationException.class, 26);         exceptions.put(org.elasticsearch.snapshots.SnapshotCreationException.class, 27);         exceptions.put(org.elasticsearch.index.engine.DeleteFailedEngineException.class, 28);         exceptions.put(org.elasticsearch.index.engine.DocumentMissingException.class, 29);         exceptions.put(org.elasticsearch.snapshots.SnapshotException.class, 30);         exceptions.put(org.elasticsearch.indices.InvalidAliasNameException.class, 31);         exceptions.put(org.elasticsearch.indices.InvalidIndexNameException.class, 32);         exceptions.put(org.elasticsearch.indices.IndexPrimaryShardNotAllocatedException.class, 33);         exceptions.put(org.elasticsearch.transport.TransportException.class, 34);         exceptions.put(org.elasticsearch.ElasticsearchParseException.class, 35);         exceptions.put(org.elasticsearch.search.SearchException.class, 36);         exceptions.put(org.elasticsearch.index.mapper.MapperException.class, 37);         exceptions.put(org.elasticsearch.indices.InvalidTypeNameException.class, 38);         exceptions.put(org.elasticsearch.snapshots.SnapshotRestoreException.class, 39);         exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);         exceptions.put(org.elasticsearch.index.shard.IndexShardClosedException.class, 41);         exceptions.put(org.elasticsearch.script.expression.ExpressionScriptCompilationException.class, 42);         exceptions.put(org.elasticsearch.indices.recovery.RecoverFilesRecoveryException.class, 43);         exceptions.put(org.elasticsearch.index.translog.TruncatedTranslogException.class, 44);         exceptions.put(org.elasticsearch.indices.recovery.RecoveryFailedException.class, 45);         exceptions.put(org.elasticsearch.index.shard.IndexShardRelocatedException.class, 46);         exceptions.put(org.elasticsearch.transport.NodeShouldNotConnectException.class, 47);         exceptions.put(org.elasticsearch.indices.IndexTemplateAlreadyExistsException.class, 48);         exceptions.put(org.elasticsearch.index.translog.TranslogCorruptedException.class, 49);         exceptions.put(org.elasticsearch.cluster.block.ClusterBlockException.class, 50);         exceptions.put(org.elasticsearch.search.fetch.FetchPhaseExecutionException.class, 51);         exceptions.put(org.elasticsearch.index.IndexShardAlreadyExistsException.class, 52);         exceptions.put(org.elasticsearch.index.engine.VersionConflictEngineException.class, 53);         exceptions.put(org.elasticsearch.index.engine.EngineException.class, 54);         exceptions.put(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, 55);         exceptions.put(org.elasticsearch.action.NoSuchNodeException.class, 56);         exceptions.put(org.elasticsearch.common.settings.SettingsException.class, 57);         exceptions.put(org.elasticsearch.indices.IndexTemplateMissingException.class, 58);         exceptions.put(org.elasticsearch.transport.SendRequestTransportException.class, 59);         exceptions.put(org.elasticsearch.common.util.concurrent.EsRejectedExecutionException.class, 60);         exceptions.put(org.elasticsearch.common.lucene.Lucene.EarlyTerminationException.class, 61);         exceptions.put(org.elasticsearch.cluster.routing.RoutingValidationException.class, 62);         exceptions.put(org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper.class, 63);         exceptions.put(org.elasticsearch.indices.AliasFilterParsingException.class, 64);         exceptions.put(org.elasticsearch.index.engine.DeleteByQueryFailedEngineException.class, 65);         exceptions.put(org.elasticsearch.gateway.GatewayException.class, 66);         exceptions.put(org.elasticsearch.index.shard.IndexShardNotRecoveringException.class, 67);         exceptions.put(org.elasticsearch.http.HttpException.class, 68);         exceptions.put(org.elasticsearch.ElasticsearchException.class, 69);         exceptions.put(org.elasticsearch.snapshots.SnapshotMissingException.class, 70);         exceptions.put(org.elasticsearch.action.PrimaryMissingActionException.class, 71);         exceptions.put(org.elasticsearch.action.FailedNodeException.class, 72);         exceptions.put(org.elasticsearch.search.SearchParseException.class, 73);         exceptions.put(org.elasticsearch.snapshots.ConcurrentSnapshotExecutionException.class, 74);         exceptions.put(org.elasticsearch.common.blobstore.BlobStoreException.class, 75);         exceptions.put(org.elasticsearch.cluster.IncompatibleClusterStateVersionException.class, 76);         exceptions.put(org.elasticsearch.index.engine.RecoveryEngineException.class, 77);         exceptions.put(org.elasticsearch.common.util.concurrent.UncategorizedExecutionException.class, 78);         exceptions.put(org.elasticsearch.action.TimestampParsingException.class, 79);         exceptions.put(org.elasticsearch.action.RoutingMissingException.class, 80);         exceptions.put(org.elasticsearch.index.engine.IndexFailedEngineException.class, 81);         exceptions.put(org.elasticsearch.index.snapshots.IndexShardRestoreFailedException.class, 82);         exceptions.put(org.elasticsearch.repositories.RepositoryException.class, 83);         exceptions.put(org.elasticsearch.transport.ReceiveTimeoutTransportException.class, 84);         exceptions.put(org.elasticsearch.transport.NodeDisconnectedException.class, 85);         exceptions.put(org.elasticsearch.index.AlreadyExpiredException.class, 86);         exceptions.put(org.elasticsearch.search.aggregations.AggregationExecutionException.class, 87);         exceptions.put(org.elasticsearch.index.mapper.MergeMappingException.class, 88);         exceptions.put(org.elasticsearch.indices.InvalidIndexTemplateException.class, 89);         exceptions.put(org.elasticsearch.percolator.PercolateException.class, 90);         exceptions.put(org.elasticsearch.index.engine.RefreshFailedEngineException.class, 91);         exceptions.put(org.elasticsearch.search.aggregations.AggregationInitializationException.class, 92);         exceptions.put(org.elasticsearch.indices.recovery.DelayRecoveryException.class, 93);         exceptions.put(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, 94);         exceptions.put(org.elasticsearch.client.transport.NoNodeAvailableException.class, 95);         exceptions.put(org.elasticsearch.script.groovy.GroovyScriptCompilationException.class, 96);         exceptions.put(org.elasticsearch.snapshots.InvalidSnapshotNameException.class, 97);         exceptions.put(org.elasticsearch.index.shard.IllegalIndexShardStateException.class, 98);         exceptions.put(org.elasticsearch.index.snapshots.IndexShardSnapshotException.class, 99);         exceptions.put(org.elasticsearch.index.shard.IndexShardNotStartedException.class, 100);         exceptions.put(org.elasticsearch.action.search.SearchPhaseExecutionException.class, 101);         exceptions.put(org.elasticsearch.transport.ActionNotFoundTransportException.class, 102);         exceptions.put(org.elasticsearch.transport.TransportSerializationException.class, 103);         exceptions.put(org.elasticsearch.transport.RemoteTransportException.class, 104);         exceptions.put(org.elasticsearch.index.engine.EngineCreationFailureException.class, 105);         exceptions.put(org.elasticsearch.cluster.routing.RoutingException.class, 106);         exceptions.put(org.elasticsearch.index.shard.IndexShardRecoveryException.class, 107);         exceptions.put(org.elasticsearch.repositories.RepositoryMissingException.class, 108);         exceptions.put(org.elasticsearch.script.expression.ExpressionScriptExecutionException.class, 109);         exceptions.put(org.elasticsearch.index.percolator.PercolatorException.class, 110);         exceptions.put(org.elasticsearch.index.engine.DocumentSourceMissingException.class, 111);         exceptions.put(org.elasticsearch.index.engine.FlushNotAllowedEngineException.class, 112);         exceptions.put(org.elasticsearch.common.settings.NoClassSettingsException.class, 113);         exceptions.put(org.elasticsearch.transport.BindTransportException.class, 114);         exceptions.put(org.elasticsearch.rest.action.admin.indices.alias.delete.AliasesNotFoundException.class, 115);         exceptions.put(org.elasticsearch.index.shard.IndexShardRecoveringException.class, 116);         exceptions.put(org.elasticsearch.index.translog.TranslogException.class, 117);         exceptions.put(org.elasticsearch.cluster.metadata.ProcessClusterEventTimeoutException.class, 118);         exceptions.put(org.elasticsearch.action.support.replication.TransportReplicationAction.RetryOnPrimaryException.class, 119);         exceptions.put(org.elasticsearch.ElasticsearchTimeoutException.class, 120);         exceptions.put(org.elasticsearch.search.query.QueryPhaseExecutionException.class, 121);         exceptions.put(org.elasticsearch.repositories.RepositoryVerificationException.class, 122);         exceptions.put(org.elasticsearch.search.aggregations.InvalidAggregationPathException.class, 123);         exceptions.put(org.elasticsearch.script.groovy.GroovyScriptExecutionException.class, 124);         exceptions.put(org.elasticsearch.indices.IndexAlreadyExistsException.class, 125);         exceptions.put(org.elasticsearch.script.Script.ScriptParseException.class, 126);         exceptions.put(org.elasticsearch.transport.netty.SizeHeaderFrameDecoder.HttpOnTransportException.class, 127);         exceptions.put(org.elasticsearch.index.mapper.MapperParsingException.class, 128);         exceptions.put(org.elasticsearch.search.SearchContextException.class, 129);         exceptions.put(org.elasticsearch.search.builder.SearchSourceBuilderException.class, 130);         exceptions.put(org.elasticsearch.index.engine.EngineClosedException.class, 131);         exceptions.put(org.elasticsearch.action.NoShardAvailableActionException.class, 132);         exceptions.put(org.elasticsearch.action.UnavailableShardsException.class, 133);         exceptions.put(org.elasticsearch.index.engine.FlushFailedEngineException.class, 134);         exceptions.put(org.elasticsearch.common.breaker.CircuitBreakingException.class, 135);         exceptions.put(org.elasticsearch.transport.NodeNotConnectedException.class, 136);         exceptions.put(org.elasticsearch.index.mapper.StrictDynamicMappingException.class, 137);         exceptions.put(org.elasticsearch.action.support.replication.TransportReplicationAction.RetryOnReplicaException.class, 138);         exceptions.put(org.elasticsearch.indices.TypeMissingException.class, 139);         // added in 3.x         exceptions.put(org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException.class, 140);         final int maxOrd = 140;         assert exceptions.size() == maxOrd + 1;         Constructor<? extends ElasticsearchException>[] idToSupplier = new Constructor[maxOrd + 1];         for (Map.Entry<Class<? extends ElasticsearchException>, Integer> e : exceptions.entrySet()) {"
447,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java,"query.toXContent(builder, params);         builder.field(""child_type"", type);         builder.field(""score_type"", scoreType.name().toLowerCase(Locale.ROOT));","queryBuilder.toXContent(builder, params);         builder.field(""child_type"", childType);         if (boost != 1.0f) {             builder.field(""boost"", boost);         }         if (scoreMode != null) {             builder.field(""score_mode"", scoreMode);         }         if (minChildren != null) {"
448,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java,"query.toXContent(builder, params);         builder.field(""parent_type"", type);         builder.field(""score"", score);         printBoostAndQueryName(builder);","queryBuilder.toXContent(builder, params);         builder.field(""parent_type"", parentType);         if (scoreMode != null) {             builder.field(""score_mode"", scoreMode);         }         if (boost != 1.0f) {             builder.field(""boost"", boost);         }         if (queryName != null) {             builder.field(""_name"", queryName);         }"
449,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java,"client.prepareSearch(indexName).setQuery(hasChildQuery(""child"", termQuery(""field2"", parentChildIndexGenerator.getQueryValue())).scoreType(ScoreType.MAX)).execute().actionGet();","client.prepareSearch(indexName).setQuery(hasChildQuery(""child"", termQuery(""field2"", parentChildIndexGenerator.getQueryValue())).scoreMode(""max"")).execute().actionGet();"
450,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java,"SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery(""child"", matchAllQuery()).scoreType(ScoreType.MAX)).execute().actionGet();","SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery(""child"", matchAllQuery()).scoreMode(""max"")).execute().actionGet();"
451,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchShortCircuitBenchmark.java,".setQuery(hasChildQuery(""child"", matchQuery(""field2"", i)).scoreType(ScoreType.MAX))",".setQuery(hasChildQuery(""child"", matchQuery(""field2"", i)).scoreMode(""max""))"
452,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,".setQuery(constantScoreQuery(hasChildQuery(""child"", matchAllQuery()).scoreType(ScoreType.MAX)))",".setQuery(constantScoreQuery(hasChildQuery(""child"", matchAllQuery()).scoreMode(""max"")))"
453,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,".setQuery(constantScoreQuery(hasParentQuery(""parent"", matchAllQuery()).score(true)))",".setQuery(constantScoreQuery(hasParentQuery(""parent"", matchAllQuery()).scoreMode(""score"")))"
454,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"countResponse = client().prepareCount(""test"").setQuery(hasParentQuery(""parent"", termQuery(""p_field"", ""1"")).score(true))","countResponse = client().prepareCount(""test"").setQuery(hasParentQuery(""parent"", termQuery(""p_field"", ""1"")).scoreMode(""score""))"
455,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,.boostMode(CombineFunction.REPLACE.getName())).scoreType(ScoreType.SUM)).get();,".boostMode(CombineFunction.REPLACE.getName())).scoreMode(""total"")).get();"
456,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,.boostMode(CombineFunction.REPLACE.getName())).scoreType(ScoreType.AVG)).get();,".boostMode(CombineFunction.REPLACE.getName())).scoreMode(""avg"")).get();"
457,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,.boostMode(CombineFunction.REPLACE.getName())).score(true)),".boostMode(CombineFunction.REPLACE.getName())).scoreMode(""score""))"
458,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = client().prepareSearch(""test"").setQuery(QueryBuilders.hasChildQuery(""child"", matchQuery(""text"", ""value"")).scoreType(ScoreType.MAX))","response = client().prepareSearch(""test"").setQuery(QueryBuilders.hasChildQuery(""child"", matchQuery(""text"", ""value"")).scoreMode(""max""))"
459,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = client().prepareSearch(""test"").setQuery(QueryBuilders.hasParentQuery(""child"", matchQuery(""text"", ""value"")).score(true))","response = client().prepareSearch(""test"").setQuery(QueryBuilders.hasParentQuery(""child"", matchQuery(""text"", ""value"")).scoreMode(""score""))"
460,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,".setQuery(hasChildQuery(""child"", prefixQuery(""c_field"", ""c"")).scoreType(ScoreType.MAX)).addSort(""p_field"", SortOrder.ASC)",".setQuery(hasChildQuery(""child"", prefixQuery(""c_field"", ""c"")).scoreMode(""max"")).addSort(""p_field"", SortOrder.ASC)"
461,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,".setQuery(hasParentQuery(""parent"", prefixQuery(""p_field"", ""p"")).score(true)).addSort(""c_field"", SortOrder.ASC)",".setQuery(hasParentQuery(""parent"", prefixQuery(""p_field"", ""p"")).scoreMode(""score"")).addSort(""c_field"", SortOrder.ASC)"
462,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,".setQuery(hasChildQuery(""child"", termQuery(""c_field"", ""yellow"")).scoreType(ScoreType.SUM)).get();",".setQuery(hasChildQuery(""child"", termQuery(""c_field"", ""yellow"")).scoreMode(""total"")).get();"
463,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"hasParentQuery(""parent"", termQuery(""p_field"", ""p_value2"")).score(true))).get();","hasParentQuery(""parent"", termQuery(""p_field"", ""p_value2"")).scoreMode(""score""))).get();"
464,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"searchResponse = client().prepareSearch(""test"").setQuery(hasChildQuery(""child"", termQuery(""c_field"", ""yellow"")).scoreType(ScoreType.SUM))","searchResponse = client().prepareSearch(""test"").setQuery(hasChildQuery(""child"", termQuery(""c_field"", ""yellow"")).scoreMode(""total""))"
465,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"SearchResponse searchResponse = client().prepareSearch(""test"").setQuery(hasChildQuery(""child"", matchAllQuery()).scoreType(ScoreType.SUM))","SearchResponse searchResponse = client().prepareSearch(""test"").setQuery(hasChildQuery(""child"", matchAllQuery()).scoreMode(""total""))"
466,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,ScoreType scoreMode = ScoreType.values()[getRandom().nextInt(ScoreType.values().length)];,String scoreMode = ScoreMode.values()[getRandom().nextInt(ScoreMode.values().length)].name().toLowerCase(Locale.ROOT);
467,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"SearchResponse searchResponse = client().prepareSearch(""test"").setQuery(hasChildQuery(""child"", termQuery(""c_field"", ""1"")).scoreType(ScoreType.MAX).queryName(""test""))","SearchResponse searchResponse = client().prepareSearch(""test"").setQuery(hasChildQuery(""child"", termQuery(""c_field"", ""1"")).scoreMode(""max"").queryName(""test""))"
468,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"searchResponse = client().prepareSearch(""test"").setQuery(hasParentQuery(""parent"", termQuery(""p_field"", ""1"")).score(true).queryName(""test""))","searchResponse = client().prepareSearch(""test"").setQuery(hasParentQuery(""parent"", termQuery(""p_field"", ""1"")).scoreMode(""score"").queryName(""test""))"
469,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,".setQuery(hasChildQuery(""child"", termQuery(""c_field"", ""1"")).scoreType(ScoreType.MAX))",".setQuery(hasChildQuery(""child"", termQuery(""c_field"", ""1"")).scoreMode(""max""))"
470,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,".setQuery(hasParentQuery(""parent"", termQuery(""p_field"", ""1"")).score(true))",".setQuery(hasParentQuery(""parent"", termQuery(""p_field"", ""1"")).scoreMode(""score""))"
471,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.NONE, 0, 0);","response = minMaxQuery(""none"", 0, null);"
472,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.NONE, 1, 0);","response = minMaxQuery(""none"", 1, null);"
473,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.NONE, 2, 0);","response = minMaxQuery(""none"", 2, null);"
474,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.NONE, 3, 0);","response = minMaxQuery(""none"", 3, null);"
475,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.NONE, 4, 0);","response = minMaxQuery(""none"", 4, null);"
476,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"// Score mode = SUM         response = minMaxQuery(ScoreType.SUM, 0, 0);","// Score mode = TOTAL         response = minMaxQuery(""total"", 0, null);"
477,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.SUM, 1, 0);","response = minMaxQuery(""total"", 1, null);"
478,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.SUM, 2, 0);","response = minMaxQuery(""total"", 2, null);"
479,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.SUM, 3, 0);","response = minMaxQuery(""total"", 3, null);"
480,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.SUM, 4, 0);","response = minMaxQuery(""total"", 4, null);"
481,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.SUM, 0, 4);","response = minMaxQuery(""total"", 0, 4);"
482,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.SUM, 0, 3);","response = minMaxQuery(""total"", 0, 3);"
483,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.SUM, 0, 2);","response = minMaxQuery(""total"", 0, 2);"
484,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.SUM, 2, 2);","response = minMaxQuery(""total"", 2, 2);"
485,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.SUM, 3, 2);","response = minMaxQuery(""total"", 3, 2);"
486,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.MAX, 0, 0);","response = minMaxQuery(""max"", 0, null);"
487,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.MAX, 1, 0);","response = minMaxQuery(""max"", 1, null);"
488,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.MAX, 2, 0);","response = minMaxQuery(""max"", 2, null);"
489,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.MAX, 3, 0);","response = minMaxQuery(""max"", 3, null);"
490,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.MAX, 4, 0);","response = minMaxQuery(""max"", 4, null);"
491,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.AVG, 0, 0);","response = minMaxQuery(""avg"", 0, null);"
492,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.AVG, 1, 0);","response = minMaxQuery(""avg"", 1, null);"
493,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.AVG, 2, 0);","response = minMaxQuery(""avg"", 2, null);"
494,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.AVG, 3, 0);","response = minMaxQuery(""avg"", 3, null);"
495,73f7df510e45d36e9892dfbbf219a66df2d7322e,d49a744b7eceaf85191778f4d074b3607508a07d,2c618a11de0ef2497f1a0b5d7cccf5ad4e7ff4d0,Fri Sep 11 14:15:12 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.AVG, 4, 0);","response = minMaxQuery(""avg"", 4, null);"
496,1b8047e51c02c518c8f9b04d168a849e8d973bcf,80b59e0d66a91c4fdfccd2cfd2432060f5600bd4,5ae00a6129ae1a8a8291c51f5967f81d4db4a85c,Fri Sep 11 09:56:13 CEST 2015,core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java,if (currentState.supersedes(nodeSpecificClusterState)) {,"if (nodeSpecificClusterState.version() < currentState.version() && Objects.equals(nodeSpecificClusterState.nodes().masterNodeId(), currentState.nodes().masterNodeId())) {"
497,3839d15ea075a55dcacbc6adae408c5fce119434,a0fea6d365cf841bc6ba59ee82072db316ead1c7,2574b5e7f4d0028d408cb119845dd277596873da,Thu Sep 10 16:13:01 CEST 2015,core/src/main/java/org/elasticsearch/index/indexing/ShardIndexingService.java,"for (IndexingOperationListener listener : listeners) {             try {                 listener.postIndex(index, ex);             } catch (Throwable t) {                 logger.warn(""postIndex listener [{}] failed"", t, listener);             }         }",totalStats.indexFailed.inc();         typeStats(index.type()).indexFailed.inc();
498,56b3db6ba3463d244ea777b527b7a786caa5042c,8d2a2f8d664c495b2cc69eb7f9a8eaab903f125a,c10f116a8421e4e168f8a243aca920b0621c6a47,Thu Sep 10 15:52:28 CEST 2015,core/src/main/java/org/elasticsearch/index/query/QueryFilterBuilder.java,builder.field(NAME);,builder.field(QueryFilterParser.NAME);
499,db705ab4609c48961333d984d21d4a26f8b86781,678e1be5cf9c94607677c91b7e4b889a1f6362a5,73d84e4797441670c259c3916a5e3b42552725b0,Wed Sep 09 17:08:22 CEST 2015,core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java,"builder.field(""short_circuit_cutoff"", shortCircuitCutoff);         printBoostAndQueryName(builder);         if (queryInnerHits != null) {             queryInnerHits.toXContent(builder, params);","}         if (queryName != null) {             builder.field(""_name"", queryName);         }         if (innerHit != null) {             builder.startObject(""inner_hits"");             builder.value(innerHit);             builder.endObject();"
500,db705ab4609c48961333d984d21d4a26f8b86781,678e1be5cf9c94607677c91b7e4b889a1f6362a5,73d84e4797441670c259c3916a5e3b42552725b0,Wed Sep 09 17:08:22 CEST 2015,core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java,String likeFieldName = MoreLikeThisQueryParser.Fields.LIKE.getPreferredName();         builder.startObject(NAME);,builder.startObject(MoreLikeThisQueryParser.NAME);
501,db705ab4609c48961333d984d21d4a26f8b86781,678e1be5cf9c94607677c91b7e4b889a1f6362a5,73d84e4797441670c259c3916a5e3b42552725b0,Wed Sep 09 17:08:22 CEST 2015,core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java,"if (analyzer != null) {             builder.field(""analyzer"", analyzer);         }         if (failOnUnsupportedField != null) {             builder.field(MoreLikeThisQueryParser.Fields.FAIL_ON_UNSUPPORTED_FIELD.getPreferredName(), failOnUnsupportedField);         }         if (include != null) {             builder.field(""include"", include);","if (boost != -1) {             builder.field(""boost"", boost);         }         if (queryName != null) {             builder.field(""_name"", queryName);"
502,db705ab4609c48961333d984d21d4a26f8b86781,678e1be5cf9c94607677c91b7e4b889a1f6362a5,73d84e4797441670c259c3916a5e3b42552725b0,Wed Sep 09 17:08:22 CEST 2015,core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java,"response = minMaxQuery(ScoreType.NONE, 0, 0, cutoff);","response = minMaxQuery(""none"", 0, 0);"
503,be3409f1dbd38de5b61c5a29160828048501ef84,ea83007c7e972b44f93fffd9c6e4cbde2d4b417a,b98cd5f611597e394b47fd88972751ef8c2ad08d,Fri Sep 04 19:21:38 CEST 2015,core/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java,"Query expectedQuery = new SpanWithinQuery(new SpanTermQuery(new Term(""age"", longToPrefixCoded(34, 0))),                                                   new SpanTermQuery(new Term(""age"", longToPrefixCoded(35, 0))));         Query actualQuery = queryParser.parse(spanWithinQuery(spanTermQuery(""age"", 34), spanTermQuery(""age"", 35)))                                               .query();","SpanTermQuery big = new SpanTermQuery(new Term(""age"", longToPrefixCoded(34, 0)));         big.setBoost(2);         SpanTermQuery little = new SpanTermQuery(new Term(""age"", longToPrefixCoded(35, 0)));         little.setBoost(3);         Query expectedQuery = new SpanWithinQuery(big, little);         SpanWithinQueryBuilder spanWithinQueryBuilder = spanWithinQuery()                 .big(spanTermQuery(""age"", 34).boost(2))                 .little(spanTermQuery(""age"", 35).boost(3));         Query actualQuery = queryParser.parse(spanWithinQueryBuilder).query();         assertEquals(expectedQuery, actualQuery);         float boost = randomFloat();         expectedQuery.setBoost(boost);         spanWithinQueryBuilder.boost(boost);         actualQuery = queryParser.parse(spanWithinQueryBuilder).query();"
504,be3409f1dbd38de5b61c5a29160828048501ef84,ea83007c7e972b44f93fffd9c6e4cbde2d4b417a,b98cd5f611597e394b47fd88972751ef8c2ad08d,Fri Sep 04 19:21:38 CEST 2015,core/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java,"Query expectedQuery = new SpanContainingQuery(new SpanTermQuery(new Term(""age"", longToPrefixCoded(34, 0))),                                                       new SpanTermQuery(new Term(""age"", longToPrefixCoded(35, 0))));         Query actualQuery = queryParser.parse(spanContainingQuery(spanTermQuery(""age"", 34), spanTermQuery(""age"", 35))).query();","SpanTermQuery big = new SpanTermQuery(new Term(""age"", longToPrefixCoded(34, 0)));         big.setBoost(2);         SpanTermQuery little = new SpanTermQuery(new Term(""age"", longToPrefixCoded(35, 0)));         little.setBoost(3);         Query expectedQuery = new SpanContainingQuery(big, little);         SpanContainingQueryBuilder spanContainingQueryBuilder = spanContainingQuery()                 .big(spanTermQuery(""age"", 34).boost(2))                 .little(spanTermQuery(""age"", 35).boost(3));         Query actualQuery = queryParser.parse(spanContainingQueryBuilder).query();         assertEquals(expectedQuery, actualQuery);         float boost = randomFloat();         expectedQuery.setBoost(boost);         spanContainingQueryBuilder.boost(boost);         actualQuery = queryParser.parse(spanContainingQueryBuilder).query();"
505,78d097de39906fae207accf413bf6a6878aa5d80,084a6101fecc675a051bd05f7fda746821423fe4,db5e225a25b4f0d35e6f767cd1b69d41fdabf0e7,Fri Aug 28 10:49:28 CEST 2015,core/src/main/java/org/elasticsearch/index/query/DisMaxQueryBuilder.java,private final ArrayList<QueryBuilder> queries = new ArrayList<>();,private ArrayList<QueryBuilder> queries = new ArrayList<>();
506,78d097de39906fae207accf413bf6a6878aa5d80,084a6101fecc675a051bd05f7fda746821423fe4,db5e225a25b4f0d35e6f767cd1b69d41fdabf0e7,Fri Aug 28 10:49:28 CEST 2015,core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java,"ParsedQuery parsedQuery = new ParsedQuery(innerQuery, shardContext.copyNamedQueries());                 InnerHitsContext.NestedInnerHits nestedInnerHits = new InnerHitsContext.NestedInnerHits(innerHits.v2(), parsedQuery, null, getParentObjectMapper(), nestedObjectMapper);                 String name = innerHits.v1() != null ? innerHits.v1() : path;                 shardContext.addInnerHits(name, nestedInnerHits);","ParsedQuery parsedQuery = new ParsedQuery(innerQuery, parseContext.copyNamedQueries());                 InnerHitsContext.NestedInnerHits nestedInnerHits = new InnerHitsContext.NestedInnerHits(innerHits.getSubSearchContext(), parsedQuery, null, getParentObjectMapper(), nestedObjectMapper);                 String name = innerHits.getName() != null ? innerHits.getName() : path;                 parseContext.addInnerHits(name, nestedInnerHits);"
507,59cb67c7bd0ab6311115b20954e013412b676b29,8757af2d928355a799290207d9128adae4c78fa1,8ff1efbcf05fa54262b3f6d0ab12f30516d1b52a,Tue Aug 25 11:59:40 CEST 2015,core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java,childFilter = shardContext.bitsetFilter(nestedObjectMapper.nestedTypeFilter());         parentObjectMapper = shardContext.nestedScope().nextLevel(nestedObjectMapper);,childFilter = nestedObjectMapper.nestedTypeFilter();         parentObjectMapper = parseContext.nestedScope().nextLevel(nestedObjectMapper);
508,311faa822a19a1b3a97629bb947777df9579b10b,6520395c1cc8f6cab4895047f8d0f21fc4a5f686,119e9ba138e6f2a8c09e4e9d12ef67eee57b7986,Tue Aug 25 04:06:58 CEST 2015,core/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingService.java,private volatile List<? extends ZenPing> zenPings = Collections.emptyList();,private List<ZenPing> zenPings = Collections.emptyList();
509,297f0f22d7934b1948040e3b70595e10a831c718,89e1a0fb7dd6227fb1d74d51644da7a52c3f7055,339486b943f35f666b07b05cd9ea184e6f9be8a4,Mon Aug 24 21:03:25 CEST 2015,core/src/main/java/org/elasticsearch/node/Node.java,"this(preparedSettings, loadConfigSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());","final Settings pSettings = settingsBuilder().put(preparedSettings)                 .put(Client.CLIENT_TYPE_SETTING, CLIENT_TYPE).build();         Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettings(pSettings, loadConfigSettings);         tuple = new Tuple<>(TribeService.processSettings(tuple.v1()), tuple.v2());         // The only place we can actually fake the version a node is running on:         Version version = pSettings.getAsVersion(""tests.mock.version"", Version.CURRENT);         ESLogger logger = Loggers.getLogger(Node.class, tuple.v1().get(""name""));         logger.info(""version[{}], pid[{}], build[{}/{}]"", version, JvmInfo.jvmInfo().pid(), Build.CURRENT.hashShort(), Build.CURRENT.timestamp());         logger.info(""initializing ..."");         if (logger.isDebugEnabled()) {             Environment env = tuple.v2();             logger.debug(""using config [{}], data [{}], logs [{}], plugins [{}]"",                     env.configFile(), Arrays.toString(env.dataFiles()), env.logsFile(), env.pluginsFile());         }         this.pluginsService = new PluginsService(tuple.v1(), tuple.v2());         this.settings = pluginsService.updatedSettings();         // create the environment based on the finalized (processed) view of the settings         this.environment = new Environment(this.settings());         final NodeEnvironment nodeEnvironment;         try {             nodeEnvironment = new NodeEnvironment(this.settings, this.environment);         } catch (IOException ex) {             throw new IllegalStateException(""Failed to created node environment"", ex);         }         final ThreadPool threadPool = new ThreadPool(settings);         boolean success = false;         try {             ModulesBuilder modules = new ModulesBuilder();             modules.add(new Version.Module(version));             modules.add(new CircuitBreakerModule(settings));             // plugin modules must be added here, before others or we can get crazy injection errors...             for (Module pluginModule : pluginsService.nodeModules()) {                 modules.add(pluginModule);             }             modules.add(new PluginsModule(pluginsService));             modules.add(new SettingsModule(settings));             modules.add(new NodeModule(this));             modules.add(new NetworkModule());             modules.add(new ScriptModule(settings));             modules.add(new EnvironmentModule(environment));             modules.add(new NodeEnvironmentModule(nodeEnvironment));             modules.add(new ClusterNameModule(settings));             modules.add(new ThreadPoolModule(threadPool));             modules.add(new DiscoveryModule(settings));             modules.add(new ClusterModule(settings));             modules.add(new RestModule(settings));             modules.add(new TransportModule(settings));             if (settings.getAsBoolean(HTTP_ENABLED, true)) {                 modules.add(new HttpServerModule(settings));             }             modules.add(new IndicesModule(settings));             modules.add(new SearchModule(settings));             modules.add(new ActionModule(false));             modules.add(new MonitorModule(settings));             modules.add(new GatewayModule());             modules.add(new NodeClientModule());             modules.add(new ShapeModule());             modules.add(new PercolatorModule());             modules.add(new ResourceWatcherModule());             modules.add(new RepositoriesModule());             modules.add(new TribeModule());             pluginsService.processModules(modules);             injector = modules.createInjector();             client = injector.getInstance(Client.class);             threadPool.setNodeSettingsService(injector.getInstance(NodeSettingsService.class));             success = true;         } finally {             if (!success) {                 nodeEnvironment.close();                 ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS);             }         }         logger.info(""initialized"");"
510,2d42839eefa506e568fdb2b7045fa260ef2354c5,b18e4702782668e36648bd24083c0d2c16732a18,13c1c27d5af84a18bac189a2bc92d748c7dff371,Fri Aug 21 15:58:36 CEST 2015,core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java,printBoostAndQueryName(builder);,"if (escape != null) {             builder.field(""escape"", escape);         }"
511,c0444ccbc6a783e5a9363d0e99dba8aa400dca38,4c5cfd02cc25c08d9567653a06f5a97ccf08f21d,5496a504e284dbf13f8ae736d231de03bd65382e,Tue Aug 18 19:16:40 CEST 2015,core/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotIntegTestCase.java,".extendArray(""plugin.types"", MockRepository.Plugin.class.getName()).build();","// Rebalancing is causing some checks after restore to randomly fail                 // due to https://github.com/elastic/elasticsearch/issues/9421                 .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, EnableAllocationDecider.Rebalance.NONE)                 .extendArray(""plugin.types"", MockRepositoryPlugin.class.getName()).build();"
512,de54671173003750b5df2671c1ab64d1903fe8fb,260a929e3bc1166c4f60bb15f6e9d9a829667393,34635a4b4f376cfb148c867723cc0fd669cd88cd,Tue Aug 18 10:35:17 CEST 2015,core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java,printBoostAndQueryName(builder);,"if (queryName != null) {             builder.field(""_name"", queryName);         }         if (coerce != null) {             builder.field(""coerce"", coerce);         }         if (ignoreMalformed != null) {             builder.field(""ignore_malformed"", ignoreMalformed);         }"
513,f3d63095dbcc985e24162fbac4ee0d6914dc757d,be638fb6ef894f26464cd9b1702084d00a96eec7,4010e7e9a7148d66d5fb3699c5a042053efea1f4,Fri Aug 14 12:34:26 CEST 2015,core/src/test/java/org/elasticsearch/index/analysis/commongrams/CommonGramsTokenFilterFactoryTests.java,".loadFromClasspath(""org/elasticsearch/index/analysis/commongrams/commongrams.json"")                      .put(""path.home"", createHome())",".loadFromStream(json, getClass().getResourceAsStream(json))                      .put(""path.home"", createTempDir().toString())"
514,f3d63095dbcc985e24162fbac4ee0d6914dc757d,be638fb6ef894f26464cd9b1702084d00a96eec7,4010e7e9a7148d66d5fb3699c5a042053efea1f4,Fri Aug 14 12:34:26 CEST 2015,core/src/test/java/org/elasticsearch/index/analysis/synonyms/SynonymsAnalysisTest.java,"InputStream synonyms = getClass().getResourceAsStream(""synonyms.txt"");         InputStream synonymsWordnet = getClass().getResourceAsStream(""synonyms_wordnet.txt"");         Path home = createTempDir();         Path config = home.resolve(""config"");         Files.createDirectory(config);         Files.copy(synonyms, config.resolve(""synonyms.txt""));         Files.copy(synonymsWordnet, config.resolve(""synonyms_wordnet.txt""));","String json = ""/org/elasticsearch/index/analysis/synonyms/synonyms.json"";"
515,f3d63095dbcc985e24162fbac4ee0d6914dc757d,be638fb6ef894f26464cd9b1702084d00a96eec7,4010e7e9a7148d66d5fb3699c5a042053efea1f4,Fri Aug 14 12:34:26 CEST 2015,core/src/test/java/org/elasticsearch/index/analysis/synonyms/SynonymsAnalysisTest.java,"loadFromClasspath(""org/elasticsearch/index/analysis/synonyms/synonyms.json"")                 .put(""path.home"", home)","loadFromStream(json, getClass().getResourceAsStream(json))                 .put(""path.home"", createTempDir().toString())"
516,f8a90edab28fe6039b2d418519393f34d2f8da80,8ac439fc1b40893ae12d09319a15b40b5ed2dc9d,4010e7e9a7148d66d5fb3699c5a042053efea1f4,Fri Aug 14 11:40:49 CEST 2015,core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java,printBoostAndQueryName(builder);,"if (minimumShouldMatch != null) {             builder.field(""minimum_should_match"", minimumShouldMatch);         }         if (disableCoord != null) {             builder.field(""disable_coord"", disableCoord);         }         if (boost != -1) {             builder.field(""boost"", boost);         }         if (queryName != null) {             builder.field(""_name"", queryName);         }"
517,dc1a2d2e5aa92c6855354d2c544fc75a2b3e24e0,9f64c75391f79d0b1caa5171ae1b4f78ec4f88ca,1f41a8c682fffee8b7ef56018c47e7ef247343da,Thu Aug 13 23:35:48 CEST 2015,core/src/main/java/org/elasticsearch/search/SearchModule.java,if (searchServiceImpl == SearchService.class) {,// search service -- testing only!         String impl = settings.get(SEARCH_SERVICE_IMPL);         if (impl == null) {
518,20f944bf9459c5dd0b8326641c43782ddc0880b4,b763265f677132fe3772d51135734f542540e6bb,6f13171d50612f3004cc0eee5ddb5beead06b104,Thu Aug 06 15:09:14 CEST 2015,core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java,public void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {         writeString(namedWriteable.getName());,void writeNamedWriteable(NamedWriteable namedWriteable) throws IOException {         writeString(namedWriteable.getWriteableName());
519,20f944bf9459c5dd0b8326641c43782ddc0880b4,b763265f677132fe3772d51135734f542540e6bb,6f13171d50612f3004cc0eee5ddb5beead06b104,Thu Aug 06 15:09:14 CEST 2015,core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java,version0                 namedWriteableRegistry,"version0, new NamedWriteableRegistry()"
520,20f944bf9459c5dd0b8326641c43782ddc0880b4,b763265f677132fe3772d51135734f542540e6bb,6f13171d50612f3004cc0eee5ddb5beead06b104,Thu Aug 06 15:09:14 CEST 2015,core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java,version1                 namedWriteableRegistry,"version1, new NamedWriteableRegistry()"
521,e472cbed09cb6a4020a2ff4114e546abe8476252,052cf1446f9caea16454e0db5860e8e694c61119,0e027d82c92775949e628587fc49c9a37fb44cf8,Mon Aug 03 19:20:34 CEST 2015,core/src/test/java/org/elasticsearch/plugins/PluginManagerTests.java,Path binDir = env.binFile();         if (!Files.exists(binDir)) {             Files.createDirectories(binDir);         },"Path binDir = env.homeFile().resolve(""bin"");"
522,c0490215c7dcc48a042e712aaaa851754bc03df2,ac92ad627067b4a8816e2efbcce89a2e8ecca689,964a8490164805d98ffbe8b496b0578218043196,Mon Jul 20 12:20:57 CEST 2015,core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java,Object value = null;         float boost = AbstractQueryBuilder.DEFAULT_BOOST;,String value = null;         float boost = 1.0f;
523,fc1b178dc4b844070f29074ce27f8bc348a9499f,a0cccec86f949408b516668c056e3fb5ebf72d34,a6c00073256cff58ccf83ec6699166bedd34a6f7,Wed Jul 08 13:11:25 CEST 2015,core/src/main/java/org/elasticsearch/index/query/FuzzyQueryParser.java,String value = null;         float boost = AbstractQueryBuilder.DEFAULT_BOOST;,Object value = null;         float boost = 1.0f;
524,fc1b178dc4b844070f29074ce27f8bc348a9499f,a0cccec86f949408b516668c056e3fb5ebf72d34,a6c00073256cff58ccf83ec6699166bedd34a6f7,Wed Jul 08 13:11:25 CEST 2015,core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java,float boost = AbstractQueryBuilder.DEFAULT_BOOST;         int flagsValue = -1;,float boost = 1.0f;         int flagsValue = DEFAULT_FLAGS_VALUE;
525,63530631f9fe1f63b9677af61019639bd8cb78cf,88e3d6c4bc27433e793cec349f532b44421cbe16,90f32d4d32cde5ae28fbc6a3e725afafbdf1c58f,Thu Jul 02 15:29:48 CEST 2015,core/src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java,"} else if (""boost"".equals(currentFieldName)) {                     boost = parser.floatValue();                 } else if (!scriptParameterParser.token(currentFieldName, token, parser)) {","} else if (!scriptParameterParser.token(currentFieldName, token, parser, parseContext.parseFieldMatcher())) {"
526,d7187238a21cdf5aaee75e2820855893a36a7e16,4b071f8d2c2bbca6b7067bce502634079c8fada8,6765635067564840f0696671d60571624e335ffd,Thu Jul 02 11:46:47 CEST 2015,core/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java,"wrappedStream = new FilterStreamInput(wrappedStream, namedWriteableRegistry);             wrappedStream.setVersion(version);",streamIn.setVersion(version);
527,654dc20897b0e4eb479c5dea64b3a87dc496ba4e,10f80167e66901ce9b208b974d4d8ac2bdc6fa53,bbaf4710cbf056134ec789ed3d6fe7ea2af1a05d,Tue Jun 30 17:38:31 CEST 2015,core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java,"try {             ObjectInputStream oin = new ObjectInputStream(this);             @SuppressWarnings(""unchecked"")             T object = (T) oin.readObject();             return object;         } catch (ClassNotFoundException e) {             throw new IOException(""failed to deserialize exception"", e);","if (readBoolean()) {             int key = readVInt();             switch (key) {                 case 0:                     final String name = readString();                     return (T) readException(this, name);                 case 1:                     // this sucks it would be nice to have a better way to construct those?                     String msg = readOptionalString();                     final int idx = msg.indexOf("" (resource="");                     final String resource = msg.substring(idx + "" (resource="".length(), msg.length()-1);                     msg = msg.substring(0, idx);                     return (T) readStackTrace(new CorruptIndexException(msg, resource, readThrowable()), this); // Lucene 5.3 will have getters for all these                 case 2:                     return (T) readStackTrace(new IndexFormatTooNewException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these                 case 3:                     return (T) readStackTrace(new IndexFormatTooOldException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these                 case 4:                     return (T) readStackTrace(new NullPointerException(readOptionalString()), this);                 case 5:                     return (T) readStackTrace(new NumberFormatException(readOptionalString()), this);                 case 6:                     return (T) readStackTrace(new IllegalArgumentException(readOptionalString(), readThrowable()), this);                 case 7:                     return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);                 case 8:                     return (T) readStackTrace(new EOFException(readOptionalString()), this);                 case 9:                     return (T) readStackTrace(new SecurityException(readOptionalString(), readThrowable()), this);                 case 10:                     return (T) readStackTrace(new StringIndexOutOfBoundsException(readOptionalString()), this);                 case 11:                     return (T) readStackTrace(new ArrayIndexOutOfBoundsException(readOptionalString()), this);                 case 12:                     return (T) readStackTrace(new AssertionError(readOptionalString(), readThrowable()), this);                 case 13:                     return (T) readStackTrace(new FileNotFoundException(readOptionalString()), this);                 case 14:                     final String file = readOptionalString();                     final String other = readOptionalString();                     final String reason = readOptionalString();                     readOptionalString(); // skip the msg - it's composed from file, other and reason                     return (T) readStackTrace(new NoSuchFileException(file, other, reason), this);                 case 15:                     return (T) readStackTrace(new OutOfMemoryError(readOptionalString()), this);                 case 16:                     return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);                 case 17:                     return (T) readStackTrace(new LockObtainFailedException(readOptionalString(), readThrowable()), this);                 default:                     assert false : ""no such exception for id: "" + key;"
528,791d111cc0cc021e7bb28c5a8a3add26c834b6e4,573c85251efbfbbf17413fd55786099b29b79253,dc67bd0021555beefb9be8ef5c1606937baf812c,Wed Jun 24 17:05:17 CEST 2015,core/src/main/java/org/elasticsearch/index/shard/IndexShard.java,"threadPool, indexingService, indexSettingsService, warmer, store, deletionPolicy, mergePolicyConfig.getMergePolicy(), mergeSchedulerConfig,                 mapperService.indexAnalyzer(), similarityService.similarity(), codecService, failedEngineListener, translogRecoveryPerformer, indexCache.filter(), indexCache.filterPolicy(), translogConfig);","threadPool, indexingService, indexSettingsService.indexSettings(), warmer, store, deletionPolicy, mergePolicyConfig.getMergePolicy(), mergeSchedulerConfig,                 mapperAnalyzer, similarityService.similarity(), codecService, failedEngineListener, translogRecoveryPerformer, indexCache.filter(), indexCache.filterPolicy(), translogConfig);"
529,9171ff095989646994b5a7ca1a64620ce688dd72,33668a8df0c47db0390ac91baff206416c9ebc8d,f4a143d1387f9b4de841aa2460483157fc9baa5a,Wed Jun 17 11:54:00 CEST 2015,core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java,"builder.startObject(NAME);         if (boost == -1 && fuzziness == null && prefixLength == null && queryName != null) {             builder.field(name, value);         } else {",builder.startObject(FuzzyQueryParser.NAME);
530,9171ff095989646994b5a7ca1a64620ce688dd72,33668a8df0c47db0390ac91baff206416c9ebc8d,f4a143d1387f9b4de841aa2460483157fc9baa5a,Wed Jun 17 11:54:00 CEST 2015,core/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java,builder.startObject(NAME);         if (boost == -1 && rewrite == null && queryName != null) {,builder.startObject(PrefixQueryParser.NAME);         if (boost == -1 && rewrite == null && queryName == null) {
531,9171ff095989646994b5a7ca1a64620ce688dd72,33668a8df0c47db0390ac91baff206416c9ebc8d,f4a143d1387f9b4de841aa2460483157fc9baa5a,Wed Jun 17 11:54:00 CEST 2015,core/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java,"builder.startObject(NAME);         if (boost == -1 && rewrite == null && queryName != null) {             builder.field(name, regexp);         } else {",builder.startObject(RegexpQueryParser.NAME);
532,9171ff095989646994b5a7ca1a64620ce688dd72,33668a8df0c47db0390ac91baff206416c9ebc8d,f4a143d1387f9b4de841aa2460483157fc9baa5a,Wed Jun 17 11:54:00 CEST 2015,core/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java,builder.startObject(NAME);         if (boost == -1 && rewrite == null && queryName != null) {,builder.startObject(WildcardQueryParser.NAME);         if (boost == -1 && rewrite == null && queryName == null) {
533,5d3bedfe9680c002b2b2eca578669ba06d92df70,11492b896234272d7e38ab1aec0942c063a362f0,cdd13253deee8c4f0cafe5a048161e4efb9ffce7,Tue Jun 16 11:12:00 CEST 2015,core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java,builder.startObject(NAME);         if (script != null) {,builder.startObject(ScriptQueryParser.NAME);
534,42acee358705868f099edd3e6c6c92e7c18cf80e,b096984f0499b12d9650980aca6c2d40c0412fa0,3bda78e43b125a678778fe175c2b3fc623e0c515,Tue Jun 09 10:48:32 CEST 2015,core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java,import java.util.*;,import java.util.Collection;
